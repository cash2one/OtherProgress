// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* PbStoreItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbStoreItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbSaleCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbSaleCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbSaleCeilFlushZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbSaleCeilFlushZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbSaleCeilFlush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbSaleCeilFlush_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbSaleBooth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbSaleBooth_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequireStoreItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequireStoreItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushSaleBooth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushSaleBooth_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushWareHouse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushWareHouse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequireAddItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequireAddItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddItemReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddItemReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequireSallPutItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequireSallPutItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequireSallDownItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequireSallDownItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaleCellOpItemReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaleCellOpItemReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequireOpenCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequireOpenCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequirSellPaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequirSellPaper_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellPaperCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellPaperCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnSellPaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnSellPaper_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SaleCellStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StoreItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SaleOpFailType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_trade_2eproto() {
  protobuf_AddDesc_trade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trade.proto");
  GOOGLE_CHECK(file != NULL);
  PbStoreItem_descriptor_ = file->message_type(0);
  static const int PbStoreItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbStoreItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbStoreItem, itemcount_),
  };
  PbStoreItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbStoreItem_descriptor_,
      PbStoreItem::default_instance_,
      PbStoreItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbStoreItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbStoreItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbStoreItem));
  PbSaleCell_descriptor_ = file->message_type(1);
  static const int PbSaleCell_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, nickname_),
  };
  PbSaleCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbSaleCell_descriptor_,
      PbSaleCell::default_instance_,
      PbSaleCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbSaleCell));
  PbSaleCeilFlushZone_descriptor_ = file->message_type(2);
  static const int PbSaleCeilFlushZone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCeilFlushZone, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCeilFlushZone, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCeilFlushZone, salecell_),
  };
  PbSaleCeilFlushZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbSaleCeilFlushZone_descriptor_,
      PbSaleCeilFlushZone::default_instance_,
      PbSaleCeilFlushZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCeilFlushZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCeilFlushZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbSaleCeilFlushZone));
  PbSaleCeilFlush_descriptor_ = file->message_type(3);
  static const int PbSaleCeilFlush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCeilFlush, salecell_),
  };
  PbSaleCeilFlush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbSaleCeilFlush_descriptor_,
      PbSaleCeilFlush::default_instance_,
      PbSaleCeilFlush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCeilFlush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCeilFlush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbSaleCeilFlush));
  PbSaleBooth_descriptor_ = file->message_type(4);
  static const int PbSaleBooth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleBooth, zonecellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleBooth, salecell_),
  };
  PbSaleBooth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbSaleBooth_descriptor_,
      PbSaleBooth::default_instance_,
      PbSaleBooth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleBooth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleBooth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbSaleBooth));
  RequireStoreItem_descriptor_ = file->message_type(5);
  static const int RequireStoreItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireStoreItem, type_),
  };
  RequireStoreItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequireStoreItem_descriptor_,
      RequireStoreItem::default_instance_,
      RequireStoreItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireStoreItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireStoreItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequireStoreItem));
  FlushSaleBooth_descriptor_ = file->message_type(6);
  static const int FlushSaleBooth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushSaleBooth, salebooth_),
  };
  FlushSaleBooth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushSaleBooth_descriptor_,
      FlushSaleBooth::default_instance_,
      FlushSaleBooth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushSaleBooth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushSaleBooth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushSaleBooth));
  FlushWareHouse_descriptor_ = file->message_type(7);
  static const int FlushWareHouse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushWareHouse, store_items_),
  };
  FlushWareHouse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushWareHouse_descriptor_,
      FlushWareHouse::default_instance_,
      FlushWareHouse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushWareHouse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushWareHouse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushWareHouse));
  RequireAddItem_descriptor_ = file->message_type(8);
  static const int RequireAddItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireAddItem, item_),
  };
  RequireAddItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequireAddItem_descriptor_,
      RequireAddItem::default_instance_,
      RequireAddItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireAddItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireAddItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequireAddItem));
  AddItemReturn_descriptor_ = file->message_type(9);
  static const int AddItemReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemReturn, ret_),
  };
  AddItemReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddItemReturn_descriptor_,
      AddItemReturn::default_instance_,
      AddItemReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddItemReturn));
  RequireSallPutItem_descriptor_ = file->message_type(10);
  static const int RequireSallPutItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireSallPutItem, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireSallPutItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireSallPutItem, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireSallPutItem, price_),
  };
  RequireSallPutItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequireSallPutItem_descriptor_,
      RequireSallPutItem::default_instance_,
      RequireSallPutItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireSallPutItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireSallPutItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequireSallPutItem));
  RequireSallDownItem_descriptor_ = file->message_type(11);
  static const int RequireSallDownItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireSallDownItem, cellid_),
  };
  RequireSallDownItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequireSallDownItem_descriptor_,
      RequireSallDownItem::default_instance_,
      RequireSallDownItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireSallDownItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireSallDownItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequireSallDownItem));
  SaleCellOpItemReturn_descriptor_ = file->message_type(12);
  static const int SaleCellOpItemReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaleCellOpItemReturn, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaleCellOpItemReturn, reason_),
  };
  SaleCellOpItemReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaleCellOpItemReturn_descriptor_,
      SaleCellOpItemReturn::default_instance_,
      SaleCellOpItemReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaleCellOpItemReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaleCellOpItemReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaleCellOpItemReturn));
  RequireOpenCell_descriptor_ = file->message_type(13);
  static const int RequireOpenCell_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireOpenCell, cellid_),
  };
  RequireOpenCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequireOpenCell_descriptor_,
      RequireOpenCell::default_instance_,
      RequireOpenCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireOpenCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireOpenCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequireOpenCell));
  RequirSellPaper_descriptor_ = file->message_type(14);
  static const int RequirSellPaper_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequirSellPaper, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequirSellPaper, charid_),
  };
  RequirSellPaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequirSellPaper_descriptor_,
      RequirSellPaper::default_instance_,
      RequirSellPaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequirSellPaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequirSellPaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequirSellPaper));
  SellPaperCell_descriptor_ = file->message_type(15);
  static const int SellPaperCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaperCell, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaperCell, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaperCell, salecell_),
  };
  SellPaperCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellPaperCell_descriptor_,
      SellPaperCell::default_instance_,
      SellPaperCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaperCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaperCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellPaperCell));
  ReturnSellPaper_descriptor_ = file->message_type(16);
  static const int ReturnSellPaper_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSellPaper, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSellPaper, papercell_),
  };
  ReturnSellPaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnSellPaper_descriptor_,
      ReturnSellPaper::default_instance_,
      ReturnSellPaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSellPaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSellPaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnSellPaper));
  SaleCellStatusType_descriptor_ = file->enum_type(0);
  StoreItemType_descriptor_ = file->enum_type(1);
  SaleOpFailType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbStoreItem_descriptor_, &PbStoreItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbSaleCell_descriptor_, &PbSaleCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbSaleCeilFlushZone_descriptor_, &PbSaleCeilFlushZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbSaleCeilFlush_descriptor_, &PbSaleCeilFlush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbSaleBooth_descriptor_, &PbSaleBooth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequireStoreItem_descriptor_, &RequireStoreItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushSaleBooth_descriptor_, &FlushSaleBooth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushWareHouse_descriptor_, &FlushWareHouse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequireAddItem_descriptor_, &RequireAddItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddItemReturn_descriptor_, &AddItemReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequireSallPutItem_descriptor_, &RequireSallPutItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequireSallDownItem_descriptor_, &RequireSallDownItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaleCellOpItemReturn_descriptor_, &SaleCellOpItemReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequireOpenCell_descriptor_, &RequireOpenCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequirSellPaper_descriptor_, &RequirSellPaper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellPaperCell_descriptor_, &SellPaperCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnSellPaper_descriptor_, &ReturnSellPaper::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trade_2eproto() {
  delete PbStoreItem::default_instance_;
  delete PbStoreItem_reflection_;
  delete PbSaleCell::default_instance_;
  delete PbSaleCell_reflection_;
  delete PbSaleCeilFlushZone::default_instance_;
  delete PbSaleCeilFlushZone_reflection_;
  delete PbSaleCeilFlush::default_instance_;
  delete PbSaleCeilFlush_reflection_;
  delete PbSaleBooth::default_instance_;
  delete PbSaleBooth_reflection_;
  delete RequireStoreItem::default_instance_;
  delete RequireStoreItem_reflection_;
  delete FlushSaleBooth::default_instance_;
  delete FlushSaleBooth_reflection_;
  delete FlushWareHouse::default_instance_;
  delete FlushWareHouse_reflection_;
  delete RequireAddItem::default_instance_;
  delete RequireAddItem_reflection_;
  delete AddItemReturn::default_instance_;
  delete AddItemReturn_reflection_;
  delete RequireSallPutItem::default_instance_;
  delete RequireSallPutItem_reflection_;
  delete RequireSallDownItem::default_instance_;
  delete RequireSallDownItem_reflection_;
  delete SaleCellOpItemReturn::default_instance_;
  delete SaleCellOpItemReturn_reflection_;
  delete RequireOpenCell::default_instance_;
  delete RequireOpenCell_reflection_;
  delete RequirSellPaper::default_instance_;
  delete RequirSellPaper_reflection_;
  delete SellPaperCell::default_instance_;
  delete SellPaperCell_reflection_;
  delete ReturnSellPaper::default_instance_;
  delete ReturnSellPaper_reflection_;
}

void protobuf_AddDesc_trade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013trade.proto\022\021HelloKittyMsgData\"0\n\013PbSt"
    "oreItem\022\016\n\006itemId\030\001 \001(\r\022\021\n\titemCount\030\002 \001"
    "(\r\"\227\001\n\nPbSaleCell\022\016\n\006cellId\030\001 \002(\r\022\016\n\006ite"
    "mId\030\002 \002(\r\022\021\n\titemCount\030\003 \002(\r\022\r\n\005price\030\004 "
    "\002(\r\0225\n\006status\030\005 \002(\0162%.HelloKittyMsgData."
    "SaleCellStatusType\022\020\n\010nickName\030\006 \002(\t\"g\n\023"
    "PbSaleCeilFlushZone\022\016\n\006charid\030\001 \002(\004\022\017\n\007s"
    "ceneid\030\002 \002(\r\022/\n\010saleCell\030\003 \002(\0132\035.HelloKi"
    "ttyMsgData.PbSaleCell\"B\n\017PbSaleCeilFlush"
    "\022/\n\010saleCell\030\001 \002(\0132\035.HelloKittyMsgData.P"
    "bSaleCell\"Y\n\013PbSaleBooth\022\031\n\nzoneCellID\030\001"
    " \002(\r:\00510000\022/\n\010saleCell\030\002 \003(\0132\035.HelloKit"
    "tyMsgData.PbSaleCell\"B\n\020RequireStoreItem"
    "\022.\n\004type\030\001 \002(\0162 .HelloKittyMsgData.Store"
    "ItemType\"C\n\016FlushSaleBooth\0221\n\tsaleBooth\030"
    "\001 \001(\0132\036.HelloKittyMsgData.PbSaleBooth\"E\n"
    "\016FlushWareHouse\0223\n\013store_items\030\001 \003(\0132\036.H"
    "elloKittyMsgData.PbStoreItem\">\n\016RequireA"
    "ddItem\022,\n\004item\030\001 \002(\0132\036.HelloKittyMsgData"
    ".PbStoreItem\"\034\n\rAddItemReturn\022\013\n\003ret\030\001 \002"
    "(\010\"V\n\022RequireSallPutItem\022\016\n\006cellId\030\001 \002(\r"
    "\022\016\n\006itemId\030\002 \002(\r\022\021\n\titemCount\030\003 \002(\r\022\r\n\005p"
    "rice\030\004 \002(\r\"%\n\023RequireSallDownItem\022\016\n\006cel"
    "lId\030\001 \002(\r\"V\n\024SaleCellOpItemReturn\022\013\n\003ret"
    "\030\001 \002(\010\0221\n\006reason\030\002 \002(\0162!.HelloKittyMsgDa"
    "ta.SaleOpFailType\"!\n\017RequireOpenCell\022\016\n\006"
    "cellID\030\001 \002(\r\"5\n\017RequirSellPaper\022\022\n\007scene"
    "id\030\001 \002(\r:\0010\022\016\n\006charid\030\002 \002(\004\"^\n\rSellPaper"
    "Cell\022\014\n\004name\030\001 \002(\t\022\016\n\006charid\030\002 \002(\004\022/\n\010sa"
    "lecell\030\003 \002(\0132\035.HelloKittyMsgData.PbSaleC"
    "ell\"Z\n\017ReturnSellPaper\022\022\n\ncreateTime\030\001 \002"
    "(\r\0223\n\tpaperCell\030\002 \003(\0132 .HelloKittyMsgDat"
    "a.SellPaperCell*v\n\022SaleCellStatusType\022\025\n"
    "\021Sale_Status_Empty\020\000\022\030\n\024Sale_Status_For_"
    "Sale\020\001\022\030\n\024Sale_Status_Sale_End\020\002\022\025\n\021Sale"
    "_Status_Close\020\003*W\n\rStoreItemType\022\031\n\025Stor"
    "e_Type_Ware_House\020\000\022\026\n\022Store_Type_Packag"
    "e\020\001\022\023\n\017Store_Type_Sale\020\002*\241\001\n\016SaleOpFailT"
    "ype\022\021\n\rSale_Op_Close\020\000\022\025\n\021Sale_Op_Not_Em"
    "pty\020\001\022\033\n\027Sale_Op_Item_Not_Enough\020\002\022\021\n\rSa"
    "le_Op_Empty\020\003\022\020\n\014Sale_Op_Full\020\004\022\021\n\rSale_"
    "Op_Money\020\005\022\020\n\014Sale_Op_Open\020\006", 1668);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trade.proto", &protobuf_RegisterTypes);
  PbStoreItem::default_instance_ = new PbStoreItem();
  PbSaleCell::default_instance_ = new PbSaleCell();
  PbSaleCeilFlushZone::default_instance_ = new PbSaleCeilFlushZone();
  PbSaleCeilFlush::default_instance_ = new PbSaleCeilFlush();
  PbSaleBooth::default_instance_ = new PbSaleBooth();
  RequireStoreItem::default_instance_ = new RequireStoreItem();
  FlushSaleBooth::default_instance_ = new FlushSaleBooth();
  FlushWareHouse::default_instance_ = new FlushWareHouse();
  RequireAddItem::default_instance_ = new RequireAddItem();
  AddItemReturn::default_instance_ = new AddItemReturn();
  RequireSallPutItem::default_instance_ = new RequireSallPutItem();
  RequireSallDownItem::default_instance_ = new RequireSallDownItem();
  SaleCellOpItemReturn::default_instance_ = new SaleCellOpItemReturn();
  RequireOpenCell::default_instance_ = new RequireOpenCell();
  RequirSellPaper::default_instance_ = new RequirSellPaper();
  SellPaperCell::default_instance_ = new SellPaperCell();
  ReturnSellPaper::default_instance_ = new ReturnSellPaper();
  PbStoreItem::default_instance_->InitAsDefaultInstance();
  PbSaleCell::default_instance_->InitAsDefaultInstance();
  PbSaleCeilFlushZone::default_instance_->InitAsDefaultInstance();
  PbSaleCeilFlush::default_instance_->InitAsDefaultInstance();
  PbSaleBooth::default_instance_->InitAsDefaultInstance();
  RequireStoreItem::default_instance_->InitAsDefaultInstance();
  FlushSaleBooth::default_instance_->InitAsDefaultInstance();
  FlushWareHouse::default_instance_->InitAsDefaultInstance();
  RequireAddItem::default_instance_->InitAsDefaultInstance();
  AddItemReturn::default_instance_->InitAsDefaultInstance();
  RequireSallPutItem::default_instance_->InitAsDefaultInstance();
  RequireSallDownItem::default_instance_->InitAsDefaultInstance();
  SaleCellOpItemReturn::default_instance_->InitAsDefaultInstance();
  RequireOpenCell::default_instance_->InitAsDefaultInstance();
  RequirSellPaper::default_instance_->InitAsDefaultInstance();
  SellPaperCell::default_instance_->InitAsDefaultInstance();
  ReturnSellPaper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trade_2eproto {
  StaticDescriptorInitializer_trade_2eproto() {
    protobuf_AddDesc_trade_2eproto();
  }
} static_descriptor_initializer_trade_2eproto_;
const ::google::protobuf::EnumDescriptor* SaleCellStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaleCellStatusType_descriptor_;
}
bool SaleCellStatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StoreItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreItemType_descriptor_;
}
bool StoreItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SaleOpFailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaleOpFailType_descriptor_;
}
bool SaleOpFailType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PbStoreItem::kItemIdFieldNumber;
const int PbStoreItem::kItemCountFieldNumber;
#endif  // !_MSC_VER

PbStoreItem::PbStoreItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbStoreItem::InitAsDefaultInstance() {
}

PbStoreItem::PbStoreItem(const PbStoreItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbStoreItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbStoreItem::~PbStoreItem() {
  SharedDtor();
}

void PbStoreItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbStoreItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbStoreItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbStoreItem_descriptor_;
}

const PbStoreItem& PbStoreItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

PbStoreItem* PbStoreItem::default_instance_ = NULL;

PbStoreItem* PbStoreItem::New() const {
  return new PbStoreItem;
}

void PbStoreItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbStoreItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemCount;
        break;
      }

      // optional uint32 itemCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbStoreItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 itemCount = 2;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbStoreItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 itemCount = 2;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbStoreItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 itemCount = 2;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbStoreItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbStoreItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbStoreItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbStoreItem::MergeFrom(const PbStoreItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbStoreItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbStoreItem::CopyFrom(const PbStoreItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbStoreItem::IsInitialized() const {

  return true;
}

void PbStoreItem::Swap(PbStoreItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbStoreItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbStoreItem_descriptor_;
  metadata.reflection = PbStoreItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbSaleCell::kCellIdFieldNumber;
const int PbSaleCell::kItemIdFieldNumber;
const int PbSaleCell::kItemCountFieldNumber;
const int PbSaleCell::kPriceFieldNumber;
const int PbSaleCell::kStatusFieldNumber;
const int PbSaleCell::kNickNameFieldNumber;
#endif  // !_MSC_VER

PbSaleCell::PbSaleCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbSaleCell::InitAsDefaultInstance() {
}

PbSaleCell::PbSaleCell(const PbSaleCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbSaleCell::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  itemid_ = 0u;
  itemcount_ = 0u;
  price_ = 0u;
  status_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbSaleCell::~PbSaleCell() {
  SharedDtor();
}

void PbSaleCell::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void PbSaleCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbSaleCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbSaleCell_descriptor_;
}

const PbSaleCell& PbSaleCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

PbSaleCell* PbSaleCell::default_instance_ = NULL;

PbSaleCell* PbSaleCell::New() const {
  return new PbSaleCell;
}

void PbSaleCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    itemid_ = 0u;
    itemcount_ = 0u;
    price_ = 0u;
    status_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbSaleCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemCount;
        break;
      }

      // required uint32 itemCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // required uint32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required .HelloKittyMsgData.SaleCellStatusType status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::SaleCellStatusType_IsValid(value)) {
            set_status(static_cast< ::HelloKittyMsgData::SaleCellStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nickName;
        break;
      }

      // required string nickName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbSaleCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // required uint32 itemCount = 3;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemcount(), output);
  }

  // required uint32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  // required .HelloKittyMsgData.SaleCellStatusType status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // required string nickName = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbSaleCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // required uint32 itemCount = 3;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemcount(), target);
  }

  // required uint32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  // required .HelloKittyMsgData.SaleCellStatusType status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // required string nickName = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbSaleCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 itemCount = 3;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

    // required uint32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required .HelloKittyMsgData.SaleCellStatusType status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string nickName = 6;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbSaleCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbSaleCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbSaleCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbSaleCell::MergeFrom(const PbSaleCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbSaleCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbSaleCell::CopyFrom(const PbSaleCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbSaleCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PbSaleCell::Swap(PbSaleCell* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(price_, other->price_);
    std::swap(status_, other->status_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbSaleCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbSaleCell_descriptor_;
  metadata.reflection = PbSaleCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbSaleCeilFlushZone::kCharidFieldNumber;
const int PbSaleCeilFlushZone::kSceneidFieldNumber;
const int PbSaleCeilFlushZone::kSaleCellFieldNumber;
#endif  // !_MSC_VER

PbSaleCeilFlushZone::PbSaleCeilFlushZone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbSaleCeilFlushZone::InitAsDefaultInstance() {
  salecell_ = const_cast< ::HelloKittyMsgData::PbSaleCell*>(&::HelloKittyMsgData::PbSaleCell::default_instance());
}

PbSaleCeilFlushZone::PbSaleCeilFlushZone(const PbSaleCeilFlushZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbSaleCeilFlushZone::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = 0u;
  salecell_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbSaleCeilFlushZone::~PbSaleCeilFlushZone() {
  SharedDtor();
}

void PbSaleCeilFlushZone::SharedDtor() {
  if (this != default_instance_) {
    delete salecell_;
  }
}

void PbSaleCeilFlushZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbSaleCeilFlushZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbSaleCeilFlushZone_descriptor_;
}

const PbSaleCeilFlushZone& PbSaleCeilFlushZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

PbSaleCeilFlushZone* PbSaleCeilFlushZone::default_instance_ = NULL;

PbSaleCeilFlushZone* PbSaleCeilFlushZone::New() const {
  return new PbSaleCeilFlushZone;
}

void PbSaleCeilFlushZone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = 0u;
    if (has_salecell()) {
      if (salecell_ != NULL) salecell_->::HelloKittyMsgData::PbSaleCell::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbSaleCeilFlushZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }

      // required uint32 sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_saleCell;
        break;
      }

      // required .HelloKittyMsgData.PbSaleCell saleCell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saleCell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salecell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbSaleCeilFlushZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }

  // required .HelloKittyMsgData.PbSaleCell saleCell = 3;
  if (has_salecell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->salecell(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbSaleCeilFlushZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }

  // required .HelloKittyMsgData.PbSaleCell saleCell = 3;
  if (has_salecell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->salecell(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbSaleCeilFlushZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // required .HelloKittyMsgData.PbSaleCell saleCell = 3;
    if (has_salecell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salecell());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbSaleCeilFlushZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbSaleCeilFlushZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbSaleCeilFlushZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbSaleCeilFlushZone::MergeFrom(const PbSaleCeilFlushZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_salecell()) {
      mutable_salecell()->::HelloKittyMsgData::PbSaleCell::MergeFrom(from.salecell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbSaleCeilFlushZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbSaleCeilFlushZone::CopyFrom(const PbSaleCeilFlushZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbSaleCeilFlushZone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_salecell()) {
    if (!this->salecell().IsInitialized()) return false;
  }
  return true;
}

void PbSaleCeilFlushZone::Swap(PbSaleCeilFlushZone* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(salecell_, other->salecell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbSaleCeilFlushZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbSaleCeilFlushZone_descriptor_;
  metadata.reflection = PbSaleCeilFlushZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbSaleCeilFlush::kSaleCellFieldNumber;
#endif  // !_MSC_VER

PbSaleCeilFlush::PbSaleCeilFlush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbSaleCeilFlush::InitAsDefaultInstance() {
  salecell_ = const_cast< ::HelloKittyMsgData::PbSaleCell*>(&::HelloKittyMsgData::PbSaleCell::default_instance());
}

PbSaleCeilFlush::PbSaleCeilFlush(const PbSaleCeilFlush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbSaleCeilFlush::SharedCtor() {
  _cached_size_ = 0;
  salecell_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbSaleCeilFlush::~PbSaleCeilFlush() {
  SharedDtor();
}

void PbSaleCeilFlush::SharedDtor() {
  if (this != default_instance_) {
    delete salecell_;
  }
}

void PbSaleCeilFlush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbSaleCeilFlush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbSaleCeilFlush_descriptor_;
}

const PbSaleCeilFlush& PbSaleCeilFlush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

PbSaleCeilFlush* PbSaleCeilFlush::default_instance_ = NULL;

PbSaleCeilFlush* PbSaleCeilFlush::New() const {
  return new PbSaleCeilFlush;
}

void PbSaleCeilFlush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_salecell()) {
      if (salecell_ != NULL) salecell_->::HelloKittyMsgData::PbSaleCell::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbSaleCeilFlush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.PbSaleCell saleCell = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salecell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbSaleCeilFlush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.PbSaleCell saleCell = 1;
  if (has_salecell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->salecell(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbSaleCeilFlush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.PbSaleCell saleCell = 1;
  if (has_salecell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->salecell(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbSaleCeilFlush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.PbSaleCell saleCell = 1;
    if (has_salecell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salecell());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbSaleCeilFlush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbSaleCeilFlush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbSaleCeilFlush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbSaleCeilFlush::MergeFrom(const PbSaleCeilFlush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_salecell()) {
      mutable_salecell()->::HelloKittyMsgData::PbSaleCell::MergeFrom(from.salecell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbSaleCeilFlush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbSaleCeilFlush::CopyFrom(const PbSaleCeilFlush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbSaleCeilFlush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_salecell()) {
    if (!this->salecell().IsInitialized()) return false;
  }
  return true;
}

void PbSaleCeilFlush::Swap(PbSaleCeilFlush* other) {
  if (other != this) {
    std::swap(salecell_, other->salecell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbSaleCeilFlush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbSaleCeilFlush_descriptor_;
  metadata.reflection = PbSaleCeilFlush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbSaleBooth::kZoneCellIDFieldNumber;
const int PbSaleBooth::kSaleCellFieldNumber;
#endif  // !_MSC_VER

PbSaleBooth::PbSaleBooth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbSaleBooth::InitAsDefaultInstance() {
}

PbSaleBooth::PbSaleBooth(const PbSaleBooth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbSaleBooth::SharedCtor() {
  _cached_size_ = 0;
  zonecellid_ = 10000u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbSaleBooth::~PbSaleBooth() {
  SharedDtor();
}

void PbSaleBooth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbSaleBooth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbSaleBooth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbSaleBooth_descriptor_;
}

const PbSaleBooth& PbSaleBooth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

PbSaleBooth* PbSaleBooth::default_instance_ = NULL;

PbSaleBooth* PbSaleBooth::New() const {
  return new PbSaleBooth;
}

void PbSaleBooth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zonecellid_ = 10000u;
  }
  salecell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbSaleBooth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zoneCellID = 1 [default = 10000];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zonecellid_)));
          set_has_zonecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_saleCell;
        break;
      }

      // repeated .HelloKittyMsgData.PbSaleCell saleCell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saleCell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_salecell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_saleCell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbSaleBooth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zoneCellID = 1 [default = 10000];
  if (has_zonecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zonecellid(), output);
  }

  // repeated .HelloKittyMsgData.PbSaleCell saleCell = 2;
  for (int i = 0; i < this->salecell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->salecell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbSaleBooth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zoneCellID = 1 [default = 10000];
  if (has_zonecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zonecellid(), target);
  }

  // repeated .HelloKittyMsgData.PbSaleCell saleCell = 2;
  for (int i = 0; i < this->salecell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->salecell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbSaleBooth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zoneCellID = 1 [default = 10000];
    if (has_zonecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zonecellid());
    }

  }
  // repeated .HelloKittyMsgData.PbSaleCell saleCell = 2;
  total_size += 1 * this->salecell_size();
  for (int i = 0; i < this->salecell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->salecell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbSaleBooth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbSaleBooth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbSaleBooth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbSaleBooth::MergeFrom(const PbSaleBooth& from) {
  GOOGLE_CHECK_NE(&from, this);
  salecell_.MergeFrom(from.salecell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zonecellid()) {
      set_zonecellid(from.zonecellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbSaleBooth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbSaleBooth::CopyFrom(const PbSaleBooth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbSaleBooth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < salecell_size(); i++) {
    if (!this->salecell(i).IsInitialized()) return false;
  }
  return true;
}

void PbSaleBooth::Swap(PbSaleBooth* other) {
  if (other != this) {
    std::swap(zonecellid_, other->zonecellid_);
    salecell_.Swap(&other->salecell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbSaleBooth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbSaleBooth_descriptor_;
  metadata.reflection = PbSaleBooth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequireStoreItem::kTypeFieldNumber;
#endif  // !_MSC_VER

RequireStoreItem::RequireStoreItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequireStoreItem::InitAsDefaultInstance() {
}

RequireStoreItem::RequireStoreItem(const RequireStoreItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequireStoreItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequireStoreItem::~RequireStoreItem() {
  SharedDtor();
}

void RequireStoreItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequireStoreItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequireStoreItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequireStoreItem_descriptor_;
}

const RequireStoreItem& RequireStoreItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

RequireStoreItem* RequireStoreItem::default_instance_ = NULL;

RequireStoreItem* RequireStoreItem::New() const {
  return new RequireStoreItem;
}

void RequireStoreItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequireStoreItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.StoreItemType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::StoreItemType_IsValid(value)) {
            set_type(static_cast< ::HelloKittyMsgData::StoreItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequireStoreItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.StoreItemType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequireStoreItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.StoreItemType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequireStoreItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.StoreItemType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequireStoreItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequireStoreItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequireStoreItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequireStoreItem::MergeFrom(const RequireStoreItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequireStoreItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequireStoreItem::CopyFrom(const RequireStoreItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequireStoreItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequireStoreItem::Swap(RequireStoreItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequireStoreItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequireStoreItem_descriptor_;
  metadata.reflection = RequireStoreItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlushSaleBooth::kSaleBoothFieldNumber;
#endif  // !_MSC_VER

FlushSaleBooth::FlushSaleBooth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushSaleBooth::InitAsDefaultInstance() {
  salebooth_ = const_cast< ::HelloKittyMsgData::PbSaleBooth*>(&::HelloKittyMsgData::PbSaleBooth::default_instance());
}

FlushSaleBooth::FlushSaleBooth(const FlushSaleBooth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushSaleBooth::SharedCtor() {
  _cached_size_ = 0;
  salebooth_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushSaleBooth::~FlushSaleBooth() {
  SharedDtor();
}

void FlushSaleBooth::SharedDtor() {
  if (this != default_instance_) {
    delete salebooth_;
  }
}

void FlushSaleBooth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushSaleBooth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushSaleBooth_descriptor_;
}

const FlushSaleBooth& FlushSaleBooth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

FlushSaleBooth* FlushSaleBooth::default_instance_ = NULL;

FlushSaleBooth* FlushSaleBooth::New() const {
  return new FlushSaleBooth;
}

void FlushSaleBooth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_salebooth()) {
      if (salebooth_ != NULL) salebooth_->::HelloKittyMsgData::PbSaleBooth::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushSaleBooth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salebooth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushSaleBooth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 1;
  if (has_salebooth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->salebooth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushSaleBooth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 1;
  if (has_salebooth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->salebooth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushSaleBooth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 1;
    if (has_salebooth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salebooth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushSaleBooth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushSaleBooth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushSaleBooth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushSaleBooth::MergeFrom(const FlushSaleBooth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_salebooth()) {
      mutable_salebooth()->::HelloKittyMsgData::PbSaleBooth::MergeFrom(from.salebooth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushSaleBooth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushSaleBooth::CopyFrom(const FlushSaleBooth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushSaleBooth::IsInitialized() const {

  if (has_salebooth()) {
    if (!this->salebooth().IsInitialized()) return false;
  }
  return true;
}

void FlushSaleBooth::Swap(FlushSaleBooth* other) {
  if (other != this) {
    std::swap(salebooth_, other->salebooth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushSaleBooth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushSaleBooth_descriptor_;
  metadata.reflection = FlushSaleBooth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlushWareHouse::kStoreItemsFieldNumber;
#endif  // !_MSC_VER

FlushWareHouse::FlushWareHouse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushWareHouse::InitAsDefaultInstance() {
}

FlushWareHouse::FlushWareHouse(const FlushWareHouse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushWareHouse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushWareHouse::~FlushWareHouse() {
  SharedDtor();
}

void FlushWareHouse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlushWareHouse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushWareHouse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushWareHouse_descriptor_;
}

const FlushWareHouse& FlushWareHouse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

FlushWareHouse* FlushWareHouse::default_instance_ = NULL;

FlushWareHouse* FlushWareHouse::New() const {
  return new FlushWareHouse;
}

void FlushWareHouse::Clear() {
  store_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushWareHouse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.PbStoreItem store_items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_store_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushWareHouse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.PbStoreItem store_items = 1;
  for (int i = 0; i < this->store_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->store_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushWareHouse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.PbStoreItem store_items = 1;
  for (int i = 0; i < this->store_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->store_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushWareHouse::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.PbStoreItem store_items = 1;
  total_size += 1 * this->store_items_size();
  for (int i = 0; i < this->store_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushWareHouse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushWareHouse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushWareHouse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushWareHouse::MergeFrom(const FlushWareHouse& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_items_.MergeFrom(from.store_items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushWareHouse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushWareHouse::CopyFrom(const FlushWareHouse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushWareHouse::IsInitialized() const {

  return true;
}

void FlushWareHouse::Swap(FlushWareHouse* other) {
  if (other != this) {
    store_items_.Swap(&other->store_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushWareHouse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushWareHouse_descriptor_;
  metadata.reflection = FlushWareHouse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequireAddItem::kItemFieldNumber;
#endif  // !_MSC_VER

RequireAddItem::RequireAddItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequireAddItem::InitAsDefaultInstance() {
  item_ = const_cast< ::HelloKittyMsgData::PbStoreItem*>(&::HelloKittyMsgData::PbStoreItem::default_instance());
}

RequireAddItem::RequireAddItem(const RequireAddItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequireAddItem::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequireAddItem::~RequireAddItem() {
  SharedDtor();
}

void RequireAddItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void RequireAddItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequireAddItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequireAddItem_descriptor_;
}

const RequireAddItem& RequireAddItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

RequireAddItem* RequireAddItem::default_instance_ = NULL;

RequireAddItem* RequireAddItem::New() const {
  return new RequireAddItem;
}

void RequireAddItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::HelloKittyMsgData::PbStoreItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequireAddItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.PbStoreItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequireAddItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.PbStoreItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequireAddItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.PbStoreItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequireAddItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.PbStoreItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequireAddItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequireAddItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequireAddItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequireAddItem::MergeFrom(const RequireAddItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::HelloKittyMsgData::PbStoreItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequireAddItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequireAddItem::CopyFrom(const RequireAddItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequireAddItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequireAddItem::Swap(RequireAddItem* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequireAddItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequireAddItem_descriptor_;
  metadata.reflection = RequireAddItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddItemReturn::kRetFieldNumber;
#endif  // !_MSC_VER

AddItemReturn::AddItemReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddItemReturn::InitAsDefaultInstance() {
}

AddItemReturn::AddItemReturn(const AddItemReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddItemReturn::SharedCtor() {
  _cached_size_ = 0;
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddItemReturn::~AddItemReturn() {
  SharedDtor();
}

void AddItemReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddItemReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddItemReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddItemReturn_descriptor_;
}

const AddItemReturn& AddItemReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

AddItemReturn* AddItemReturn::default_instance_ = NULL;

AddItemReturn* AddItemReturn::New() const {
  return new AddItemReturn;
}

void AddItemReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddItemReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddItemReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddItemReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddItemReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddItemReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddItemReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddItemReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddItemReturn::MergeFrom(const AddItemReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddItemReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddItemReturn::CopyFrom(const AddItemReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddItemReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddItemReturn::Swap(AddItemReturn* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddItemReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddItemReturn_descriptor_;
  metadata.reflection = AddItemReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequireSallPutItem::kCellIdFieldNumber;
const int RequireSallPutItem::kItemIdFieldNumber;
const int RequireSallPutItem::kItemCountFieldNumber;
const int RequireSallPutItem::kPriceFieldNumber;
#endif  // !_MSC_VER

RequireSallPutItem::RequireSallPutItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequireSallPutItem::InitAsDefaultInstance() {
}

RequireSallPutItem::RequireSallPutItem(const RequireSallPutItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequireSallPutItem::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  itemid_ = 0u;
  itemcount_ = 0u;
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequireSallPutItem::~RequireSallPutItem() {
  SharedDtor();
}

void RequireSallPutItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequireSallPutItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequireSallPutItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequireSallPutItem_descriptor_;
}

const RequireSallPutItem& RequireSallPutItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

RequireSallPutItem* RequireSallPutItem::default_instance_ = NULL;

RequireSallPutItem* RequireSallPutItem::New() const {
  return new RequireSallPutItem;
}

void RequireSallPutItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    itemid_ = 0u;
    itemcount_ = 0u;
    price_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequireSallPutItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemCount;
        break;
      }

      // required uint32 itemCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // required uint32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequireSallPutItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // required uint32 itemCount = 3;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemcount(), output);
  }

  // required uint32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequireSallPutItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // required uint32 itemCount = 3;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemcount(), target);
  }

  // required uint32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequireSallPutItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 itemCount = 3;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

    // required uint32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequireSallPutItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequireSallPutItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequireSallPutItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequireSallPutItem::MergeFrom(const RequireSallPutItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequireSallPutItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequireSallPutItem::CopyFrom(const RequireSallPutItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequireSallPutItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequireSallPutItem::Swap(RequireSallPutItem* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequireSallPutItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequireSallPutItem_descriptor_;
  metadata.reflection = RequireSallPutItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequireSallDownItem::kCellIdFieldNumber;
#endif  // !_MSC_VER

RequireSallDownItem::RequireSallDownItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequireSallDownItem::InitAsDefaultInstance() {
}

RequireSallDownItem::RequireSallDownItem(const RequireSallDownItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequireSallDownItem::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequireSallDownItem::~RequireSallDownItem() {
  SharedDtor();
}

void RequireSallDownItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequireSallDownItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequireSallDownItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequireSallDownItem_descriptor_;
}

const RequireSallDownItem& RequireSallDownItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

RequireSallDownItem* RequireSallDownItem::default_instance_ = NULL;

RequireSallDownItem* RequireSallDownItem::New() const {
  return new RequireSallDownItem;
}

void RequireSallDownItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequireSallDownItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequireSallDownItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequireSallDownItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequireSallDownItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequireSallDownItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequireSallDownItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequireSallDownItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequireSallDownItem::MergeFrom(const RequireSallDownItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequireSallDownItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequireSallDownItem::CopyFrom(const RequireSallDownItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequireSallDownItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequireSallDownItem::Swap(RequireSallDownItem* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequireSallDownItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequireSallDownItem_descriptor_;
  metadata.reflection = RequireSallDownItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaleCellOpItemReturn::kRetFieldNumber;
const int SaleCellOpItemReturn::kReasonFieldNumber;
#endif  // !_MSC_VER

SaleCellOpItemReturn::SaleCellOpItemReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaleCellOpItemReturn::InitAsDefaultInstance() {
}

SaleCellOpItemReturn::SaleCellOpItemReturn(const SaleCellOpItemReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaleCellOpItemReturn::SharedCtor() {
  _cached_size_ = 0;
  ret_ = false;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaleCellOpItemReturn::~SaleCellOpItemReturn() {
  SharedDtor();
}

void SaleCellOpItemReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaleCellOpItemReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaleCellOpItemReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaleCellOpItemReturn_descriptor_;
}

const SaleCellOpItemReturn& SaleCellOpItemReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

SaleCellOpItemReturn* SaleCellOpItemReturn::default_instance_ = NULL;

SaleCellOpItemReturn* SaleCellOpItemReturn::New() const {
  return new SaleCellOpItemReturn;
}

void SaleCellOpItemReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = false;
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaleCellOpItemReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // required .HelloKittyMsgData.SaleOpFailType reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::SaleOpFailType_IsValid(value)) {
            set_reason(static_cast< ::HelloKittyMsgData::SaleOpFailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaleCellOpItemReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  // required .HelloKittyMsgData.SaleOpFailType reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaleCellOpItemReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  // required .HelloKittyMsgData.SaleOpFailType reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaleCellOpItemReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // required .HelloKittyMsgData.SaleOpFailType reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaleCellOpItemReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaleCellOpItemReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaleCellOpItemReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaleCellOpItemReturn::MergeFrom(const SaleCellOpItemReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaleCellOpItemReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaleCellOpItemReturn::CopyFrom(const SaleCellOpItemReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaleCellOpItemReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SaleCellOpItemReturn::Swap(SaleCellOpItemReturn* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaleCellOpItemReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaleCellOpItemReturn_descriptor_;
  metadata.reflection = SaleCellOpItemReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequireOpenCell::kCellIDFieldNumber;
#endif  // !_MSC_VER

RequireOpenCell::RequireOpenCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequireOpenCell::InitAsDefaultInstance() {
}

RequireOpenCell::RequireOpenCell(const RequireOpenCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequireOpenCell::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequireOpenCell::~RequireOpenCell() {
  SharedDtor();
}

void RequireOpenCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequireOpenCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequireOpenCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequireOpenCell_descriptor_;
}

const RequireOpenCell& RequireOpenCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

RequireOpenCell* RequireOpenCell::default_instance_ = NULL;

RequireOpenCell* RequireOpenCell::New() const {
  return new RequireOpenCell;
}

void RequireOpenCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequireOpenCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequireOpenCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellID = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequireOpenCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellID = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequireOpenCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellID = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequireOpenCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequireOpenCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequireOpenCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequireOpenCell::MergeFrom(const RequireOpenCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequireOpenCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequireOpenCell::CopyFrom(const RequireOpenCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequireOpenCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequireOpenCell::Swap(RequireOpenCell* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequireOpenCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequireOpenCell_descriptor_;
  metadata.reflection = RequireOpenCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequirSellPaper::kSceneidFieldNumber;
const int RequirSellPaper::kCharidFieldNumber;
#endif  // !_MSC_VER

RequirSellPaper::RequirSellPaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequirSellPaper::InitAsDefaultInstance() {
}

RequirSellPaper::RequirSellPaper(const RequirSellPaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequirSellPaper::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequirSellPaper::~RequirSellPaper() {
  SharedDtor();
}

void RequirSellPaper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequirSellPaper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequirSellPaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequirSellPaper_descriptor_;
}

const RequirSellPaper& RequirSellPaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

RequirSellPaper* RequirSellPaper::default_instance_ = NULL;

RequirSellPaper* RequirSellPaper::New() const {
  return new RequirSellPaper;
}

void RequirSellPaper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequirSellPaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sceneid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequirSellPaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sceneid = 1 [default = 0];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequirSellPaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sceneid = 1 [default = 0];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequirSellPaper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sceneid = 1 [default = 0];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequirSellPaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequirSellPaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequirSellPaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequirSellPaper::MergeFrom(const RequirSellPaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequirSellPaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequirSellPaper::CopyFrom(const RequirSellPaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequirSellPaper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequirSellPaper::Swap(RequirSellPaper* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequirSellPaper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequirSellPaper_descriptor_;
  metadata.reflection = RequirSellPaper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellPaperCell::kNameFieldNumber;
const int SellPaperCell::kCharidFieldNumber;
const int SellPaperCell::kSalecellFieldNumber;
#endif  // !_MSC_VER

SellPaperCell::SellPaperCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SellPaperCell::InitAsDefaultInstance() {
  salecell_ = const_cast< ::HelloKittyMsgData::PbSaleCell*>(&::HelloKittyMsgData::PbSaleCell::default_instance());
}

SellPaperCell::SellPaperCell(const SellPaperCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SellPaperCell::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = GOOGLE_ULONGLONG(0);
  salecell_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellPaperCell::~SellPaperCell() {
  SharedDtor();
}

void SellPaperCell::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete salecell_;
  }
}

void SellPaperCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellPaperCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellPaperCell_descriptor_;
}

const SellPaperCell& SellPaperCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

SellPaperCell* SellPaperCell::default_instance_ = NULL;

SellPaperCell* SellPaperCell::New() const {
  return new SellPaperCell;
}

void SellPaperCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_salecell()) {
      if (salecell_ != NULL) salecell_->::HelloKittyMsgData::PbSaleCell::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellPaperCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_salecell;
        break;
      }

      // required .HelloKittyMsgData.PbSaleCell salecell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_salecell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salecell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SellPaperCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required .HelloKittyMsgData.PbSaleCell salecell = 3;
  if (has_salecell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->salecell(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SellPaperCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required .HelloKittyMsgData.PbSaleCell salecell = 3;
  if (has_salecell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->salecell(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SellPaperCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required .HelloKittyMsgData.PbSaleCell salecell = 3;
    if (has_salecell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salecell());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellPaperCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellPaperCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellPaperCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellPaperCell::MergeFrom(const SellPaperCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_salecell()) {
      mutable_salecell()->::HelloKittyMsgData::PbSaleCell::MergeFrom(from.salecell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellPaperCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellPaperCell::CopyFrom(const SellPaperCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellPaperCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_salecell()) {
    if (!this->salecell().IsInitialized()) return false;
  }
  return true;
}

void SellPaperCell::Swap(SellPaperCell* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(salecell_, other->salecell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellPaperCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellPaperCell_descriptor_;
  metadata.reflection = SellPaperCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnSellPaper::kCreateTimeFieldNumber;
const int ReturnSellPaper::kPaperCellFieldNumber;
#endif  // !_MSC_VER

ReturnSellPaper::ReturnSellPaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnSellPaper::InitAsDefaultInstance() {
}

ReturnSellPaper::ReturnSellPaper(const ReturnSellPaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnSellPaper::SharedCtor() {
  _cached_size_ = 0;
  createtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnSellPaper::~ReturnSellPaper() {
  SharedDtor();
}

void ReturnSellPaper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnSellPaper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnSellPaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnSellPaper_descriptor_;
}

const ReturnSellPaper& ReturnSellPaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

ReturnSellPaper* ReturnSellPaper::default_instance_ = NULL;

ReturnSellPaper* ReturnSellPaper::New() const {
  return new ReturnSellPaper;
}

void ReturnSellPaper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    createtime_ = 0u;
  }
  papercell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnSellPaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 createTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paperCell;
        break;
      }

      // repeated .HelloKittyMsgData.SellPaperCell paperCell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paperCell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_papercell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paperCell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnSellPaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 createTime = 1;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->createtime(), output);
  }

  // repeated .HelloKittyMsgData.SellPaperCell paperCell = 2;
  for (int i = 0; i < this->papercell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->papercell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnSellPaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 createTime = 1;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->createtime(), target);
  }

  // repeated .HelloKittyMsgData.SellPaperCell paperCell = 2;
  for (int i = 0; i < this->papercell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->papercell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnSellPaper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 createTime = 1;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  // repeated .HelloKittyMsgData.SellPaperCell paperCell = 2;
  total_size += 1 * this->papercell_size();
  for (int i = 0; i < this->papercell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->papercell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnSellPaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnSellPaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnSellPaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnSellPaper::MergeFrom(const ReturnSellPaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  papercell_.MergeFrom(from.papercell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnSellPaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnSellPaper::CopyFrom(const ReturnSellPaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnSellPaper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < papercell_size(); i++) {
    if (!this->papercell(i).IsInitialized()) return false;
  }
  return true;
}

void ReturnSellPaper::Swap(ReturnSellPaper* other) {
  if (other != this) {
    std::swap(createtime_, other->createtime_);
    papercell_.Swap(&other->papercell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnSellPaper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnSellPaper_descriptor_;
  metadata.reflection = ReturnSellPaper_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
