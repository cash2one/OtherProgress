// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialize.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serialize.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* PbCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbCounter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Serialize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Serialize_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSaleCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSaleCell_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CounterResetType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_serialize_2eproto() {
  protobuf_AddDesc_serialize_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serialize.proto");
  GOOGLE_CHECK(file != NULL);
  PbCounter_descriptor_ = file->message_type(0);
  static const int PbCounter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbCounter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbCounter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbCounter, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbCounter, count_),
  };
  PbCounter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbCounter_descriptor_,
      PbCounter::default_instance_,
      PbCounter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbCounter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbCounter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbCounter));
  Serialize_descriptor_ = file->message_type(1);
  static const int Serialize_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, pb_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, store_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, salebooth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, factor_),
  };
  Serialize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Serialize_descriptor_,
      Serialize::default_instance_,
      Serialize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Serialize));
  MsgSaleCell_descriptor_ = file->message_type(2);
  static const int MsgSaleCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaleCell, pb_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaleCell, store_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaleCell, salebooth_),
  };
  MsgSaleCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSaleCell_descriptor_,
      MsgSaleCell::default_instance_,
      MsgSaleCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaleCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaleCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSaleCell));
  CounterResetType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serialize_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbCounter_descriptor_, &PbCounter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Serialize_descriptor_, &Serialize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSaleCell_descriptor_, &MsgSaleCell::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serialize_2eproto() {
  delete PbCounter::default_instance_;
  delete PbCounter_reflection_;
  delete Serialize::default_instance_;
  delete Serialize_reflection_;
  delete MsgSaleCell::default_instance_;
  delete MsgSaleCell_reflection_;
}

void protobuf_AddDesc_serialize_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_item_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_trade_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017serialize.proto\022\021HelloKittyMsgData\032\nit"
    "em.proto\032\013trade.proto\"k\n\tPbCounter\022\n\n\002id"
    "\030\001 \001(\r\0221\n\004type\030\002 \001(\0162#.HelloKittyMsgData"
    ".CounterResetType\022\020\n\010lastTime\030\003 \001(\r\022\r\n\005c"
    "ount\030\004 \001(\r\"\321\001\n\tSerialize\0221\n\013pb_counters\030"
    "\001 \003(\0132\034.HelloKittyMsgData.PbCounter\0223\n\013s"
    "tore_items\030\002 \003(\0132\036.HelloKittyMsgData.PbS"
    "toreItem\0221\n\tsaleBooth\030\003 \001(\0132\036.HelloKitty"
    "MsgData.PbSaleBooth\022)\n\006factor\030\004 \003(\0132\031.He"
    "lloKittyMsgData.Factor\"\250\001\n\013MsgSaleCell\0221"
    "\n\013pb_counters\030\001 \003(\0132\034.HelloKittyMsgData."
    "PbCounter\0223\n\013store_items\030\002 \003(\0132\036.HelloKi"
    "ttyMsgData.PbStoreItem\0221\n\tsaleBooth\030\003 \001("
    "\0132\036.HelloKittyMsgData.PbSaleBooth*c\n\020Cou"
    "nterResetType\022\014\n\010Reset_No\020\000\022\r\n\tReset_Day"
    "\020\001\022\021\n\rReset_SixHour\020\002\022\016\n\nReset_Week\020\003\022\017\n"
    "\013Reset_Month\020\004", 654);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serialize.proto", &protobuf_RegisterTypes);
  PbCounter::default_instance_ = new PbCounter();
  Serialize::default_instance_ = new Serialize();
  MsgSaleCell::default_instance_ = new MsgSaleCell();
  PbCounter::default_instance_->InitAsDefaultInstance();
  Serialize::default_instance_->InitAsDefaultInstance();
  MsgSaleCell::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serialize_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serialize_2eproto {
  StaticDescriptorInitializer_serialize_2eproto() {
    protobuf_AddDesc_serialize_2eproto();
  }
} static_descriptor_initializer_serialize_2eproto_;
const ::google::protobuf::EnumDescriptor* CounterResetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterResetType_descriptor_;
}
bool CounterResetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PbCounter::kIdFieldNumber;
const int PbCounter::kTypeFieldNumber;
const int PbCounter::kLastTimeFieldNumber;
const int PbCounter::kCountFieldNumber;
#endif  // !_MSC_VER

PbCounter::PbCounter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbCounter::InitAsDefaultInstance() {
}

PbCounter::PbCounter(const PbCounter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbCounter::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0;
  lasttime_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbCounter::~PbCounter() {
  SharedDtor();
}

void PbCounter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbCounter_descriptor_;
}

const PbCounter& PbCounter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

PbCounter* PbCounter::default_instance_ = NULL;

PbCounter* PbCounter::New() const {
  return new PbCounter;
}

void PbCounter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0;
    lasttime_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .HelloKittyMsgData.CounterResetType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::CounterResetType_IsValid(value)) {
            set_type(static_cast< ::HelloKittyMsgData::CounterResetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastTime;
        break;
      }

      // optional uint32 lastTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .HelloKittyMsgData.CounterResetType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 lastTime = 3;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lasttime(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbCounter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .HelloKittyMsgData.CounterResetType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 lastTime = 3;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lasttime(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbCounter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .HelloKittyMsgData.CounterResetType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 lastTime = 3;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lasttime());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbCounter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbCounter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbCounter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbCounter::MergeFrom(const PbCounter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbCounter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbCounter::CopyFrom(const PbCounter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbCounter::IsInitialized() const {

  return true;
}

void PbCounter::Swap(PbCounter* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbCounter_descriptor_;
  metadata.reflection = PbCounter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Serialize::kPbCountersFieldNumber;
const int Serialize::kStoreItemsFieldNumber;
const int Serialize::kSaleBoothFieldNumber;
const int Serialize::kFactorFieldNumber;
#endif  // !_MSC_VER

Serialize::Serialize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Serialize::InitAsDefaultInstance() {
  salebooth_ = const_cast< ::HelloKittyMsgData::PbSaleBooth*>(&::HelloKittyMsgData::PbSaleBooth::default_instance());
}

Serialize::Serialize(const Serialize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Serialize::SharedCtor() {
  _cached_size_ = 0;
  salebooth_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Serialize::~Serialize() {
  SharedDtor();
}

void Serialize::SharedDtor() {
  if (this != default_instance_) {
    delete salebooth_;
  }
}

void Serialize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Serialize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Serialize_descriptor_;
}

const Serialize& Serialize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

Serialize* Serialize::default_instance_ = NULL;

Serialize* Serialize::New() const {
  return new Serialize;
}

void Serialize::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_salebooth()) {
      if (salebooth_ != NULL) salebooth_->::HelloKittyMsgData::PbSaleBooth::Clear();
    }
  }
  pb_counters_.Clear();
  store_items_.Clear();
  factor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Serialize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.PbCounter pb_counters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pb_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pb_counters;
        if (input->ExpectTag(18)) goto parse_store_items;
        break;
      }

      // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_items;
        if (input->ExpectTag(26)) goto parse_saleBooth;
        break;
      }

      // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saleBooth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salebooth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_factor;
        break;
      }

      // repeated .HelloKittyMsgData.Factor factor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_factor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_factor;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Serialize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.PbCounter pb_counters = 1;
  for (int i = 0; i < this->pb_counters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_counters(i), output);
  }

  // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
  for (int i = 0; i < this->store_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->store_items(i), output);
  }

  // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
  if (has_salebooth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->salebooth(), output);
  }

  // repeated .HelloKittyMsgData.Factor factor = 4;
  for (int i = 0; i < this->factor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->factor(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Serialize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.PbCounter pb_counters = 1;
  for (int i = 0; i < this->pb_counters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pb_counters(i), target);
  }

  // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
  for (int i = 0; i < this->store_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->store_items(i), target);
  }

  // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
  if (has_salebooth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->salebooth(), target);
  }

  // repeated .HelloKittyMsgData.Factor factor = 4;
  for (int i = 0; i < this->factor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->factor(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Serialize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
    if (has_salebooth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salebooth());
    }

  }
  // repeated .HelloKittyMsgData.PbCounter pb_counters = 1;
  total_size += 1 * this->pb_counters_size();
  for (int i = 0; i < this->pb_counters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pb_counters(i));
  }

  // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
  total_size += 1 * this->store_items_size();
  for (int i = 0; i < this->store_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store_items(i));
  }

  // repeated .HelloKittyMsgData.Factor factor = 4;
  total_size += 1 * this->factor_size();
  for (int i = 0; i < this->factor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->factor(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Serialize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Serialize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Serialize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Serialize::MergeFrom(const Serialize& from) {
  GOOGLE_CHECK_NE(&from, this);
  pb_counters_.MergeFrom(from.pb_counters_);
  store_items_.MergeFrom(from.store_items_);
  factor_.MergeFrom(from.factor_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_salebooth()) {
      mutable_salebooth()->::HelloKittyMsgData::PbSaleBooth::MergeFrom(from.salebooth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Serialize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Serialize::CopyFrom(const Serialize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Serialize::IsInitialized() const {

  if (has_salebooth()) {
    if (!this->salebooth().IsInitialized()) return false;
  }
  for (int i = 0; i < factor_size(); i++) {
    if (!this->factor(i).IsInitialized()) return false;
  }
  return true;
}

void Serialize::Swap(Serialize* other) {
  if (other != this) {
    pb_counters_.Swap(&other->pb_counters_);
    store_items_.Swap(&other->store_items_);
    std::swap(salebooth_, other->salebooth_);
    factor_.Swap(&other->factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Serialize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Serialize_descriptor_;
  metadata.reflection = Serialize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSaleCell::kPbCountersFieldNumber;
const int MsgSaleCell::kStoreItemsFieldNumber;
const int MsgSaleCell::kSaleBoothFieldNumber;
#endif  // !_MSC_VER

MsgSaleCell::MsgSaleCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSaleCell::InitAsDefaultInstance() {
  salebooth_ = const_cast< ::HelloKittyMsgData::PbSaleBooth*>(&::HelloKittyMsgData::PbSaleBooth::default_instance());
}

MsgSaleCell::MsgSaleCell(const MsgSaleCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSaleCell::SharedCtor() {
  _cached_size_ = 0;
  salebooth_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSaleCell::~MsgSaleCell() {
  SharedDtor();
}

void MsgSaleCell::SharedDtor() {
  if (this != default_instance_) {
    delete salebooth_;
  }
}

void MsgSaleCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSaleCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSaleCell_descriptor_;
}

const MsgSaleCell& MsgSaleCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

MsgSaleCell* MsgSaleCell::default_instance_ = NULL;

MsgSaleCell* MsgSaleCell::New() const {
  return new MsgSaleCell;
}

void MsgSaleCell::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_salebooth()) {
      if (salebooth_ != NULL) salebooth_->::HelloKittyMsgData::PbSaleBooth::Clear();
    }
  }
  pb_counters_.Clear();
  store_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSaleCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.PbCounter pb_counters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pb_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pb_counters;
        if (input->ExpectTag(18)) goto parse_store_items;
        break;
      }

      // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_items;
        if (input->ExpectTag(26)) goto parse_saleBooth;
        break;
      }

      // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saleBooth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salebooth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSaleCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.PbCounter pb_counters = 1;
  for (int i = 0; i < this->pb_counters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_counters(i), output);
  }

  // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
  for (int i = 0; i < this->store_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->store_items(i), output);
  }

  // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
  if (has_salebooth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->salebooth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSaleCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.PbCounter pb_counters = 1;
  for (int i = 0; i < this->pb_counters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pb_counters(i), target);
  }

  // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
  for (int i = 0; i < this->store_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->store_items(i), target);
  }

  // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
  if (has_salebooth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->salebooth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSaleCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
    if (has_salebooth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salebooth());
    }

  }
  // repeated .HelloKittyMsgData.PbCounter pb_counters = 1;
  total_size += 1 * this->pb_counters_size();
  for (int i = 0; i < this->pb_counters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pb_counters(i));
  }

  // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
  total_size += 1 * this->store_items_size();
  for (int i = 0; i < this->store_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSaleCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSaleCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSaleCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSaleCell::MergeFrom(const MsgSaleCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  pb_counters_.MergeFrom(from.pb_counters_);
  store_items_.MergeFrom(from.store_items_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_salebooth()) {
      mutable_salebooth()->::HelloKittyMsgData::PbSaleBooth::MergeFrom(from.salebooth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSaleCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSaleCell::CopyFrom(const MsgSaleCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSaleCell::IsInitialized() const {

  if (has_salebooth()) {
    if (!this->salebooth().IsInitialized()) return false;
  }
  return true;
}

void MsgSaleCell::Swap(MsgSaleCell* other) {
  if (other != this) {
    pb_counters_.Swap(&other->pb_counters_);
    store_items_.Swap(&other->store_items_);
    std::swap(salebooth_, other->salebooth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSaleCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSaleCell_descriptor_;
  metadata.reflection = MsgSaleCell_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
