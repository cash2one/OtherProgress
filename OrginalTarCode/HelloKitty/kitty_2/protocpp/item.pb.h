// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#ifndef PROTOBUF_item_2eproto__INCLUDED
#define PROTOBUF_item_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_item_2eproto();
void protobuf_AssignDesc_item_2eproto();
void protobuf_ShutdownFile_item_2eproto();

class UseItem;
class UseItemReturn;
class Point;
class FactorProductItem;
class FactorTypeItem;
class Factor;
class Flush;

enum UseItemFailType {
  Fail_Item_Illeay = 0,
  Fail_Item_Not_Enough = 1,
  Fail_Item_Level_Limited = 2,
  Fail_Item_Premise_Limited = 3
};
bool UseItemFailType_IsValid(int value);
const UseItemFailType UseItemFailType_MIN = Fail_Item_Illeay;
const UseItemFailType UseItemFailType_MAX = Fail_Item_Premise_Limited;
const int UseItemFailType_ARRAYSIZE = UseItemFailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UseItemFailType_descriptor();
inline const ::std::string& UseItemFailType_Name(UseItemFailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UseItemFailType_descriptor(), value);
}
inline bool UseItemFailType_Parse(
    const ::std::string& name, UseItemFailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UseItemFailType>(
    UseItemFailType_descriptor(), name, value);
}
// ===================================================================

class UseItem : public ::google::protobuf::Message {
 public:
  UseItem();
  virtual ~UseItem();

  UseItem(const UseItem& from);

  inline UseItem& operator=(const UseItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseItem& default_instance();

  void Swap(UseItem* other);

  // implements Message ----------------------------------------------

  UseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseItem& from);
  void MergeFrom(const UseItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.UseItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static UseItem* default_instance_;
};
// -------------------------------------------------------------------

class UseItemReturn : public ::google::protobuf::Message {
 public:
  UseItemReturn();
  virtual ~UseItemReturn();

  UseItemReturn(const UseItemReturn& from);

  inline UseItemReturn& operator=(const UseItemReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseItemReturn& default_instance();

  void Swap(UseItemReturn* other);

  // implements Message ----------------------------------------------

  UseItemReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseItemReturn& from);
  void MergeFrom(const UseItemReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline bool ret() const;
  inline void set_ret(bool value);

  // required .HelloKittyMsgData.UseItemFailType reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::HelloKittyMsgData::UseItemFailType reason() const;
  inline void set_reason(::HelloKittyMsgData::UseItemFailType value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.UseItemReturn)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ret_;
  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static UseItemReturn* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class FactorProductItem : public ::google::protobuf::Message {
 public:
  FactorProductItem();
  virtual ~FactorProductItem();

  FactorProductItem(const FactorProductItem& from);

  inline FactorProductItem& operator=(const FactorProductItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactorProductItem& default_instance();

  void Swap(FactorProductItem* other);

  // implements Message ----------------------------------------------

  FactorProductItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactorProductItem& from);
  void MergeFrom(const FactorProductItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool stop = 1;
  inline bool has_stop() const;
  inline void clear_stop();
  static const int kStopFieldNumber = 1;
  inline bool stop() const;
  inline void set_stop(bool value);

  // required uint32 itemID = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // required uint32 beginTime = 4;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 begintime() const;
  inline void set_begintime(::google::protobuf::uint32 value);

  // required uint32 endTime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // required uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.FactorProductItem)
 private:
  inline void set_has_stop();
  inline void clear_has_stop();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool stop_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 begintime_;
  ::google::protobuf::uint32 endtime_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static FactorProductItem* default_instance_;
};
// -------------------------------------------------------------------

class FactorTypeItem : public ::google::protobuf::Message {
 public:
  FactorTypeItem();
  virtual ~FactorTypeItem();

  FactorTypeItem(const FactorTypeItem& from);

  inline FactorTypeItem& operator=(const FactorTypeItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactorTypeItem& default_instance();

  void Swap(FactorTypeItem* other);

  // implements Message ----------------------------------------------

  FactorTypeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactorTypeItem& from);
  void MergeFrom(const FactorTypeItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required bool active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline bool active() const;
  inline void set_active(bool value);

  // required bool stop = 3;
  inline bool has_stop() const;
  inline void clear_stop();
  static const int kStopFieldNumber = 3;
  inline bool stop() const;
  inline void set_stop(bool value);

  // repeated .HelloKittyMsgData.FactorProductItem produceItem = 4;
  inline int produceitem_size() const;
  inline void clear_produceitem();
  static const int kProduceItemFieldNumber = 4;
  inline const ::HelloKittyMsgData::FactorProductItem& produceitem(int index) const;
  inline ::HelloKittyMsgData::FactorProductItem* mutable_produceitem(int index);
  inline ::HelloKittyMsgData::FactorProductItem* add_produceitem();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorProductItem >&
      produceitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorProductItem >*
      mutable_produceitem();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.FactorTypeItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_stop();
  inline void clear_has_stop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  bool active_;
  bool stop_;
  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorProductItem > produceitem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static FactorTypeItem* default_instance_;
};
// -------------------------------------------------------------------

class Factor : public ::google::protobuf::Message {
 public:
  Factor();
  virtual ~Factor();

  Factor(const Factor& from);

  inline Factor& operator=(const Factor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Factor& default_instance();

  void Swap(Factor* other);

  // implements Message ----------------------------------------------

  Factor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Factor& from);
  void MergeFrom(const Factor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required bool active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline bool active() const;
  inline void set_active(bool value);

  // required bool stop = 3;
  inline bool has_stop() const;
  inline void clear_stop();
  static const int kStopFieldNumber = 3;
  inline bool stop() const;
  inline void set_stop(bool value);

  // required .HelloKittyMsgData.Point point = 4;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 4;
  inline const ::HelloKittyMsgData::Point& point() const;
  inline ::HelloKittyMsgData::Point* mutable_point();
  inline ::HelloKittyMsgData::Point* release_point();
  inline void set_allocated_point(::HelloKittyMsgData::Point* point);

  // repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
  inline int factoritem_size() const;
  inline void clear_factoritem();
  static const int kFactorItemFieldNumber = 5;
  inline const ::HelloKittyMsgData::FactorTypeItem& factoritem(int index) const;
  inline ::HelloKittyMsgData::FactorTypeItem* mutable_factoritem(int index);
  inline ::HelloKittyMsgData::FactorTypeItem* add_factoritem();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorTypeItem >&
      factoritem() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorTypeItem >*
      mutable_factoritem();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.Factor)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_stop();
  inline void clear_has_stop();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  bool active_;
  bool stop_;
  ::HelloKittyMsgData::Point* point_;
  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorTypeItem > factoritem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static Factor* default_instance_;
};
// -------------------------------------------------------------------

class Flush : public ::google::protobuf::Message {
 public:
  Flush();
  virtual ~Flush();

  Flush(const Flush& from);

  inline Flush& operator=(const Flush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Flush& default_instance();

  void Swap(Flush* other);

  // implements Message ----------------------------------------------

  Flush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Flush& from);
  void MergeFrom(const Flush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.FactorTypeItem itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline const ::HelloKittyMsgData::FactorTypeItem& itemid() const;
  inline ::HelloKittyMsgData::FactorTypeItem* mutable_itemid();
  inline ::HelloKittyMsgData::FactorTypeItem* release_itemid();
  inline void set_allocated_itemid(::HelloKittyMsgData::FactorTypeItem* itemid);

  // required bool active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline bool active() const;
  inline void set_active(bool value);

  // required bool stop = 3;
  inline bool has_stop() const;
  inline void clear_stop();
  static const int kStopFieldNumber = 3;
  inline bool stop() const;
  inline void set_stop(bool value);

  // required .HelloKittyMsgData.Point point = 4;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 4;
  inline const ::HelloKittyMsgData::Point& point() const;
  inline ::HelloKittyMsgData::Point* mutable_point();
  inline ::HelloKittyMsgData::Point* release_point();
  inline void set_allocated_point(::HelloKittyMsgData::Point* point);

  // repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
  inline int factoritem_size() const;
  inline void clear_factoritem();
  static const int kFactorItemFieldNumber = 5;
  inline const ::HelloKittyMsgData::FactorTypeItem& factoritem(int index) const;
  inline ::HelloKittyMsgData::FactorTypeItem* mutable_factoritem(int index);
  inline ::HelloKittyMsgData::FactorTypeItem* add_factoritem();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorTypeItem >&
      factoritem() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorTypeItem >*
      mutable_factoritem();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.Flush)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_stop();
  inline void clear_has_stop();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::FactorTypeItem* itemid_;
  ::HelloKittyMsgData::Point* point_;
  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorTypeItem > factoritem_;
  bool active_;
  bool stop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static Flush* default_instance_;
};
// ===================================================================


// ===================================================================

// UseItem

// required uint32 itemID = 1;
inline bool UseItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 UseItem::itemid() const {
  return itemid_;
}
inline void UseItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required uint32 num = 2;
inline bool UseItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 UseItem::num() const {
  return num_;
}
inline void UseItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// UseItemReturn

// required bool ret = 1;
inline bool UseItemReturn::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseItemReturn::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseItemReturn::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseItemReturn::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool UseItemReturn::ret() const {
  return ret_;
}
inline void UseItemReturn::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
}

// required .HelloKittyMsgData.UseItemFailType reason = 2;
inline bool UseItemReturn::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseItemReturn::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseItemReturn::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseItemReturn::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::HelloKittyMsgData::UseItemFailType UseItemReturn::reason() const {
  return static_cast< ::HelloKittyMsgData::UseItemFailType >(reason_);
}
inline void UseItemReturn::set_reason(::HelloKittyMsgData::UseItemFailType value) {
  assert(::HelloKittyMsgData::UseItemFailType_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// Point

// required uint32 x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 Point::x() const {
  return x_;
}
inline void Point::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 Point::y() const {
  return y_;
}
inline void Point::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// FactorProductItem

// required bool stop = 1;
inline bool FactorProductItem::has_stop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactorProductItem::set_has_stop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactorProductItem::clear_has_stop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactorProductItem::clear_stop() {
  stop_ = false;
  clear_has_stop();
}
inline bool FactorProductItem::stop() const {
  return stop_;
}
inline void FactorProductItem::set_stop(bool value) {
  set_has_stop();
  stop_ = value;
}

// required uint32 itemID = 2;
inline bool FactorProductItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactorProductItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactorProductItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactorProductItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 FactorProductItem::itemid() const {
  return itemid_;
}
inline void FactorProductItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required uint32 num = 3;
inline bool FactorProductItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactorProductItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactorProductItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactorProductItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 FactorProductItem::num() const {
  return num_;
}
inline void FactorProductItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// required uint32 beginTime = 4;
inline bool FactorProductItem::has_begintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactorProductItem::set_has_begintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactorProductItem::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactorProductItem::clear_begintime() {
  begintime_ = 0u;
  clear_has_begintime();
}
inline ::google::protobuf::uint32 FactorProductItem::begintime() const {
  return begintime_;
}
inline void FactorProductItem::set_begintime(::google::protobuf::uint32 value) {
  set_has_begintime();
  begintime_ = value;
}

// required uint32 endTime = 5;
inline bool FactorProductItem::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactorProductItem::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactorProductItem::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactorProductItem::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 FactorProductItem::endtime() const {
  return endtime_;
}
inline void FactorProductItem::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// required uint32 time = 6;
inline bool FactorProductItem::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactorProductItem::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactorProductItem::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactorProductItem::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 FactorProductItem::time() const {
  return time_;
}
inline void FactorProductItem::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// FactorTypeItem

// required uint32 itemID = 1;
inline bool FactorTypeItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactorTypeItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactorTypeItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactorTypeItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 FactorTypeItem::itemid() const {
  return itemid_;
}
inline void FactorTypeItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required bool active = 2;
inline bool FactorTypeItem::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactorTypeItem::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactorTypeItem::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactorTypeItem::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool FactorTypeItem::active() const {
  return active_;
}
inline void FactorTypeItem::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// required bool stop = 3;
inline bool FactorTypeItem::has_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactorTypeItem::set_has_stop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactorTypeItem::clear_has_stop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactorTypeItem::clear_stop() {
  stop_ = false;
  clear_has_stop();
}
inline bool FactorTypeItem::stop() const {
  return stop_;
}
inline void FactorTypeItem::set_stop(bool value) {
  set_has_stop();
  stop_ = value;
}

// repeated .HelloKittyMsgData.FactorProductItem produceItem = 4;
inline int FactorTypeItem::produceitem_size() const {
  return produceitem_.size();
}
inline void FactorTypeItem::clear_produceitem() {
  produceitem_.Clear();
}
inline const ::HelloKittyMsgData::FactorProductItem& FactorTypeItem::produceitem(int index) const {
  return produceitem_.Get(index);
}
inline ::HelloKittyMsgData::FactorProductItem* FactorTypeItem::mutable_produceitem(int index) {
  return produceitem_.Mutable(index);
}
inline ::HelloKittyMsgData::FactorProductItem* FactorTypeItem::add_produceitem() {
  return produceitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorProductItem >&
FactorTypeItem::produceitem() const {
  return produceitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorProductItem >*
FactorTypeItem::mutable_produceitem() {
  return &produceitem_;
}

// -------------------------------------------------------------------

// Factor

// required uint32 itemID = 1;
inline bool Factor::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Factor::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Factor::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Factor::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 Factor::itemid() const {
  return itemid_;
}
inline void Factor::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required bool active = 2;
inline bool Factor::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Factor::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Factor::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Factor::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool Factor::active() const {
  return active_;
}
inline void Factor::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// required bool stop = 3;
inline bool Factor::has_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Factor::set_has_stop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Factor::clear_has_stop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Factor::clear_stop() {
  stop_ = false;
  clear_has_stop();
}
inline bool Factor::stop() const {
  return stop_;
}
inline void Factor::set_stop(bool value) {
  set_has_stop();
  stop_ = value;
}

// required .HelloKittyMsgData.Point point = 4;
inline bool Factor::has_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Factor::set_has_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Factor::clear_has_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Factor::clear_point() {
  if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
  clear_has_point();
}
inline const ::HelloKittyMsgData::Point& Factor::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::HelloKittyMsgData::Point* Factor::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::HelloKittyMsgData::Point;
  return point_;
}
inline ::HelloKittyMsgData::Point* Factor::release_point() {
  clear_has_point();
  ::HelloKittyMsgData::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline void Factor::set_allocated_point(::HelloKittyMsgData::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
}

// repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
inline int Factor::factoritem_size() const {
  return factoritem_.size();
}
inline void Factor::clear_factoritem() {
  factoritem_.Clear();
}
inline const ::HelloKittyMsgData::FactorTypeItem& Factor::factoritem(int index) const {
  return factoritem_.Get(index);
}
inline ::HelloKittyMsgData::FactorTypeItem* Factor::mutable_factoritem(int index) {
  return factoritem_.Mutable(index);
}
inline ::HelloKittyMsgData::FactorTypeItem* Factor::add_factoritem() {
  return factoritem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorTypeItem >&
Factor::factoritem() const {
  return factoritem_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorTypeItem >*
Factor::mutable_factoritem() {
  return &factoritem_;
}

// -------------------------------------------------------------------

// Flush

// required .HelloKittyMsgData.FactorTypeItem itemID = 1;
inline bool Flush::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Flush::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Flush::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Flush::clear_itemid() {
  if (itemid_ != NULL) itemid_->::HelloKittyMsgData::FactorTypeItem::Clear();
  clear_has_itemid();
}
inline const ::HelloKittyMsgData::FactorTypeItem& Flush::itemid() const {
  return itemid_ != NULL ? *itemid_ : *default_instance_->itemid_;
}
inline ::HelloKittyMsgData::FactorTypeItem* Flush::mutable_itemid() {
  set_has_itemid();
  if (itemid_ == NULL) itemid_ = new ::HelloKittyMsgData::FactorTypeItem;
  return itemid_;
}
inline ::HelloKittyMsgData::FactorTypeItem* Flush::release_itemid() {
  clear_has_itemid();
  ::HelloKittyMsgData::FactorTypeItem* temp = itemid_;
  itemid_ = NULL;
  return temp;
}
inline void Flush::set_allocated_itemid(::HelloKittyMsgData::FactorTypeItem* itemid) {
  delete itemid_;
  itemid_ = itemid;
  if (itemid) {
    set_has_itemid();
  } else {
    clear_has_itemid();
  }
}

// required bool active = 2;
inline bool Flush::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Flush::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Flush::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Flush::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool Flush::active() const {
  return active_;
}
inline void Flush::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// required bool stop = 3;
inline bool Flush::has_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Flush::set_has_stop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Flush::clear_has_stop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Flush::clear_stop() {
  stop_ = false;
  clear_has_stop();
}
inline bool Flush::stop() const {
  return stop_;
}
inline void Flush::set_stop(bool value) {
  set_has_stop();
  stop_ = value;
}

// required .HelloKittyMsgData.Point point = 4;
inline bool Flush::has_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Flush::set_has_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Flush::clear_has_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Flush::clear_point() {
  if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
  clear_has_point();
}
inline const ::HelloKittyMsgData::Point& Flush::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::HelloKittyMsgData::Point* Flush::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::HelloKittyMsgData::Point;
  return point_;
}
inline ::HelloKittyMsgData::Point* Flush::release_point() {
  clear_has_point();
  ::HelloKittyMsgData::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline void Flush::set_allocated_point(::HelloKittyMsgData::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
}

// repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
inline int Flush::factoritem_size() const {
  return factoritem_.size();
}
inline void Flush::clear_factoritem() {
  factoritem_.Clear();
}
inline const ::HelloKittyMsgData::FactorTypeItem& Flush::factoritem(int index) const {
  return factoritem_.Get(index);
}
inline ::HelloKittyMsgData::FactorTypeItem* Flush::mutable_factoritem(int index) {
  return factoritem_.Mutable(index);
}
inline ::HelloKittyMsgData::FactorTypeItem* Flush::add_factoritem() {
  return factoritem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorTypeItem >&
Flush::factoritem() const {
  return factoritem_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::FactorTypeItem >*
Flush::mutable_factoritem() {
  return &factoritem_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::UseItemFailType>() {
  return ::HelloKittyMsgData::UseItemFailType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_item_2eproto__INCLUDED
