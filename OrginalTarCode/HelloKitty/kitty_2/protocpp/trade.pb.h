// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#ifndef PROTOBUF_trade_2eproto__INCLUDED
#define PROTOBUF_trade_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_trade_2eproto();
void protobuf_AssignDesc_trade_2eproto();
void protobuf_ShutdownFile_trade_2eproto();

class PbStoreItem;
class PbSaleCell;
class PbSaleCeilFlushZone;
class PbSaleCeilFlush;
class PbSaleBooth;
class RequireStoreItem;
class FlushSaleBooth;
class FlushWareHouse;
class RequireAddItem;
class AddItemReturn;
class RequireSallPutItem;
class RequireSallDownItem;
class SaleCellOpItemReturn;
class RequireOpenCell;
class RequirSellPaper;
class SellPaperCell;
class ReturnSellPaper;

enum SaleCellStatusType {
  Sale_Status_Empty = 0,
  Sale_Status_For_Sale = 1,
  Sale_Status_Sale_End = 2,
  Sale_Status_Close = 3
};
bool SaleCellStatusType_IsValid(int value);
const SaleCellStatusType SaleCellStatusType_MIN = Sale_Status_Empty;
const SaleCellStatusType SaleCellStatusType_MAX = Sale_Status_Close;
const int SaleCellStatusType_ARRAYSIZE = SaleCellStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SaleCellStatusType_descriptor();
inline const ::std::string& SaleCellStatusType_Name(SaleCellStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SaleCellStatusType_descriptor(), value);
}
inline bool SaleCellStatusType_Parse(
    const ::std::string& name, SaleCellStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SaleCellStatusType>(
    SaleCellStatusType_descriptor(), name, value);
}
enum StoreItemType {
  Store_Type_Ware_House = 0,
  Store_Type_Package = 1,
  Store_Type_Sale = 2
};
bool StoreItemType_IsValid(int value);
const StoreItemType StoreItemType_MIN = Store_Type_Ware_House;
const StoreItemType StoreItemType_MAX = Store_Type_Sale;
const int StoreItemType_ARRAYSIZE = StoreItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StoreItemType_descriptor();
inline const ::std::string& StoreItemType_Name(StoreItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StoreItemType_descriptor(), value);
}
inline bool StoreItemType_Parse(
    const ::std::string& name, StoreItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StoreItemType>(
    StoreItemType_descriptor(), name, value);
}
enum SaleOpFailType {
  Sale_Op_Close = 0,
  Sale_Op_Not_Empty = 1,
  Sale_Op_Item_Not_Enough = 2,
  Sale_Op_Empty = 3,
  Sale_Op_Full = 4,
  Sale_Op_Money = 5,
  Sale_Op_Open = 6
};
bool SaleOpFailType_IsValid(int value);
const SaleOpFailType SaleOpFailType_MIN = Sale_Op_Close;
const SaleOpFailType SaleOpFailType_MAX = Sale_Op_Open;
const int SaleOpFailType_ARRAYSIZE = SaleOpFailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SaleOpFailType_descriptor();
inline const ::std::string& SaleOpFailType_Name(SaleOpFailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SaleOpFailType_descriptor(), value);
}
inline bool SaleOpFailType_Parse(
    const ::std::string& name, SaleOpFailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SaleOpFailType>(
    SaleOpFailType_descriptor(), name, value);
}
// ===================================================================

class PbStoreItem : public ::google::protobuf::Message {
 public:
  PbStoreItem();
  virtual ~PbStoreItem();

  PbStoreItem(const PbStoreItem& from);

  inline PbStoreItem& operator=(const PbStoreItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbStoreItem& default_instance();

  void Swap(PbStoreItem* other);

  // implements Message ----------------------------------------------

  PbStoreItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbStoreItem& from);
  void MergeFrom(const PbStoreItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 itemCount = 2;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::uint32 itemcount() const;
  inline void set_itemcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.PbStoreItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static PbStoreItem* default_instance_;
};
// -------------------------------------------------------------------

class PbSaleCell : public ::google::protobuf::Message {
 public:
  PbSaleCell();
  virtual ~PbSaleCell();

  PbSaleCell(const PbSaleCell& from);

  inline PbSaleCell& operator=(const PbSaleCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbSaleCell& default_instance();

  void Swap(PbSaleCell* other);

  // implements Message ----------------------------------------------

  PbSaleCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbSaleCell& from);
  void MergeFrom(const PbSaleCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cellId = 1;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cellid() const;
  inline void set_cellid(::google::protobuf::uint32 value);

  // required uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required uint32 itemCount = 3;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 3;
  inline ::google::protobuf::uint32 itemcount() const;
  inline void set_itemcount(::google::protobuf::uint32 value);

  // required uint32 price = 4;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // required .HelloKittyMsgData.SaleCellStatusType status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::HelloKittyMsgData::SaleCellStatusType status() const;
  inline void set_status(::HelloKittyMsgData::SaleCellStatusType value);

  // required string nickName = 6;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 6;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.PbSaleCell)
 private:
  inline void set_has_cellid();
  inline void clear_has_cellid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cellid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemcount_;
  ::google::protobuf::uint32 price_;
  ::std::string* nickname_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static PbSaleCell* default_instance_;
};
// -------------------------------------------------------------------

class PbSaleCeilFlushZone : public ::google::protobuf::Message {
 public:
  PbSaleCeilFlushZone();
  virtual ~PbSaleCeilFlushZone();

  PbSaleCeilFlushZone(const PbSaleCeilFlushZone& from);

  inline PbSaleCeilFlushZone& operator=(const PbSaleCeilFlushZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbSaleCeilFlushZone& default_instance();

  void Swap(PbSaleCeilFlushZone* other);

  // implements Message ----------------------------------------------

  PbSaleCeilFlushZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbSaleCeilFlushZone& from);
  void MergeFrom(const PbSaleCeilFlushZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required uint32 sceneid = 2;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 2;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // required .HelloKittyMsgData.PbSaleCell saleCell = 3;
  inline bool has_salecell() const;
  inline void clear_salecell();
  static const int kSaleCellFieldNumber = 3;
  inline const ::HelloKittyMsgData::PbSaleCell& salecell() const;
  inline ::HelloKittyMsgData::PbSaleCell* mutable_salecell();
  inline ::HelloKittyMsgData::PbSaleCell* release_salecell();
  inline void set_allocated_salecell(::HelloKittyMsgData::PbSaleCell* salecell);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.PbSaleCeilFlushZone)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_salecell();
  inline void clear_has_salecell();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::HelloKittyMsgData::PbSaleCell* salecell_;
  ::google::protobuf::uint32 sceneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static PbSaleCeilFlushZone* default_instance_;
};
// -------------------------------------------------------------------

class PbSaleCeilFlush : public ::google::protobuf::Message {
 public:
  PbSaleCeilFlush();
  virtual ~PbSaleCeilFlush();

  PbSaleCeilFlush(const PbSaleCeilFlush& from);

  inline PbSaleCeilFlush& operator=(const PbSaleCeilFlush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbSaleCeilFlush& default_instance();

  void Swap(PbSaleCeilFlush* other);

  // implements Message ----------------------------------------------

  PbSaleCeilFlush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbSaleCeilFlush& from);
  void MergeFrom(const PbSaleCeilFlush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.PbSaleCell saleCell = 1;
  inline bool has_salecell() const;
  inline void clear_salecell();
  static const int kSaleCellFieldNumber = 1;
  inline const ::HelloKittyMsgData::PbSaleCell& salecell() const;
  inline ::HelloKittyMsgData::PbSaleCell* mutable_salecell();
  inline ::HelloKittyMsgData::PbSaleCell* release_salecell();
  inline void set_allocated_salecell(::HelloKittyMsgData::PbSaleCell* salecell);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.PbSaleCeilFlush)
 private:
  inline void set_has_salecell();
  inline void clear_has_salecell();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::PbSaleCell* salecell_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static PbSaleCeilFlush* default_instance_;
};
// -------------------------------------------------------------------

class PbSaleBooth : public ::google::protobuf::Message {
 public:
  PbSaleBooth();
  virtual ~PbSaleBooth();

  PbSaleBooth(const PbSaleBooth& from);

  inline PbSaleBooth& operator=(const PbSaleBooth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbSaleBooth& default_instance();

  void Swap(PbSaleBooth* other);

  // implements Message ----------------------------------------------

  PbSaleBooth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbSaleBooth& from);
  void MergeFrom(const PbSaleBooth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zoneCellID = 1 [default = 10000];
  inline bool has_zonecellid() const;
  inline void clear_zonecellid();
  static const int kZoneCellIDFieldNumber = 1;
  inline ::google::protobuf::uint32 zonecellid() const;
  inline void set_zonecellid(::google::protobuf::uint32 value);

  // repeated .HelloKittyMsgData.PbSaleCell saleCell = 2;
  inline int salecell_size() const;
  inline void clear_salecell();
  static const int kSaleCellFieldNumber = 2;
  inline const ::HelloKittyMsgData::PbSaleCell& salecell(int index) const;
  inline ::HelloKittyMsgData::PbSaleCell* mutable_salecell(int index);
  inline ::HelloKittyMsgData::PbSaleCell* add_salecell();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbSaleCell >&
      salecell() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbSaleCell >*
      mutable_salecell();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.PbSaleBooth)
 private:
  inline void set_has_zonecellid();
  inline void clear_has_zonecellid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbSaleCell > salecell_;
  ::google::protobuf::uint32 zonecellid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static PbSaleBooth* default_instance_;
};
// -------------------------------------------------------------------

class RequireStoreItem : public ::google::protobuf::Message {
 public:
  RequireStoreItem();
  virtual ~RequireStoreItem();

  RequireStoreItem(const RequireStoreItem& from);

  inline RequireStoreItem& operator=(const RequireStoreItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequireStoreItem& default_instance();

  void Swap(RequireStoreItem* other);

  // implements Message ----------------------------------------------

  RequireStoreItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequireStoreItem& from);
  void MergeFrom(const RequireStoreItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.StoreItemType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::HelloKittyMsgData::StoreItemType type() const;
  inline void set_type(::HelloKittyMsgData::StoreItemType value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.RequireStoreItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static RequireStoreItem* default_instance_;
};
// -------------------------------------------------------------------

class FlushSaleBooth : public ::google::protobuf::Message {
 public:
  FlushSaleBooth();
  virtual ~FlushSaleBooth();

  FlushSaleBooth(const FlushSaleBooth& from);

  inline FlushSaleBooth& operator=(const FlushSaleBooth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushSaleBooth& default_instance();

  void Swap(FlushSaleBooth* other);

  // implements Message ----------------------------------------------

  FlushSaleBooth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushSaleBooth& from);
  void MergeFrom(const FlushSaleBooth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 1;
  inline bool has_salebooth() const;
  inline void clear_salebooth();
  static const int kSaleBoothFieldNumber = 1;
  inline const ::HelloKittyMsgData::PbSaleBooth& salebooth() const;
  inline ::HelloKittyMsgData::PbSaleBooth* mutable_salebooth();
  inline ::HelloKittyMsgData::PbSaleBooth* release_salebooth();
  inline void set_allocated_salebooth(::HelloKittyMsgData::PbSaleBooth* salebooth);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.FlushSaleBooth)
 private:
  inline void set_has_salebooth();
  inline void clear_has_salebooth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::PbSaleBooth* salebooth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static FlushSaleBooth* default_instance_;
};
// -------------------------------------------------------------------

class FlushWareHouse : public ::google::protobuf::Message {
 public:
  FlushWareHouse();
  virtual ~FlushWareHouse();

  FlushWareHouse(const FlushWareHouse& from);

  inline FlushWareHouse& operator=(const FlushWareHouse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushWareHouse& default_instance();

  void Swap(FlushWareHouse* other);

  // implements Message ----------------------------------------------

  FlushWareHouse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushWareHouse& from);
  void MergeFrom(const FlushWareHouse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HelloKittyMsgData.PbStoreItem store_items = 1;
  inline int store_items_size() const;
  inline void clear_store_items();
  static const int kStoreItemsFieldNumber = 1;
  inline const ::HelloKittyMsgData::PbStoreItem& store_items(int index) const;
  inline ::HelloKittyMsgData::PbStoreItem* mutable_store_items(int index);
  inline ::HelloKittyMsgData::PbStoreItem* add_store_items();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbStoreItem >&
      store_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbStoreItem >*
      mutable_store_items();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.FlushWareHouse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbStoreItem > store_items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static FlushWareHouse* default_instance_;
};
// -------------------------------------------------------------------

class RequireAddItem : public ::google::protobuf::Message {
 public:
  RequireAddItem();
  virtual ~RequireAddItem();

  RequireAddItem(const RequireAddItem& from);

  inline RequireAddItem& operator=(const RequireAddItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequireAddItem& default_instance();

  void Swap(RequireAddItem* other);

  // implements Message ----------------------------------------------

  RequireAddItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequireAddItem& from);
  void MergeFrom(const RequireAddItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.PbStoreItem item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::HelloKittyMsgData::PbStoreItem& item() const;
  inline ::HelloKittyMsgData::PbStoreItem* mutable_item();
  inline ::HelloKittyMsgData::PbStoreItem* release_item();
  inline void set_allocated_item(::HelloKittyMsgData::PbStoreItem* item);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.RequireAddItem)
 private:
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::PbStoreItem* item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static RequireAddItem* default_instance_;
};
// -------------------------------------------------------------------

class AddItemReturn : public ::google::protobuf::Message {
 public:
  AddItemReturn();
  virtual ~AddItemReturn();

  AddItemReturn(const AddItemReturn& from);

  inline AddItemReturn& operator=(const AddItemReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddItemReturn& default_instance();

  void Swap(AddItemReturn* other);

  // implements Message ----------------------------------------------

  AddItemReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddItemReturn& from);
  void MergeFrom(const AddItemReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AddItemReturn)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static AddItemReturn* default_instance_;
};
// -------------------------------------------------------------------

class RequireSallPutItem : public ::google::protobuf::Message {
 public:
  RequireSallPutItem();
  virtual ~RequireSallPutItem();

  RequireSallPutItem(const RequireSallPutItem& from);

  inline RequireSallPutItem& operator=(const RequireSallPutItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequireSallPutItem& default_instance();

  void Swap(RequireSallPutItem* other);

  // implements Message ----------------------------------------------

  RequireSallPutItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequireSallPutItem& from);
  void MergeFrom(const RequireSallPutItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cellId = 1;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cellid() const;
  inline void set_cellid(::google::protobuf::uint32 value);

  // required uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required uint32 itemCount = 3;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 3;
  inline ::google::protobuf::uint32 itemcount() const;
  inline void set_itemcount(::google::protobuf::uint32 value);

  // required uint32 price = 4;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.RequireSallPutItem)
 private:
  inline void set_has_cellid();
  inline void clear_has_cellid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cellid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemcount_;
  ::google::protobuf::uint32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static RequireSallPutItem* default_instance_;
};
// -------------------------------------------------------------------

class RequireSallDownItem : public ::google::protobuf::Message {
 public:
  RequireSallDownItem();
  virtual ~RequireSallDownItem();

  RequireSallDownItem(const RequireSallDownItem& from);

  inline RequireSallDownItem& operator=(const RequireSallDownItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequireSallDownItem& default_instance();

  void Swap(RequireSallDownItem* other);

  // implements Message ----------------------------------------------

  RequireSallDownItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequireSallDownItem& from);
  void MergeFrom(const RequireSallDownItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cellId = 1;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cellid() const;
  inline void set_cellid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.RequireSallDownItem)
 private:
  inline void set_has_cellid();
  inline void clear_has_cellid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cellid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static RequireSallDownItem* default_instance_;
};
// -------------------------------------------------------------------

class SaleCellOpItemReturn : public ::google::protobuf::Message {
 public:
  SaleCellOpItemReturn();
  virtual ~SaleCellOpItemReturn();

  SaleCellOpItemReturn(const SaleCellOpItemReturn& from);

  inline SaleCellOpItemReturn& operator=(const SaleCellOpItemReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaleCellOpItemReturn& default_instance();

  void Swap(SaleCellOpItemReturn* other);

  // implements Message ----------------------------------------------

  SaleCellOpItemReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaleCellOpItemReturn& from);
  void MergeFrom(const SaleCellOpItemReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline bool ret() const;
  inline void set_ret(bool value);

  // required .HelloKittyMsgData.SaleOpFailType reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::HelloKittyMsgData::SaleOpFailType reason() const;
  inline void set_reason(::HelloKittyMsgData::SaleOpFailType value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.SaleCellOpItemReturn)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ret_;
  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static SaleCellOpItemReturn* default_instance_;
};
// -------------------------------------------------------------------

class RequireOpenCell : public ::google::protobuf::Message {
 public:
  RequireOpenCell();
  virtual ~RequireOpenCell();

  RequireOpenCell(const RequireOpenCell& from);

  inline RequireOpenCell& operator=(const RequireOpenCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequireOpenCell& default_instance();

  void Swap(RequireOpenCell* other);

  // implements Message ----------------------------------------------

  RequireOpenCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequireOpenCell& from);
  void MergeFrom(const RequireOpenCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cellID = 1;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellIDFieldNumber = 1;
  inline ::google::protobuf::uint32 cellid() const;
  inline void set_cellid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.RequireOpenCell)
 private:
  inline void set_has_cellid();
  inline void clear_has_cellid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cellid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static RequireOpenCell* default_instance_;
};
// -------------------------------------------------------------------

class RequirSellPaper : public ::google::protobuf::Message {
 public:
  RequirSellPaper();
  virtual ~RequirSellPaper();

  RequirSellPaper(const RequirSellPaper& from);

  inline RequirSellPaper& operator=(const RequirSellPaper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequirSellPaper& default_instance();

  void Swap(RequirSellPaper* other);

  // implements Message ----------------------------------------------

  RequirSellPaper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequirSellPaper& from);
  void MergeFrom(const RequirSellPaper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sceneid = 1 [default = 0];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 1;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // required uint64 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.RequirSellPaper)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 sceneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static RequirSellPaper* default_instance_;
};
// -------------------------------------------------------------------

class SellPaperCell : public ::google::protobuf::Message {
 public:
  SellPaperCell();
  virtual ~SellPaperCell();

  SellPaperCell(const SellPaperCell& from);

  inline SellPaperCell& operator=(const SellPaperCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SellPaperCell& default_instance();

  void Swap(SellPaperCell* other);

  // implements Message ----------------------------------------------

  SellPaperCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SellPaperCell& from);
  void MergeFrom(const SellPaperCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint64 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required .HelloKittyMsgData.PbSaleCell salecell = 3;
  inline bool has_salecell() const;
  inline void clear_salecell();
  static const int kSalecellFieldNumber = 3;
  inline const ::HelloKittyMsgData::PbSaleCell& salecell() const;
  inline ::HelloKittyMsgData::PbSaleCell* mutable_salecell();
  inline ::HelloKittyMsgData::PbSaleCell* release_salecell();
  inline void set_allocated_salecell(::HelloKittyMsgData::PbSaleCell* salecell);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.SellPaperCell)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_salecell();
  inline void clear_has_salecell();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 charid_;
  ::HelloKittyMsgData::PbSaleCell* salecell_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static SellPaperCell* default_instance_;
};
// -------------------------------------------------------------------

class ReturnSellPaper : public ::google::protobuf::Message {
 public:
  ReturnSellPaper();
  virtual ~ReturnSellPaper();

  ReturnSellPaper(const ReturnSellPaper& from);

  inline ReturnSellPaper& operator=(const ReturnSellPaper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnSellPaper& default_instance();

  void Swap(ReturnSellPaper* other);

  // implements Message ----------------------------------------------

  ReturnSellPaper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReturnSellPaper& from);
  void MergeFrom(const ReturnSellPaper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 createTime = 1;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // repeated .HelloKittyMsgData.SellPaperCell paperCell = 2;
  inline int papercell_size() const;
  inline void clear_papercell();
  static const int kPaperCellFieldNumber = 2;
  inline const ::HelloKittyMsgData::SellPaperCell& papercell(int index) const;
  inline ::HelloKittyMsgData::SellPaperCell* mutable_papercell(int index);
  inline ::HelloKittyMsgData::SellPaperCell* add_papercell();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::SellPaperCell >&
      papercell() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::SellPaperCell >*
      mutable_papercell();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReturnSellPaper)
 private:
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::SellPaperCell > papercell_;
  ::google::protobuf::uint32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static ReturnSellPaper* default_instance_;
};
// ===================================================================


// ===================================================================

// PbStoreItem

// optional uint32 itemId = 1;
inline bool PbStoreItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbStoreItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbStoreItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbStoreItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 PbStoreItem::itemid() const {
  return itemid_;
}
inline void PbStoreItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 itemCount = 2;
inline bool PbStoreItem::has_itemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbStoreItem::set_has_itemcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbStoreItem::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbStoreItem::clear_itemcount() {
  itemcount_ = 0u;
  clear_has_itemcount();
}
inline ::google::protobuf::uint32 PbStoreItem::itemcount() const {
  return itemcount_;
}
inline void PbStoreItem::set_itemcount(::google::protobuf::uint32 value) {
  set_has_itemcount();
  itemcount_ = value;
}

// -------------------------------------------------------------------

// PbSaleCell

// required uint32 cellId = 1;
inline bool PbSaleCell::has_cellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbSaleCell::set_has_cellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbSaleCell::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbSaleCell::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 PbSaleCell::cellid() const {
  return cellid_;
}
inline void PbSaleCell::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
}

// required uint32 itemId = 2;
inline bool PbSaleCell::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbSaleCell::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbSaleCell::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbSaleCell::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 PbSaleCell::itemid() const {
  return itemid_;
}
inline void PbSaleCell::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required uint32 itemCount = 3;
inline bool PbSaleCell::has_itemcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbSaleCell::set_has_itemcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbSaleCell::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbSaleCell::clear_itemcount() {
  itemcount_ = 0u;
  clear_has_itemcount();
}
inline ::google::protobuf::uint32 PbSaleCell::itemcount() const {
  return itemcount_;
}
inline void PbSaleCell::set_itemcount(::google::protobuf::uint32 value) {
  set_has_itemcount();
  itemcount_ = value;
}

// required uint32 price = 4;
inline bool PbSaleCell::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbSaleCell::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbSaleCell::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbSaleCell::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 PbSaleCell::price() const {
  return price_;
}
inline void PbSaleCell::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// required .HelloKittyMsgData.SaleCellStatusType status = 5;
inline bool PbSaleCell::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbSaleCell::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbSaleCell::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbSaleCell::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::HelloKittyMsgData::SaleCellStatusType PbSaleCell::status() const {
  return static_cast< ::HelloKittyMsgData::SaleCellStatusType >(status_);
}
inline void PbSaleCell::set_status(::HelloKittyMsgData::SaleCellStatusType value) {
  assert(::HelloKittyMsgData::SaleCellStatusType_IsValid(value));
  set_has_status();
  status_ = value;
}

// required string nickName = 6;
inline bool PbSaleCell::has_nickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbSaleCell::set_has_nickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbSaleCell::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbSaleCell::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& PbSaleCell::nickname() const {
  return *nickname_;
}
inline void PbSaleCell::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PbSaleCell::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PbSaleCell::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbSaleCell::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* PbSaleCell::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbSaleCell::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PbSaleCeilFlushZone

// required uint64 charid = 1;
inline bool PbSaleCeilFlushZone::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbSaleCeilFlushZone::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbSaleCeilFlushZone::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbSaleCeilFlushZone::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 PbSaleCeilFlushZone::charid() const {
  return charid_;
}
inline void PbSaleCeilFlushZone::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// required uint32 sceneid = 2;
inline bool PbSaleCeilFlushZone::has_sceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbSaleCeilFlushZone::set_has_sceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbSaleCeilFlushZone::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbSaleCeilFlushZone::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 PbSaleCeilFlushZone::sceneid() const {
  return sceneid_;
}
inline void PbSaleCeilFlushZone::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// required .HelloKittyMsgData.PbSaleCell saleCell = 3;
inline bool PbSaleCeilFlushZone::has_salecell() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbSaleCeilFlushZone::set_has_salecell() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbSaleCeilFlushZone::clear_has_salecell() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbSaleCeilFlushZone::clear_salecell() {
  if (salecell_ != NULL) salecell_->::HelloKittyMsgData::PbSaleCell::Clear();
  clear_has_salecell();
}
inline const ::HelloKittyMsgData::PbSaleCell& PbSaleCeilFlushZone::salecell() const {
  return salecell_ != NULL ? *salecell_ : *default_instance_->salecell_;
}
inline ::HelloKittyMsgData::PbSaleCell* PbSaleCeilFlushZone::mutable_salecell() {
  set_has_salecell();
  if (salecell_ == NULL) salecell_ = new ::HelloKittyMsgData::PbSaleCell;
  return salecell_;
}
inline ::HelloKittyMsgData::PbSaleCell* PbSaleCeilFlushZone::release_salecell() {
  clear_has_salecell();
  ::HelloKittyMsgData::PbSaleCell* temp = salecell_;
  salecell_ = NULL;
  return temp;
}
inline void PbSaleCeilFlushZone::set_allocated_salecell(::HelloKittyMsgData::PbSaleCell* salecell) {
  delete salecell_;
  salecell_ = salecell;
  if (salecell) {
    set_has_salecell();
  } else {
    clear_has_salecell();
  }
}

// -------------------------------------------------------------------

// PbSaleCeilFlush

// required .HelloKittyMsgData.PbSaleCell saleCell = 1;
inline bool PbSaleCeilFlush::has_salecell() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbSaleCeilFlush::set_has_salecell() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbSaleCeilFlush::clear_has_salecell() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbSaleCeilFlush::clear_salecell() {
  if (salecell_ != NULL) salecell_->::HelloKittyMsgData::PbSaleCell::Clear();
  clear_has_salecell();
}
inline const ::HelloKittyMsgData::PbSaleCell& PbSaleCeilFlush::salecell() const {
  return salecell_ != NULL ? *salecell_ : *default_instance_->salecell_;
}
inline ::HelloKittyMsgData::PbSaleCell* PbSaleCeilFlush::mutable_salecell() {
  set_has_salecell();
  if (salecell_ == NULL) salecell_ = new ::HelloKittyMsgData::PbSaleCell;
  return salecell_;
}
inline ::HelloKittyMsgData::PbSaleCell* PbSaleCeilFlush::release_salecell() {
  clear_has_salecell();
  ::HelloKittyMsgData::PbSaleCell* temp = salecell_;
  salecell_ = NULL;
  return temp;
}
inline void PbSaleCeilFlush::set_allocated_salecell(::HelloKittyMsgData::PbSaleCell* salecell) {
  delete salecell_;
  salecell_ = salecell;
  if (salecell) {
    set_has_salecell();
  } else {
    clear_has_salecell();
  }
}

// -------------------------------------------------------------------

// PbSaleBooth

// required uint32 zoneCellID = 1 [default = 10000];
inline bool PbSaleBooth::has_zonecellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbSaleBooth::set_has_zonecellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbSaleBooth::clear_has_zonecellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbSaleBooth::clear_zonecellid() {
  zonecellid_ = 10000u;
  clear_has_zonecellid();
}
inline ::google::protobuf::uint32 PbSaleBooth::zonecellid() const {
  return zonecellid_;
}
inline void PbSaleBooth::set_zonecellid(::google::protobuf::uint32 value) {
  set_has_zonecellid();
  zonecellid_ = value;
}

// repeated .HelloKittyMsgData.PbSaleCell saleCell = 2;
inline int PbSaleBooth::salecell_size() const {
  return salecell_.size();
}
inline void PbSaleBooth::clear_salecell() {
  salecell_.Clear();
}
inline const ::HelloKittyMsgData::PbSaleCell& PbSaleBooth::salecell(int index) const {
  return salecell_.Get(index);
}
inline ::HelloKittyMsgData::PbSaleCell* PbSaleBooth::mutable_salecell(int index) {
  return salecell_.Mutable(index);
}
inline ::HelloKittyMsgData::PbSaleCell* PbSaleBooth::add_salecell() {
  return salecell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbSaleCell >&
PbSaleBooth::salecell() const {
  return salecell_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbSaleCell >*
PbSaleBooth::mutable_salecell() {
  return &salecell_;
}

// -------------------------------------------------------------------

// RequireStoreItem

// required .HelloKittyMsgData.StoreItemType type = 1;
inline bool RequireStoreItem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequireStoreItem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequireStoreItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequireStoreItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::HelloKittyMsgData::StoreItemType RequireStoreItem::type() const {
  return static_cast< ::HelloKittyMsgData::StoreItemType >(type_);
}
inline void RequireStoreItem::set_type(::HelloKittyMsgData::StoreItemType value) {
  assert(::HelloKittyMsgData::StoreItemType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// FlushSaleBooth

// optional .HelloKittyMsgData.PbSaleBooth saleBooth = 1;
inline bool FlushSaleBooth::has_salebooth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushSaleBooth::set_has_salebooth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushSaleBooth::clear_has_salebooth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushSaleBooth::clear_salebooth() {
  if (salebooth_ != NULL) salebooth_->::HelloKittyMsgData::PbSaleBooth::Clear();
  clear_has_salebooth();
}
inline const ::HelloKittyMsgData::PbSaleBooth& FlushSaleBooth::salebooth() const {
  return salebooth_ != NULL ? *salebooth_ : *default_instance_->salebooth_;
}
inline ::HelloKittyMsgData::PbSaleBooth* FlushSaleBooth::mutable_salebooth() {
  set_has_salebooth();
  if (salebooth_ == NULL) salebooth_ = new ::HelloKittyMsgData::PbSaleBooth;
  return salebooth_;
}
inline ::HelloKittyMsgData::PbSaleBooth* FlushSaleBooth::release_salebooth() {
  clear_has_salebooth();
  ::HelloKittyMsgData::PbSaleBooth* temp = salebooth_;
  salebooth_ = NULL;
  return temp;
}
inline void FlushSaleBooth::set_allocated_salebooth(::HelloKittyMsgData::PbSaleBooth* salebooth) {
  delete salebooth_;
  salebooth_ = salebooth;
  if (salebooth) {
    set_has_salebooth();
  } else {
    clear_has_salebooth();
  }
}

// -------------------------------------------------------------------

// FlushWareHouse

// repeated .HelloKittyMsgData.PbStoreItem store_items = 1;
inline int FlushWareHouse::store_items_size() const {
  return store_items_.size();
}
inline void FlushWareHouse::clear_store_items() {
  store_items_.Clear();
}
inline const ::HelloKittyMsgData::PbStoreItem& FlushWareHouse::store_items(int index) const {
  return store_items_.Get(index);
}
inline ::HelloKittyMsgData::PbStoreItem* FlushWareHouse::mutable_store_items(int index) {
  return store_items_.Mutable(index);
}
inline ::HelloKittyMsgData::PbStoreItem* FlushWareHouse::add_store_items() {
  return store_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbStoreItem >&
FlushWareHouse::store_items() const {
  return store_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbStoreItem >*
FlushWareHouse::mutable_store_items() {
  return &store_items_;
}

// -------------------------------------------------------------------

// RequireAddItem

// required .HelloKittyMsgData.PbStoreItem item = 1;
inline bool RequireAddItem::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequireAddItem::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequireAddItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequireAddItem::clear_item() {
  if (item_ != NULL) item_->::HelloKittyMsgData::PbStoreItem::Clear();
  clear_has_item();
}
inline const ::HelloKittyMsgData::PbStoreItem& RequireAddItem::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::HelloKittyMsgData::PbStoreItem* RequireAddItem::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::HelloKittyMsgData::PbStoreItem;
  return item_;
}
inline ::HelloKittyMsgData::PbStoreItem* RequireAddItem::release_item() {
  clear_has_item();
  ::HelloKittyMsgData::PbStoreItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline void RequireAddItem::set_allocated_item(::HelloKittyMsgData::PbStoreItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
}

// -------------------------------------------------------------------

// AddItemReturn

// required bool ret = 1;
inline bool AddItemReturn::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddItemReturn::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddItemReturn::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddItemReturn::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool AddItemReturn::ret() const {
  return ret_;
}
inline void AddItemReturn::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// RequireSallPutItem

// required uint32 cellId = 1;
inline bool RequireSallPutItem::has_cellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequireSallPutItem::set_has_cellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequireSallPutItem::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequireSallPutItem::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 RequireSallPutItem::cellid() const {
  return cellid_;
}
inline void RequireSallPutItem::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
}

// required uint32 itemId = 2;
inline bool RequireSallPutItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequireSallPutItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequireSallPutItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequireSallPutItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 RequireSallPutItem::itemid() const {
  return itemid_;
}
inline void RequireSallPutItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required uint32 itemCount = 3;
inline bool RequireSallPutItem::has_itemcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequireSallPutItem::set_has_itemcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequireSallPutItem::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequireSallPutItem::clear_itemcount() {
  itemcount_ = 0u;
  clear_has_itemcount();
}
inline ::google::protobuf::uint32 RequireSallPutItem::itemcount() const {
  return itemcount_;
}
inline void RequireSallPutItem::set_itemcount(::google::protobuf::uint32 value) {
  set_has_itemcount();
  itemcount_ = value;
}

// required uint32 price = 4;
inline bool RequireSallPutItem::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequireSallPutItem::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequireSallPutItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequireSallPutItem::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 RequireSallPutItem::price() const {
  return price_;
}
inline void RequireSallPutItem::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// RequireSallDownItem

// required uint32 cellId = 1;
inline bool RequireSallDownItem::has_cellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequireSallDownItem::set_has_cellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequireSallDownItem::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequireSallDownItem::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 RequireSallDownItem::cellid() const {
  return cellid_;
}
inline void RequireSallDownItem::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
}

// -------------------------------------------------------------------

// SaleCellOpItemReturn

// required bool ret = 1;
inline bool SaleCellOpItemReturn::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaleCellOpItemReturn::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaleCellOpItemReturn::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaleCellOpItemReturn::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool SaleCellOpItemReturn::ret() const {
  return ret_;
}
inline void SaleCellOpItemReturn::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
}

// required .HelloKittyMsgData.SaleOpFailType reason = 2;
inline bool SaleCellOpItemReturn::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaleCellOpItemReturn::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaleCellOpItemReturn::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaleCellOpItemReturn::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::HelloKittyMsgData::SaleOpFailType SaleCellOpItemReturn::reason() const {
  return static_cast< ::HelloKittyMsgData::SaleOpFailType >(reason_);
}
inline void SaleCellOpItemReturn::set_reason(::HelloKittyMsgData::SaleOpFailType value) {
  assert(::HelloKittyMsgData::SaleOpFailType_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// RequireOpenCell

// required uint32 cellID = 1;
inline bool RequireOpenCell::has_cellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequireOpenCell::set_has_cellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequireOpenCell::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequireOpenCell::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 RequireOpenCell::cellid() const {
  return cellid_;
}
inline void RequireOpenCell::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
}

// -------------------------------------------------------------------

// RequirSellPaper

// required uint32 sceneid = 1 [default = 0];
inline bool RequirSellPaper::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequirSellPaper::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequirSellPaper::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequirSellPaper::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 RequirSellPaper::sceneid() const {
  return sceneid_;
}
inline void RequirSellPaper::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// required uint64 charid = 2;
inline bool RequirSellPaper::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequirSellPaper::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequirSellPaper::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequirSellPaper::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 RequirSellPaper::charid() const {
  return charid_;
}
inline void RequirSellPaper::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// SellPaperCell

// required string name = 1;
inline bool SellPaperCell::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SellPaperCell::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SellPaperCell::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SellPaperCell::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SellPaperCell::name() const {
  return *name_;
}
inline void SellPaperCell::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SellPaperCell::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SellPaperCell::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SellPaperCell::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SellPaperCell::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SellPaperCell::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 charid = 2;
inline bool SellPaperCell::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SellPaperCell::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SellPaperCell::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SellPaperCell::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SellPaperCell::charid() const {
  return charid_;
}
inline void SellPaperCell::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// required .HelloKittyMsgData.PbSaleCell salecell = 3;
inline bool SellPaperCell::has_salecell() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SellPaperCell::set_has_salecell() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SellPaperCell::clear_has_salecell() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SellPaperCell::clear_salecell() {
  if (salecell_ != NULL) salecell_->::HelloKittyMsgData::PbSaleCell::Clear();
  clear_has_salecell();
}
inline const ::HelloKittyMsgData::PbSaleCell& SellPaperCell::salecell() const {
  return salecell_ != NULL ? *salecell_ : *default_instance_->salecell_;
}
inline ::HelloKittyMsgData::PbSaleCell* SellPaperCell::mutable_salecell() {
  set_has_salecell();
  if (salecell_ == NULL) salecell_ = new ::HelloKittyMsgData::PbSaleCell;
  return salecell_;
}
inline ::HelloKittyMsgData::PbSaleCell* SellPaperCell::release_salecell() {
  clear_has_salecell();
  ::HelloKittyMsgData::PbSaleCell* temp = salecell_;
  salecell_ = NULL;
  return temp;
}
inline void SellPaperCell::set_allocated_salecell(::HelloKittyMsgData::PbSaleCell* salecell) {
  delete salecell_;
  salecell_ = salecell;
  if (salecell) {
    set_has_salecell();
  } else {
    clear_has_salecell();
  }
}

// -------------------------------------------------------------------

// ReturnSellPaper

// required uint32 createTime = 1;
inline bool ReturnSellPaper::has_createtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReturnSellPaper::set_has_createtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReturnSellPaper::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReturnSellPaper::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 ReturnSellPaper::createtime() const {
  return createtime_;
}
inline void ReturnSellPaper::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// repeated .HelloKittyMsgData.SellPaperCell paperCell = 2;
inline int ReturnSellPaper::papercell_size() const {
  return papercell_.size();
}
inline void ReturnSellPaper::clear_papercell() {
  papercell_.Clear();
}
inline const ::HelloKittyMsgData::SellPaperCell& ReturnSellPaper::papercell(int index) const {
  return papercell_.Get(index);
}
inline ::HelloKittyMsgData::SellPaperCell* ReturnSellPaper::mutable_papercell(int index) {
  return papercell_.Mutable(index);
}
inline ::HelloKittyMsgData::SellPaperCell* ReturnSellPaper::add_papercell() {
  return papercell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::SellPaperCell >&
ReturnSellPaper::papercell() const {
  return papercell_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::SellPaperCell >*
ReturnSellPaper::mutable_papercell() {
  return &papercell_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::SaleCellStatusType>() {
  return ::HelloKittyMsgData::SaleCellStatusType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::StoreItemType>() {
  return ::HelloKittyMsgData::StoreItemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::SaleOpFailType>() {
  return ::HelloKittyMsgData::SaleOpFailType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trade_2eproto__INCLUDED
