// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* UseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseItemReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseItemReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactorProductItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactorProductItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactorTypeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactorTypeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Factor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Factor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Flush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Flush_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UseItemFailType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_item_2eproto() {
  protobuf_AddDesc_item_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "item.proto");
  GOOGLE_CHECK(file != NULL);
  UseItem_descriptor_ = file->message_type(0);
  static const int UseItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItem, num_),
  };
  UseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseItem_descriptor_,
      UseItem::default_instance_,
      UseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseItem));
  UseItemReturn_descriptor_ = file->message_type(1);
  static const int UseItemReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemReturn, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemReturn, reason_),
  };
  UseItemReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseItemReturn_descriptor_,
      UseItemReturn::default_instance_,
      UseItemReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseItemReturn));
  Point_descriptor_ = file->message_type(2);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  FactorProductItem_descriptor_ = file->message_type(3);
  static const int FactorProductItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorProductItem, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorProductItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorProductItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorProductItem, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorProductItem, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorProductItem, time_),
  };
  FactorProductItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactorProductItem_descriptor_,
      FactorProductItem::default_instance_,
      FactorProductItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorProductItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorProductItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactorProductItem));
  FactorTypeItem_descriptor_ = file->message_type(4);
  static const int FactorTypeItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorTypeItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorTypeItem, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorTypeItem, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorTypeItem, produceitem_),
  };
  FactorTypeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactorTypeItem_descriptor_,
      FactorTypeItem::default_instance_,
      FactorTypeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorTypeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorTypeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactorTypeItem));
  Factor_descriptor_ = file->message_type(5);
  static const int Factor_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, factoritem_),
  };
  Factor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Factor_descriptor_,
      Factor::default_instance_,
      Factor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Factor));
  Flush_descriptor_ = file->message_type(6);
  static const int Flush_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flush, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flush, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flush, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flush, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flush, factoritem_),
  };
  Flush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Flush_descriptor_,
      Flush::default_instance_,
      Flush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Flush));
  UseItemFailType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_item_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseItem_descriptor_, &UseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseItemReturn_descriptor_, &UseItemReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactorProductItem_descriptor_, &FactorProductItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactorTypeItem_descriptor_, &FactorTypeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Factor_descriptor_, &Factor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Flush_descriptor_, &Flush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_item_2eproto() {
  delete UseItem::default_instance_;
  delete UseItem_reflection_;
  delete UseItemReturn::default_instance_;
  delete UseItemReturn_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete FactorProductItem::default_instance_;
  delete FactorProductItem_reflection_;
  delete FactorTypeItem::default_instance_;
  delete FactorTypeItem_reflection_;
  delete Factor::default_instance_;
  delete Factor_reflection_;
  delete Flush::default_instance_;
  delete Flush_reflection_;
}

void protobuf_AddDesc_item_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nitem.proto\022\021HelloKittyMsgData\"&\n\007UseIt"
    "em\022\016\n\006itemID\030\001 \002(\r\022\013\n\003num\030\002 \002(\r\"P\n\rUseIt"
    "emReturn\022\013\n\003ret\030\001 \002(\010\0222\n\006reason\030\002 \002(\0162\"."
    "HelloKittyMsgData.UseItemFailType\"\035\n\005Poi"
    "nt\022\t\n\001x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\"p\n\021FactorProduc"
    "tItem\022\014\n\004stop\030\001 \002(\010\022\016\n\006itemID\030\002 \002(\r\022\013\n\003n"
    "um\030\003 \002(\r\022\021\n\tbeginTime\030\004 \002(\r\022\017\n\007endTime\030\005"
    " \002(\r\022\014\n\004time\030\006 \002(\r\"y\n\016FactorTypeItem\022\016\n\006"
    "itemID\030\001 \002(\r\022\016\n\006active\030\002 \002(\010\022\014\n\004stop\030\003 \002"
    "(\010\0229\n\013produceItem\030\004 \003(\0132$.HelloKittyMsgD"
    "ata.FactorProductItem\"\226\001\n\006Factor\022\016\n\006item"
    "ID\030\001 \002(\r\022\016\n\006active\030\002 \002(\010\022\014\n\004stop\030\003 \002(\010\022\'"
    "\n\005point\030\004 \002(\0132\030.HelloKittyMsgData.Point\022"
    "5\n\nfactorItem\030\005 \003(\0132!.HelloKittyMsgData."
    "FactorTypeItem\"\270\001\n\005Flush\0221\n\006itemID\030\001 \002(\013"
    "2!.HelloKittyMsgData.FactorTypeItem\022\016\n\006a"
    "ctive\030\002 \002(\010\022\014\n\004stop\030\003 \002(\010\022\'\n\005point\030\004 \002(\013"
    "2\030.HelloKittyMsgData.Point\0225\n\nfactorItem"
    "\030\005 \003(\0132!.HelloKittyMsgData.FactorTypeIte"
    "m*}\n\017UseItemFailType\022\024\n\020Fail_Item_Illeay"
    "\020\000\022\030\n\024Fail_Item_Not_Enough\020\001\022\033\n\027Fail_Ite"
    "m_Level_Limited\020\002\022\035\n\031Fail_Item_Premise_L"
    "imited\020\003", 888);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "item.proto", &protobuf_RegisterTypes);
  UseItem::default_instance_ = new UseItem();
  UseItemReturn::default_instance_ = new UseItemReturn();
  Point::default_instance_ = new Point();
  FactorProductItem::default_instance_ = new FactorProductItem();
  FactorTypeItem::default_instance_ = new FactorTypeItem();
  Factor::default_instance_ = new Factor();
  Flush::default_instance_ = new Flush();
  UseItem::default_instance_->InitAsDefaultInstance();
  UseItemReturn::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  FactorProductItem::default_instance_->InitAsDefaultInstance();
  FactorTypeItem::default_instance_->InitAsDefaultInstance();
  Factor::default_instance_->InitAsDefaultInstance();
  Flush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_item_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_item_2eproto {
  StaticDescriptorInitializer_item_2eproto() {
    protobuf_AddDesc_item_2eproto();
  }
} static_descriptor_initializer_item_2eproto_;
const ::google::protobuf::EnumDescriptor* UseItemFailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItemFailType_descriptor_;
}
bool UseItemFailType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UseItem::kItemIDFieldNumber;
const int UseItem::kNumFieldNumber;
#endif  // !_MSC_VER

UseItem::UseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseItem::InitAsDefaultInstance() {
}

UseItem::UseItem(const UseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseItem::~UseItem() {
  SharedDtor();
}

void UseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItem_descriptor_;
}

const UseItem& UseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

UseItem* UseItem::default_instance_ = NULL;

UseItem* UseItem::New() const {
  return new UseItem;
}

void UseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseItem::MergeFrom(const UseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItem::CopyFrom(const UseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UseItem::Swap(UseItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseItem_descriptor_;
  metadata.reflection = UseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseItemReturn::kRetFieldNumber;
const int UseItemReturn::kReasonFieldNumber;
#endif  // !_MSC_VER

UseItemReturn::UseItemReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseItemReturn::InitAsDefaultInstance() {
}

UseItemReturn::UseItemReturn(const UseItemReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseItemReturn::SharedCtor() {
  _cached_size_ = 0;
  ret_ = false;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseItemReturn::~UseItemReturn() {
  SharedDtor();
}

void UseItemReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseItemReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseItemReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItemReturn_descriptor_;
}

const UseItemReturn& UseItemReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

UseItemReturn* UseItemReturn::default_instance_ = NULL;

UseItemReturn* UseItemReturn::New() const {
  return new UseItemReturn;
}

void UseItemReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = false;
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseItemReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // required .HelloKittyMsgData.UseItemFailType reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::UseItemFailType_IsValid(value)) {
            set_reason(static_cast< ::HelloKittyMsgData::UseItemFailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseItemReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  // required .HelloKittyMsgData.UseItemFailType reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseItemReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  // required .HelloKittyMsgData.UseItemFailType reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseItemReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // required .HelloKittyMsgData.UseItemFailType reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseItemReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseItemReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseItemReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseItemReturn::MergeFrom(const UseItemReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseItemReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemReturn::CopyFrom(const UseItemReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UseItemReturn::Swap(UseItemReturn* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseItemReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseItemReturn_descriptor_;
  metadata.reflection = UseItemReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactorProductItem::kStopFieldNumber;
const int FactorProductItem::kItemIDFieldNumber;
const int FactorProductItem::kNumFieldNumber;
const int FactorProductItem::kBeginTimeFieldNumber;
const int FactorProductItem::kEndTimeFieldNumber;
const int FactorProductItem::kTimeFieldNumber;
#endif  // !_MSC_VER

FactorProductItem::FactorProductItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactorProductItem::InitAsDefaultInstance() {
}

FactorProductItem::FactorProductItem(const FactorProductItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactorProductItem::SharedCtor() {
  _cached_size_ = 0;
  stop_ = false;
  itemid_ = 0u;
  num_ = 0u;
  begintime_ = 0u;
  endtime_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactorProductItem::~FactorProductItem() {
  SharedDtor();
}

void FactorProductItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactorProductItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactorProductItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactorProductItem_descriptor_;
}

const FactorProductItem& FactorProductItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

FactorProductItem* FactorProductItem::default_instance_ = NULL;

FactorProductItem* FactorProductItem::New() const {
  return new FactorProductItem;
}

void FactorProductItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stop_ = false;
    itemid_ = 0u;
    num_ = 0u;
    begintime_ = 0u;
    endtime_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactorProductItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool stop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
          set_has_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // required uint32 itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_beginTime;
        break;
      }

      // required uint32 beginTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endTime;
        break;
      }

      // required uint32 endTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // required uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactorProductItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool stop = 1;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->stop(), output);
  }

  // required uint32 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // required uint32 beginTime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->begintime(), output);
  }

  // required uint32 endTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }

  // required uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactorProductItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool stop = 1;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->stop(), target);
  }

  // required uint32 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // required uint32 beginTime = 4;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->begintime(), target);
  }

  // required uint32 endTime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }

  // required uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactorProductItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool stop = 1;
    if (has_stop()) {
      total_size += 1 + 1;
    }

    // required uint32 itemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 beginTime = 4;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // required uint32 endTime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // required uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactorProductItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactorProductItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactorProductItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactorProductItem::MergeFrom(const FactorProductItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop()) {
      set_stop(from.stop());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactorProductItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactorProductItem::CopyFrom(const FactorProductItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactorProductItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FactorProductItem::Swap(FactorProductItem* other) {
  if (other != this) {
    std::swap(stop_, other->stop_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactorProductItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactorProductItem_descriptor_;
  metadata.reflection = FactorProductItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactorTypeItem::kItemIDFieldNumber;
const int FactorTypeItem::kActiveFieldNumber;
const int FactorTypeItem::kStopFieldNumber;
const int FactorTypeItem::kProduceItemFieldNumber;
#endif  // !_MSC_VER

FactorTypeItem::FactorTypeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactorTypeItem::InitAsDefaultInstance() {
}

FactorTypeItem::FactorTypeItem(const FactorTypeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactorTypeItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  active_ = false;
  stop_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactorTypeItem::~FactorTypeItem() {
  SharedDtor();
}

void FactorTypeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactorTypeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactorTypeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactorTypeItem_descriptor_;
}

const FactorTypeItem& FactorTypeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

FactorTypeItem* FactorTypeItem::default_instance_ = NULL;

FactorTypeItem* FactorTypeItem::New() const {
  return new FactorTypeItem;
}

void FactorTypeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    active_ = false;
    stop_ = false;
  }
  produceitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactorTypeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // required bool active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stop;
        break;
      }

      // required bool stop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
          set_has_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_produceItem;
        break;
      }

      // repeated .HelloKittyMsgData.FactorProductItem produceItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_produceItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_produceitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_produceItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactorTypeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required bool active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // required bool stop = 3;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stop(), output);
  }

  // repeated .HelloKittyMsgData.FactorProductItem produceItem = 4;
  for (int i = 0; i < this->produceitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->produceitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactorTypeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // required bool active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // required bool stop = 3;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stop(), target);
  }

  // repeated .HelloKittyMsgData.FactorProductItem produceItem = 4;
  for (int i = 0; i < this->produceitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->produceitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactorTypeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // required bool stop = 3;
    if (has_stop()) {
      total_size += 1 + 1;
    }

  }
  // repeated .HelloKittyMsgData.FactorProductItem produceItem = 4;
  total_size += 1 * this->produceitem_size();
  for (int i = 0; i < this->produceitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->produceitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactorTypeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactorTypeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactorTypeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactorTypeItem::MergeFrom(const FactorTypeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  produceitem_.MergeFrom(from.produceitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_stop()) {
      set_stop(from.stop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactorTypeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactorTypeItem::CopyFrom(const FactorTypeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactorTypeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < produceitem_size(); i++) {
    if (!this->produceitem(i).IsInitialized()) return false;
  }
  return true;
}

void FactorTypeItem::Swap(FactorTypeItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(active_, other->active_);
    std::swap(stop_, other->stop_);
    produceitem_.Swap(&other->produceitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactorTypeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactorTypeItem_descriptor_;
  metadata.reflection = FactorTypeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Factor::kItemIDFieldNumber;
const int Factor::kActiveFieldNumber;
const int Factor::kStopFieldNumber;
const int Factor::kPointFieldNumber;
const int Factor::kFactorItemFieldNumber;
#endif  // !_MSC_VER

Factor::Factor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Factor::InitAsDefaultInstance() {
  point_ = const_cast< ::HelloKittyMsgData::Point*>(&::HelloKittyMsgData::Point::default_instance());
}

Factor::Factor(const Factor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Factor::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  active_ = false;
  stop_ = false;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Factor::~Factor() {
  SharedDtor();
}

void Factor::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void Factor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Factor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Factor_descriptor_;
}

const Factor& Factor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Factor* Factor::default_instance_ = NULL;

Factor* Factor::New() const {
  return new Factor;
}

void Factor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    active_ = false;
    stop_ = false;
    if (has_point()) {
      if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
    }
  }
  factoritem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Factor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // required bool active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stop;
        break;
      }

      // required bool stop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
          set_has_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_point;
        break;
      }

      // required .HelloKittyMsgData.Point point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_factorItem;
        break;
      }

      // repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factorItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_factoritem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_factorItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Factor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required bool active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // required bool stop = 3;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stop(), output);
  }

  // required .HelloKittyMsgData.Point point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->point(), output);
  }

  // repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
  for (int i = 0; i < this->factoritem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->factoritem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Factor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // required bool active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // required bool stop = 3;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stop(), target);
  }

  // required .HelloKittyMsgData.Point point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->point(), target);
  }

  // repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
  for (int i = 0; i < this->factoritem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->factoritem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Factor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // required bool stop = 3;
    if (has_stop()) {
      total_size += 1 + 1;
    }

    // required .HelloKittyMsgData.Point point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  // repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
  total_size += 1 * this->factoritem_size();
  for (int i = 0; i < this->factoritem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->factoritem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Factor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Factor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Factor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Factor::MergeFrom(const Factor& from) {
  GOOGLE_CHECK_NE(&from, this);
  factoritem_.MergeFrom(from.factoritem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_stop()) {
      set_stop(from.stop());
    }
    if (from.has_point()) {
      mutable_point()->::HelloKittyMsgData::Point::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Factor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Factor::CopyFrom(const Factor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Factor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  for (int i = 0; i < factoritem_size(); i++) {
    if (!this->factoritem(i).IsInitialized()) return false;
  }
  return true;
}

void Factor::Swap(Factor* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(active_, other->active_);
    std::swap(stop_, other->stop_);
    std::swap(point_, other->point_);
    factoritem_.Swap(&other->factoritem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Factor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Factor_descriptor_;
  metadata.reflection = Factor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Flush::kItemIDFieldNumber;
const int Flush::kActiveFieldNumber;
const int Flush::kStopFieldNumber;
const int Flush::kPointFieldNumber;
const int Flush::kFactorItemFieldNumber;
#endif  // !_MSC_VER

Flush::Flush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Flush::InitAsDefaultInstance() {
  itemid_ = const_cast< ::HelloKittyMsgData::FactorTypeItem*>(&::HelloKittyMsgData::FactorTypeItem::default_instance());
  point_ = const_cast< ::HelloKittyMsgData::Point*>(&::HelloKittyMsgData::Point::default_instance());
}

Flush::Flush(const Flush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Flush::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = NULL;
  active_ = false;
  stop_ = false;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Flush::~Flush() {
  SharedDtor();
}

void Flush::SharedDtor() {
  if (this != default_instance_) {
    delete itemid_;
    delete point_;
  }
}

void Flush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Flush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Flush_descriptor_;
}

const Flush& Flush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Flush* Flush::default_instance_ = NULL;

Flush* Flush::New() const {
  return new Flush;
}

void Flush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_itemid()) {
      if (itemid_ != NULL) itemid_->::HelloKittyMsgData::FactorTypeItem::Clear();
    }
    active_ = false;
    stop_ = false;
    if (has_point()) {
      if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
    }
  }
  factoritem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Flush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.FactorTypeItem itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // required bool active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stop;
        break;
      }

      // required bool stop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
          set_has_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_point;
        break;
      }

      // required .HelloKittyMsgData.Point point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_factorItem;
        break;
      }

      // repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factorItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_factoritem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_factorItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Flush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.FactorTypeItem itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemid(), output);
  }

  // required bool active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // required bool stop = 3;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stop(), output);
  }

  // required .HelloKittyMsgData.Point point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->point(), output);
  }

  // repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
  for (int i = 0; i < this->factoritem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->factoritem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Flush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.FactorTypeItem itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemid(), target);
  }

  // required bool active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // required bool stop = 3;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stop(), target);
  }

  // required .HelloKittyMsgData.Point point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->point(), target);
  }

  // repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
  for (int i = 0; i < this->factoritem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->factoritem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Flush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.FactorTypeItem itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemid());
    }

    // required bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // required bool stop = 3;
    if (has_stop()) {
      total_size += 1 + 1;
    }

    // required .HelloKittyMsgData.Point point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  // repeated .HelloKittyMsgData.FactorTypeItem factorItem = 5;
  total_size += 1 * this->factoritem_size();
  for (int i = 0; i < this->factoritem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->factoritem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Flush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Flush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Flush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Flush::MergeFrom(const Flush& from) {
  GOOGLE_CHECK_NE(&from, this);
  factoritem_.MergeFrom(from.factoritem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      mutable_itemid()->::HelloKittyMsgData::FactorTypeItem::MergeFrom(from.itemid());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_stop()) {
      set_stop(from.stop());
    }
    if (from.has_point()) {
      mutable_point()->::HelloKittyMsgData::Point::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Flush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Flush::CopyFrom(const Flush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flush::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_itemid()) {
    if (!this->itemid().IsInitialized()) return false;
  }
  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  for (int i = 0; i < factoritem_size(); i++) {
    if (!this->factoritem(i).IsInitialized()) return false;
  }
  return true;
}

void Flush::Swap(Flush* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(active_, other->active_);
    std::swap(stop_, other->stop_);
    std::swap(point_, other->point_);
    factoritem_.Swap(&other->factoritem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Flush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Flush_descriptor_;
  metadata.reflection = Flush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
