// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npcinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "npcinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* npcinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npcinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* npcinfo_t_npcinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  npcinfo_t_npcinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_npcinfo_2eproto() {
  protobuf_AddDesc_npcinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "npcinfo.proto");
  GOOGLE_CHECK(file != NULL);
  npcinfo_descriptor_ = file->message_type(0);
  static const int npcinfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo, datas_),
  };
  npcinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npcinfo_descriptor_,
      npcinfo::default_instance_,
      npcinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npcinfo));
  npcinfo_t_npcinfo_descriptor_ = npcinfo_descriptor_->nested_type(0);
  static const int npcinfo_t_npcinfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, tbxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, getway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, functionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, friendly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, require_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, missionrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, describe_),
  };
  npcinfo_t_npcinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      npcinfo_t_npcinfo_descriptor_,
      npcinfo_t_npcinfo::default_instance_,
      npcinfo_t_npcinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(npcinfo_t_npcinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(npcinfo_t_npcinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_npcinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npcinfo_descriptor_, &npcinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    npcinfo_t_npcinfo_descriptor_, &npcinfo_t_npcinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_npcinfo_2eproto() {
  delete npcinfo::default_instance_;
  delete npcinfo_reflection_;
  delete npcinfo_t_npcinfo::default_instance_;
  delete npcinfo_t_npcinfo_reflection_;
}

void protobuf_AddDesc_npcinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnpcinfo.proto\022\002pb\"\210\002\n\007npcinfo\022$\n\005datas"
    "\030\001 \003(\0132\025.pb.npcinfo.t_npcinfo\032\326\001\n\tt_npci"
    "nfo\022\r\n\005tbxid\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\014\n\004name\030\003"
    " \002(\t\022\013\n\003pic\030\004 \002(\r\022\016\n\006getWay\030\005 \002(\r\022\020\n\010fun"
    "ction\030\006 \002(\r\022\025\n\rfunctionValue\030\007 \002(\r\022\020\n\010fr"
    "iendly\030\010 \002(\r\022\017\n\007require\030\t \002(\r\022\026\n\016mission"
    "Require\030\n \002(\r\022\r\n\005grade\030\013 \002(\r\022\020\n\010describe"
    "\030\014 \002(\r", 286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "npcinfo.proto", &protobuf_RegisterTypes);
  npcinfo::default_instance_ = new npcinfo();
  npcinfo_t_npcinfo::default_instance_ = new npcinfo_t_npcinfo();
  npcinfo::default_instance_->InitAsDefaultInstance();
  npcinfo_t_npcinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_npcinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_npcinfo_2eproto {
  StaticDescriptorInitializer_npcinfo_2eproto() {
    protobuf_AddDesc_npcinfo_2eproto();
  }
} static_descriptor_initializer_npcinfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int npcinfo_t_npcinfo::kTbxidFieldNumber;
const int npcinfo_t_npcinfo::kIdFieldNumber;
const int npcinfo_t_npcinfo::kNameFieldNumber;
const int npcinfo_t_npcinfo::kPicFieldNumber;
const int npcinfo_t_npcinfo::kGetWayFieldNumber;
const int npcinfo_t_npcinfo::kFunctionFieldNumber;
const int npcinfo_t_npcinfo::kFunctionValueFieldNumber;
const int npcinfo_t_npcinfo::kFriendlyFieldNumber;
const int npcinfo_t_npcinfo::kRequireFieldNumber;
const int npcinfo_t_npcinfo::kMissionRequireFieldNumber;
const int npcinfo_t_npcinfo::kGradeFieldNumber;
const int npcinfo_t_npcinfo::kDescribeFieldNumber;
#endif  // !_MSC_VER

npcinfo_t_npcinfo::npcinfo_t_npcinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npcinfo_t_npcinfo::InitAsDefaultInstance() {
}

npcinfo_t_npcinfo::npcinfo_t_npcinfo(const npcinfo_t_npcinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npcinfo_t_npcinfo::SharedCtor() {
  _cached_size_ = 0;
  tbxid_ = 0u;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pic_ = 0u;
  getway_ = 0u;
  function_ = 0u;
  functionvalue_ = 0u;
  friendly_ = 0u;
  require_ = 0u;
  missionrequire_ = 0u;
  grade_ = 0u;
  describe_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npcinfo_t_npcinfo::~npcinfo_t_npcinfo() {
  SharedDtor();
}

void npcinfo_t_npcinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void npcinfo_t_npcinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npcinfo_t_npcinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npcinfo_t_npcinfo_descriptor_;
}

const npcinfo_t_npcinfo& npcinfo_t_npcinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npcinfo_2eproto();
  return *default_instance_;
}

npcinfo_t_npcinfo* npcinfo_t_npcinfo::default_instance_ = NULL;

npcinfo_t_npcinfo* npcinfo_t_npcinfo::New() const {
  return new npcinfo_t_npcinfo;
}

void npcinfo_t_npcinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tbxid_ = 0u;
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    pic_ = 0u;
    getway_ = 0u;
    function_ = 0u;
    functionvalue_ = 0u;
    friendly_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    require_ = 0u;
    missionrequire_ = 0u;
    grade_ = 0u;
    describe_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npcinfo_t_npcinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tbxid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbxid_)));
          set_has_tbxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pic;
        break;
      }

      // required uint32 pic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_getWay;
        break;
      }

      // required uint32 getWay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getWay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getway_)));
          set_has_getway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_function;
        break;
      }

      // required uint32 function = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_function:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &function_)));
          set_has_function();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_functionValue;
        break;
      }

      // required uint32 functionValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &functionvalue_)));
          set_has_functionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_friendly;
        break;
      }

      // required uint32 friendly = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendly_)));
          set_has_friendly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_require;
        break;
      }

      // required uint32 require = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &require_)));
          set_has_require();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_missionRequire;
        break;
      }

      // required uint32 missionRequire = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionRequire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionrequire_)));
          set_has_missionrequire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_grade;
        break;
      }

      // required uint32 grade = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_describe;
        break;
      }

      // required uint32 describe = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_describe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &describe_)));
          set_has_describe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npcinfo_t_npcinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tbxid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pic(), output);
  }

  // required uint32 getWay = 5;
  if (has_getway()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->getway(), output);
  }

  // required uint32 function = 6;
  if (has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->function(), output);
  }

  // required uint32 functionValue = 7;
  if (has_functionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->functionvalue(), output);
  }

  // required uint32 friendly = 8;
  if (has_friendly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->friendly(), output);
  }

  // required uint32 require = 9;
  if (has_require()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->require(), output);
  }

  // required uint32 missionRequire = 10;
  if (has_missionrequire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->missionrequire(), output);
  }

  // required uint32 grade = 11;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->grade(), output);
  }

  // required uint32 describe = 12;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->describe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npcinfo_t_npcinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tbxid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 pic = 4;
  if (has_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pic(), target);
  }

  // required uint32 getWay = 5;
  if (has_getway()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->getway(), target);
  }

  // required uint32 function = 6;
  if (has_function()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->function(), target);
  }

  // required uint32 functionValue = 7;
  if (has_functionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->functionvalue(), target);
  }

  // required uint32 friendly = 8;
  if (has_friendly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->friendly(), target);
  }

  // required uint32 require = 9;
  if (has_require()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->require(), target);
  }

  // required uint32 missionRequire = 10;
  if (has_missionrequire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->missionrequire(), target);
  }

  // required uint32 grade = 11;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->grade(), target);
  }

  // required uint32 describe = 12;
  if (has_describe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->describe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npcinfo_t_npcinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tbxid = 1;
    if (has_tbxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbxid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 pic = 4;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pic());
    }

    // required uint32 getWay = 5;
    if (has_getway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getway());
    }

    // required uint32 function = 6;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->function());
    }

    // required uint32 functionValue = 7;
    if (has_functionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->functionvalue());
    }

    // required uint32 friendly = 8;
    if (has_friendly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendly());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 require = 9;
    if (has_require()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->require());
    }

    // required uint32 missionRequire = 10;
    if (has_missionrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionrequire());
    }

    // required uint32 grade = 11;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // required uint32 describe = 12;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->describe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npcinfo_t_npcinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npcinfo_t_npcinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npcinfo_t_npcinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npcinfo_t_npcinfo::MergeFrom(const npcinfo_t_npcinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tbxid()) {
      set_tbxid(from.tbxid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_getway()) {
      set_getway(from.getway());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_functionvalue()) {
      set_functionvalue(from.functionvalue());
    }
    if (from.has_friendly()) {
      set_friendly(from.friendly());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_require()) {
      set_require(from.require());
    }
    if (from.has_missionrequire()) {
      set_missionrequire(from.missionrequire());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npcinfo_t_npcinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npcinfo_t_npcinfo::CopyFrom(const npcinfo_t_npcinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npcinfo_t_npcinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void npcinfo_t_npcinfo::Swap(npcinfo_t_npcinfo* other) {
  if (other != this) {
    std::swap(tbxid_, other->tbxid_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(getway_, other->getway_);
    std::swap(function_, other->function_);
    std::swap(functionvalue_, other->functionvalue_);
    std::swap(friendly_, other->friendly_);
    std::swap(require_, other->require_);
    std::swap(missionrequire_, other->missionrequire_);
    std::swap(grade_, other->grade_);
    std::swap(describe_, other->describe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npcinfo_t_npcinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npcinfo_t_npcinfo_descriptor_;
  metadata.reflection = npcinfo_t_npcinfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int npcinfo::kDatasFieldNumber;
#endif  // !_MSC_VER

npcinfo::npcinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void npcinfo::InitAsDefaultInstance() {
}

npcinfo::npcinfo(const npcinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void npcinfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

npcinfo::~npcinfo() {
  SharedDtor();
}

void npcinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void npcinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* npcinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return npcinfo_descriptor_;
}

const npcinfo& npcinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npcinfo_2eproto();
  return *default_instance_;
}

npcinfo* npcinfo::default_instance_ = NULL;

npcinfo* npcinfo::New() const {
  return new npcinfo;
}

void npcinfo::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool npcinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.npcinfo.t_npcinfo datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void npcinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.npcinfo.t_npcinfo datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* npcinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.npcinfo.t_npcinfo datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int npcinfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.npcinfo.t_npcinfo datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void npcinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const npcinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const npcinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void npcinfo::MergeFrom(const npcinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void npcinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npcinfo::CopyFrom(const npcinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npcinfo::IsInitialized() const {

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }
  return true;
}

void npcinfo::Swap(npcinfo* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata npcinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = npcinfo_descriptor_;
  metadata.reflection = npcinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
