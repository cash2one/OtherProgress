// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Localization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Localization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Localization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Localization_reflection_ = NULL;
const ::google::protobuf::Descriptor* Localization_t_Localization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Localization_t_Localization_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Localization_2eproto() {
  protobuf_AddDesc_Localization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Localization.proto");
  GOOGLE_CHECK(file != NULL);
  Localization_descriptor_ = file->message_type(0);
  static const int Localization_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, datas_),
  };
  Localization_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Localization_descriptor_,
      Localization::default_instance_,
      Localization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Localization));
  Localization_t_Localization_descriptor_ = Localization_descriptor_->nested_type(0);
  static const int Localization_t_Localization_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization_t_Localization, tbxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization_t_Localization, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization_t_Localization, english_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization_t_Localization, chinese_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization_t_Localization, japanese_),
  };
  Localization_t_Localization_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Localization_t_Localization_descriptor_,
      Localization_t_Localization::default_instance_,
      Localization_t_Localization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization_t_Localization, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization_t_Localization, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Localization_t_Localization));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Localization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Localization_descriptor_, &Localization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Localization_t_Localization_descriptor_, &Localization_t_Localization::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Localization_2eproto() {
  delete Localization::default_instance_;
  delete Localization_reflection_;
  delete Localization_t_Localization::default_instance_;
  delete Localization_t_Localization_reflection_;
}

void protobuf_AddDesc_Localization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022Localization.proto\022\002pb\"\237\001\n\014Localizatio"
    "n\022.\n\005datas\030\001 \003(\0132\037.pb.Localization.t_Loc"
    "alization\032_\n\016t_Localization\022\r\n\005tbxid\030\001 \002"
    "(\r\022\n\n\002id\030\002 \002(\t\022\017\n\007English\030\003 \002(\t\022\017\n\007Chine"
    "se\030\004 \002(\t\022\020\n\010Japanese\030\005 \002(\t", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Localization.proto", &protobuf_RegisterTypes);
  Localization::default_instance_ = new Localization();
  Localization_t_Localization::default_instance_ = new Localization_t_Localization();
  Localization::default_instance_->InitAsDefaultInstance();
  Localization_t_Localization::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Localization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Localization_2eproto {
  StaticDescriptorInitializer_Localization_2eproto() {
    protobuf_AddDesc_Localization_2eproto();
  }
} static_descriptor_initializer_Localization_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Localization_t_Localization::kTbxidFieldNumber;
const int Localization_t_Localization::kIdFieldNumber;
const int Localization_t_Localization::kEnglishFieldNumber;
const int Localization_t_Localization::kChineseFieldNumber;
const int Localization_t_Localization::kJapaneseFieldNumber;
#endif  // !_MSC_VER

Localization_t_Localization::Localization_t_Localization()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Localization_t_Localization::InitAsDefaultInstance() {
}

Localization_t_Localization::Localization_t_Localization(const Localization_t_Localization& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Localization_t_Localization::SharedCtor() {
  _cached_size_ = 0;
  tbxid_ = 0u;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  english_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chinese_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  japanese_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Localization_t_Localization::~Localization_t_Localization() {
  SharedDtor();
}

void Localization_t_Localization::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (english_ != &::google::protobuf::internal::kEmptyString) {
    delete english_;
  }
  if (chinese_ != &::google::protobuf::internal::kEmptyString) {
    delete chinese_;
  }
  if (japanese_ != &::google::protobuf::internal::kEmptyString) {
    delete japanese_;
  }
  if (this != default_instance_) {
  }
}

void Localization_t_Localization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Localization_t_Localization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Localization_t_Localization_descriptor_;
}

const Localization_t_Localization& Localization_t_Localization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Localization_2eproto();
  return *default_instance_;
}

Localization_t_Localization* Localization_t_Localization::default_instance_ = NULL;

Localization_t_Localization* Localization_t_Localization::New() const {
  return new Localization_t_Localization;
}

void Localization_t_Localization::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tbxid_ = 0u;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_english()) {
      if (english_ != &::google::protobuf::internal::kEmptyString) {
        english_->clear();
      }
    }
    if (has_chinese()) {
      if (chinese_ != &::google::protobuf::internal::kEmptyString) {
        chinese_->clear();
      }
    }
    if (has_japanese()) {
      if (japanese_ != &::google::protobuf::internal::kEmptyString) {
        japanese_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Localization_t_Localization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tbxid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbxid_)));
          set_has_tbxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_English;
        break;
      }

      // required string English = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_English:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_english()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->english().data(), this->english().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Chinese;
        break;
      }

      // required string Chinese = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Chinese:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chinese()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chinese().data(), this->chinese().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Japanese;
        break;
      }

      // required string Japanese = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Japanese:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_japanese()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->japanese().data(), this->japanese().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Localization_t_Localization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tbxid(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // required string English = 3;
  if (has_english()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->english().data(), this->english().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->english(), output);
  }

  // required string Chinese = 4;
  if (has_chinese()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chinese().data(), this->chinese().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chinese(), output);
  }

  // required string Japanese = 5;
  if (has_japanese()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->japanese().data(), this->japanese().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->japanese(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Localization_t_Localization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tbxid(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // required string English = 3;
  if (has_english()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->english().data(), this->english().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->english(), target);
  }

  // required string Chinese = 4;
  if (has_chinese()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chinese().data(), this->chinese().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chinese(), target);
  }

  // required string Japanese = 5;
  if (has_japanese()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->japanese().data(), this->japanese().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->japanese(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Localization_t_Localization::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tbxid = 1;
    if (has_tbxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbxid());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string English = 3;
    if (has_english()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->english());
    }

    // required string Chinese = 4;
    if (has_chinese()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chinese());
    }

    // required string Japanese = 5;
    if (has_japanese()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->japanese());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Localization_t_Localization::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Localization_t_Localization* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Localization_t_Localization*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Localization_t_Localization::MergeFrom(const Localization_t_Localization& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tbxid()) {
      set_tbxid(from.tbxid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_english()) {
      set_english(from.english());
    }
    if (from.has_chinese()) {
      set_chinese(from.chinese());
    }
    if (from.has_japanese()) {
      set_japanese(from.japanese());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Localization_t_Localization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Localization_t_Localization::CopyFrom(const Localization_t_Localization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Localization_t_Localization::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Localization_t_Localization::Swap(Localization_t_Localization* other) {
  if (other != this) {
    std::swap(tbxid_, other->tbxid_);
    std::swap(id_, other->id_);
    std::swap(english_, other->english_);
    std::swap(chinese_, other->chinese_);
    std::swap(japanese_, other->japanese_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Localization_t_Localization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Localization_t_Localization_descriptor_;
  metadata.reflection = Localization_t_Localization_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Localization::kDatasFieldNumber;
#endif  // !_MSC_VER

Localization::Localization()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Localization::InitAsDefaultInstance() {
}

Localization::Localization(const Localization& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Localization::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Localization::~Localization() {
  SharedDtor();
}

void Localization::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Localization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Localization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Localization_descriptor_;
}

const Localization& Localization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Localization_2eproto();
  return *default_instance_;
}

Localization* Localization::default_instance_ = NULL;

Localization* Localization::New() const {
  return new Localization;
}

void Localization::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Localization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Localization.t_Localization datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Localization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Localization.t_Localization datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Localization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Localization.t_Localization datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Localization::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Localization.t_Localization datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Localization::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Localization* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Localization*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Localization::MergeFrom(const Localization& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Localization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Localization::CopyFrom(const Localization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Localization::IsInitialized() const {

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }
  return true;
}

void Localization::Swap(Localization* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Localization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Localization_descriptor_;
  metadata.reflection = Localization_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
