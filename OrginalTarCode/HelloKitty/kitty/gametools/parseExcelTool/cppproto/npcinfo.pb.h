// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npcinfo.proto

#ifndef PROTOBUF_npcinfo_2eproto__INCLUDED
#define PROTOBUF_npcinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_npcinfo_2eproto();
void protobuf_AssignDesc_npcinfo_2eproto();
void protobuf_ShutdownFile_npcinfo_2eproto();

class npcinfo;
class npcinfo_t_npcinfo;

// ===================================================================

class npcinfo_t_npcinfo : public ::google::protobuf::Message {
 public:
  npcinfo_t_npcinfo();
  virtual ~npcinfo_t_npcinfo();

  npcinfo_t_npcinfo(const npcinfo_t_npcinfo& from);

  inline npcinfo_t_npcinfo& operator=(const npcinfo_t_npcinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npcinfo_t_npcinfo& default_instance();

  void Swap(npcinfo_t_npcinfo* other);

  // implements Message ----------------------------------------------

  npcinfo_t_npcinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npcinfo_t_npcinfo& from);
  void MergeFrom(const npcinfo_t_npcinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tbxid = 1;
  inline bool has_tbxid() const;
  inline void clear_tbxid();
  static const int kTbxidFieldNumber = 1;
  inline ::google::protobuf::uint32 tbxid() const;
  inline void set_tbxid(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 pic = 4;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 4;
  inline ::google::protobuf::uint32 pic() const;
  inline void set_pic(::google::protobuf::uint32 value);

  // required uint32 getWay = 5;
  inline bool has_getway() const;
  inline void clear_getway();
  static const int kGetWayFieldNumber = 5;
  inline ::google::protobuf::uint32 getway() const;
  inline void set_getway(::google::protobuf::uint32 value);

  // required uint32 function = 6;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 6;
  inline ::google::protobuf::uint32 function() const;
  inline void set_function(::google::protobuf::uint32 value);

  // required uint32 functionValue = 7;
  inline bool has_functionvalue() const;
  inline void clear_functionvalue();
  static const int kFunctionValueFieldNumber = 7;
  inline ::google::protobuf::uint32 functionvalue() const;
  inline void set_functionvalue(::google::protobuf::uint32 value);

  // required uint32 friendly = 8;
  inline bool has_friendly() const;
  inline void clear_friendly();
  static const int kFriendlyFieldNumber = 8;
  inline ::google::protobuf::uint32 friendly() const;
  inline void set_friendly(::google::protobuf::uint32 value);

  // required uint32 require = 9;
  inline bool has_require() const;
  inline void clear_require();
  static const int kRequireFieldNumber = 9;
  inline ::google::protobuf::uint32 require() const;
  inline void set_require(::google::protobuf::uint32 value);

  // required uint32 missionRequire = 10;
  inline bool has_missionrequire() const;
  inline void clear_missionrequire();
  static const int kMissionRequireFieldNumber = 10;
  inline ::google::protobuf::uint32 missionrequire() const;
  inline void set_missionrequire(::google::protobuf::uint32 value);

  // required uint32 grade = 11;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 11;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // required uint32 describe = 12;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 12;
  inline ::google::protobuf::uint32 describe() const;
  inline void set_describe(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.npcinfo.t_npcinfo)
 private:
  inline void set_has_tbxid();
  inline void clear_has_tbxid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_getway();
  inline void clear_has_getway();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_functionvalue();
  inline void clear_has_functionvalue();
  inline void set_has_friendly();
  inline void clear_has_friendly();
  inline void set_has_require();
  inline void clear_has_require();
  inline void set_has_missionrequire();
  inline void clear_has_missionrequire();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_describe();
  inline void clear_has_describe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tbxid_;
  ::google::protobuf::uint32 id_;
  ::std::string* name_;
  ::google::protobuf::uint32 pic_;
  ::google::protobuf::uint32 getway_;
  ::google::protobuf::uint32 function_;
  ::google::protobuf::uint32 functionvalue_;
  ::google::protobuf::uint32 friendly_;
  ::google::protobuf::uint32 require_;
  ::google::protobuf::uint32 missionrequire_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 describe_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_npcinfo_2eproto();
  friend void protobuf_AssignDesc_npcinfo_2eproto();
  friend void protobuf_ShutdownFile_npcinfo_2eproto();

  void InitAsDefaultInstance();
  static npcinfo_t_npcinfo* default_instance_;
};
// -------------------------------------------------------------------

class npcinfo : public ::google::protobuf::Message {
 public:
  npcinfo();
  virtual ~npcinfo();

  npcinfo(const npcinfo& from);

  inline npcinfo& operator=(const npcinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const npcinfo& default_instance();

  void Swap(npcinfo* other);

  // implements Message ----------------------------------------------

  npcinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const npcinfo& from);
  void MergeFrom(const npcinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef npcinfo_t_npcinfo t_npcinfo;

  // accessors -------------------------------------------------------

  // repeated .pb.npcinfo.t_npcinfo datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::pb::npcinfo_t_npcinfo& datas(int index) const;
  inline ::pb::npcinfo_t_npcinfo* mutable_datas(int index);
  inline ::pb::npcinfo_t_npcinfo* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::npcinfo_t_npcinfo >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::npcinfo_t_npcinfo >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:pb.npcinfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::npcinfo_t_npcinfo > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_npcinfo_2eproto();
  friend void protobuf_AssignDesc_npcinfo_2eproto();
  friend void protobuf_ShutdownFile_npcinfo_2eproto();

  void InitAsDefaultInstance();
  static npcinfo* default_instance_;
};
// ===================================================================


// ===================================================================

// npcinfo_t_npcinfo

// required uint32 tbxid = 1;
inline bool npcinfo_t_npcinfo::has_tbxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_tbxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void npcinfo_t_npcinfo::clear_has_tbxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void npcinfo_t_npcinfo::clear_tbxid() {
  tbxid_ = 0u;
  clear_has_tbxid();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::tbxid() const {
  return tbxid_;
}
inline void npcinfo_t_npcinfo::set_tbxid(::google::protobuf::uint32 value) {
  set_has_tbxid();
  tbxid_ = value;
}

// required uint32 id = 2;
inline bool npcinfo_t_npcinfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void npcinfo_t_npcinfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void npcinfo_t_npcinfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::id() const {
  return id_;
}
inline void npcinfo_t_npcinfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 3;
inline bool npcinfo_t_npcinfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void npcinfo_t_npcinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void npcinfo_t_npcinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& npcinfo_t_npcinfo::name() const {
  return *name_;
}
inline void npcinfo_t_npcinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npcinfo_t_npcinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void npcinfo_t_npcinfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* npcinfo_t_npcinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* npcinfo_t_npcinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void npcinfo_t_npcinfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 pic = 4;
inline bool npcinfo_t_npcinfo::has_pic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_pic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void npcinfo_t_npcinfo::clear_has_pic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void npcinfo_t_npcinfo::clear_pic() {
  pic_ = 0u;
  clear_has_pic();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::pic() const {
  return pic_;
}
inline void npcinfo_t_npcinfo::set_pic(::google::protobuf::uint32 value) {
  set_has_pic();
  pic_ = value;
}

// required uint32 getWay = 5;
inline bool npcinfo_t_npcinfo::has_getway() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_getway() {
  _has_bits_[0] |= 0x00000010u;
}
inline void npcinfo_t_npcinfo::clear_has_getway() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void npcinfo_t_npcinfo::clear_getway() {
  getway_ = 0u;
  clear_has_getway();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::getway() const {
  return getway_;
}
inline void npcinfo_t_npcinfo::set_getway(::google::protobuf::uint32 value) {
  set_has_getway();
  getway_ = value;
}

// required uint32 function = 6;
inline bool npcinfo_t_npcinfo::has_function() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_function() {
  _has_bits_[0] |= 0x00000020u;
}
inline void npcinfo_t_npcinfo::clear_has_function() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void npcinfo_t_npcinfo::clear_function() {
  function_ = 0u;
  clear_has_function();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::function() const {
  return function_;
}
inline void npcinfo_t_npcinfo::set_function(::google::protobuf::uint32 value) {
  set_has_function();
  function_ = value;
}

// required uint32 functionValue = 7;
inline bool npcinfo_t_npcinfo::has_functionvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_functionvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void npcinfo_t_npcinfo::clear_has_functionvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void npcinfo_t_npcinfo::clear_functionvalue() {
  functionvalue_ = 0u;
  clear_has_functionvalue();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::functionvalue() const {
  return functionvalue_;
}
inline void npcinfo_t_npcinfo::set_functionvalue(::google::protobuf::uint32 value) {
  set_has_functionvalue();
  functionvalue_ = value;
}

// required uint32 friendly = 8;
inline bool npcinfo_t_npcinfo::has_friendly() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_friendly() {
  _has_bits_[0] |= 0x00000080u;
}
inline void npcinfo_t_npcinfo::clear_has_friendly() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void npcinfo_t_npcinfo::clear_friendly() {
  friendly_ = 0u;
  clear_has_friendly();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::friendly() const {
  return friendly_;
}
inline void npcinfo_t_npcinfo::set_friendly(::google::protobuf::uint32 value) {
  set_has_friendly();
  friendly_ = value;
}

// required uint32 require = 9;
inline bool npcinfo_t_npcinfo::has_require() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_require() {
  _has_bits_[0] |= 0x00000100u;
}
inline void npcinfo_t_npcinfo::clear_has_require() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void npcinfo_t_npcinfo::clear_require() {
  require_ = 0u;
  clear_has_require();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::require() const {
  return require_;
}
inline void npcinfo_t_npcinfo::set_require(::google::protobuf::uint32 value) {
  set_has_require();
  require_ = value;
}

// required uint32 missionRequire = 10;
inline bool npcinfo_t_npcinfo::has_missionrequire() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_missionrequire() {
  _has_bits_[0] |= 0x00000200u;
}
inline void npcinfo_t_npcinfo::clear_has_missionrequire() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void npcinfo_t_npcinfo::clear_missionrequire() {
  missionrequire_ = 0u;
  clear_has_missionrequire();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::missionrequire() const {
  return missionrequire_;
}
inline void npcinfo_t_npcinfo::set_missionrequire(::google::protobuf::uint32 value) {
  set_has_missionrequire();
  missionrequire_ = value;
}

// required uint32 grade = 11;
inline bool npcinfo_t_npcinfo::has_grade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_grade() {
  _has_bits_[0] |= 0x00000400u;
}
inline void npcinfo_t_npcinfo::clear_has_grade() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void npcinfo_t_npcinfo::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::grade() const {
  return grade_;
}
inline void npcinfo_t_npcinfo::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// required uint32 describe = 12;
inline bool npcinfo_t_npcinfo::has_describe() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void npcinfo_t_npcinfo::set_has_describe() {
  _has_bits_[0] |= 0x00000800u;
}
inline void npcinfo_t_npcinfo::clear_has_describe() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void npcinfo_t_npcinfo::clear_describe() {
  describe_ = 0u;
  clear_has_describe();
}
inline ::google::protobuf::uint32 npcinfo_t_npcinfo::describe() const {
  return describe_;
}
inline void npcinfo_t_npcinfo::set_describe(::google::protobuf::uint32 value) {
  set_has_describe();
  describe_ = value;
}

// -------------------------------------------------------------------

// npcinfo

// repeated .pb.npcinfo.t_npcinfo datas = 1;
inline int npcinfo::datas_size() const {
  return datas_.size();
}
inline void npcinfo::clear_datas() {
  datas_.Clear();
}
inline const ::pb::npcinfo_t_npcinfo& npcinfo::datas(int index) const {
  return datas_.Get(index);
}
inline ::pb::npcinfo_t_npcinfo* npcinfo::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::pb::npcinfo_t_npcinfo* npcinfo::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::npcinfo_t_npcinfo >&
npcinfo::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::npcinfo_t_npcinfo >*
npcinfo::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_npcinfo_2eproto__INCLUDED
