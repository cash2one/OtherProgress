// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* ClientRequestVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequestVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequestLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequestLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLoginFailReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginFailReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSuccessReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSuccessReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginGateway_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginGateway_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequireCreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequireCreateRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpReceiveWorldChatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpReceiveWorldChatCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PhoneType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserPlateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginFailReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginRetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SexType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SwitchType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_login_2eproto() {
  protobuf_AddDesc_login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login.proto");
  GOOGLE_CHECK(file != NULL);
  ClientRequestVersion_descriptor_ = file->message_type(0);
  static const int ClientRequestVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestVersion, clientversion_),
  };
  ClientRequestVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequestVersion_descriptor_,
      ClientRequestVersion::default_instance_,
      ClientRequestVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequestVersion));
  ClientRequestLogin_descriptor_ = file->message_type(1);
  static const int ClientRequestLogin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestLogin, phonetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestLogin, phoneuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestLogin, gamezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestLogin, nettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestLogin, usertype_),
  };
  ClientRequestLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequestLogin_descriptor_,
      ClientRequestLogin::default_instance_,
      ClientRequestLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequestLogin));
  ClientLoginFailReturn_descriptor_ = file->message_type(2);
  static const int ClientLoginFailReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginFailReturn, failreason_),
  };
  ClientLoginFailReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginFailReturn_descriptor_,
      ClientLoginFailReturn::default_instance_,
      ClientLoginFailReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginFailReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginFailReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginFailReturn));
  LoginSuccessReturn_descriptor_ = file->message_type(3);
  static const int LoginSuccessReturn_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccessReturn, logintempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccessReturn, gatewayip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccessReturn, gatewayport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccessReturn, keyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccessReturn, loginret_),
  };
  LoginSuccessReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginSuccessReturn_descriptor_,
      LoginSuccessReturn::default_instance_,
      LoginSuccessReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccessReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccessReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginSuccessReturn));
  LoginGateway_descriptor_ = file->message_type(4);
  static const int LoginGateway_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginGateway, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginGateway, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginGateway, phonetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginGateway, phoneuuid_),
  };
  LoginGateway_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginGateway_descriptor_,
      LoginGateway::default_instance_,
      LoginGateway_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginGateway, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginGateway, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginGateway));
  GameTime_descriptor_ = file->message_type(5);
  static const int GameTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTime, gametime_),
  };
  GameTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTime_descriptor_,
      GameTime::default_instance_,
      GameTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTime));
  UserBaseInfo_descriptor_ = file->message_type(6);
  static const int UserBaseInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, gem_),
  };
  UserBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBaseInfo_descriptor_,
      UserBaseInfo::default_instance_,
      UserBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBaseInfo));
  ReturnUserInfo_descriptor_ = file->message_type(7);
  static const int ReturnUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserInfo, hasuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserInfo, userbase_),
  };
  ReturnUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnUserInfo_descriptor_,
      ReturnUserInfo::default_instance_,
      ReturnUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnUserInfo));
  RequireCreateRole_descriptor_ = file->message_type(8);
  static const int RequireCreateRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireCreateRole, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireCreateRole, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireCreateRole, heroid_),
  };
  RequireCreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequireCreateRole_descriptor_,
      RequireCreateRole::default_instance_,
      RequireCreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireCreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireCreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequireCreateRole));
  OpReceiveWorldChatCmd_descriptor_ = file->message_type(9);
  static const int OpReceiveWorldChatCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReceiveWorldChatCmd, switchflg_),
  };
  OpReceiveWorldChatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpReceiveWorldChatCmd_descriptor_,
      OpReceiveWorldChatCmd::default_instance_,
      OpReceiveWorldChatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReceiveWorldChatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReceiveWorldChatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpReceiveWorldChatCmd));
  PhoneType_descriptor_ = file->enum_type(0);
  NetType_descriptor_ = file->enum_type(1);
  UserPlateType_descriptor_ = file->enum_type(2);
  LoginFailReason_descriptor_ = file->enum_type(3);
  LoginRetType_descriptor_ = file->enum_type(4);
  SexType_descriptor_ = file->enum_type(5);
  SwitchType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequestVersion_descriptor_, &ClientRequestVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequestLogin_descriptor_, &ClientRequestLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginFailReturn_descriptor_, &ClientLoginFailReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginSuccessReturn_descriptor_, &LoginSuccessReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginGateway_descriptor_, &LoginGateway::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTime_descriptor_, &GameTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBaseInfo_descriptor_, &UserBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnUserInfo_descriptor_, &ReturnUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequireCreateRole_descriptor_, &RequireCreateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpReceiveWorldChatCmd_descriptor_, &OpReceiveWorldChatCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login_2eproto() {
  delete ClientRequestVersion::default_instance_;
  delete ClientRequestVersion_reflection_;
  delete ClientRequestLogin::default_instance_;
  delete ClientRequestLogin_reflection_;
  delete ClientLoginFailReturn::default_instance_;
  delete ClientLoginFailReturn_reflection_;
  delete LoginSuccessReturn::default_instance_;
  delete LoginSuccessReturn_reflection_;
  delete LoginGateway::default_instance_;
  delete LoginGateway_reflection_;
  delete GameTime::default_instance_;
  delete GameTime_reflection_;
  delete UserBaseInfo::default_instance_;
  delete UserBaseInfo_reflection_;
  delete ReturnUserInfo::default_instance_;
  delete ReturnUserInfo_reflection_;
  delete RequireCreateRole::default_instance_;
  delete RequireCreateRole_reflection_;
  delete OpReceiveWorldChatCmd::default_instance_;
  delete OpReceiveWorldChatCmd_reflection_;
}

void protobuf_AddDesc_login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013login.proto\022\021HelloKittyMsgData\"-\n\024Clie"
    "ntRequestVersion\022\025\n\rclientVersion\030\001 \002(\r\""
    "\334\001\n\022ClientRequestLogin\022/\n\tphoneType\030\001 \002("
    "\0162\034.HelloKittyMsgData.PhoneType\022\021\n\tphone"
    "Uuid\030\002 \002(\t\022\020\n\010gameZone\030\003 \002(\r\022\017\n\007account\030"
    "\004 \002(\t\022+\n\007netType\030\005 \002(\0162\032.HelloKittyMsgDa"
    "ta.NetType\0222\n\010usertype\030\006 \002(\0162 .HelloKitt"
    "yMsgData.UserPlateType\"O\n\025ClientLoginFai"
    "lReturn\0226\n\nfailReason\030\001 \002(\0162\".HelloKitty"
    "MsgData.LoginFailReason\"\224\001\n\022LoginSuccess"
    "Return\022\023\n\013loginTempID\030\001 \002(\r\022\021\n\tgatewayIP"
    "\030\002 \002(\t\022\023\n\013gatewayPort\030\003 \002(\r\022\016\n\006keyArr\030\004 "
    "\003(\r\0221\n\010loginRet\030\005 \002(\0162\037.HelloKittyMsgDat"
    "a.LoginRetType\"\227\001\n\014LoginGateway\022\017\n\007accou"
    "nt\030\001 \002(\t\0222\n\010usertype\030\002 \002(\0162 .HelloKittyM"
    "sgData.UserPlateType\022/\n\tphoneType\030\003 \002(\0162"
    "\034.HelloKittyMsgData.PhoneType\022\021\n\tphoneUu"
    "id\030\004 \002(\t\"\034\n\010GameTime\022\020\n\010gameTime\030\001 \002(\004\"\214"
    "\001\n\014UserBaseInfo\022\016\n\006charId\030\001 \002(\004\022\014\n\004name\030"
    "\002 \002(\t\022\'\n\003sex\030\003 \002(\0162\032.HelloKittyMsgData.S"
    "exType\022\r\n\005level\030\004 \002(\r\022\013\n\003exp\030\005 \002(\004\022\014\n\004go"
    "ld\030\006 \002(\004\022\013\n\003gem\030\007 \002(\004\"T\n\016ReturnUserInfo\022"
    "\017\n\007hasUser\030\001 \002(\010\0221\n\010userBase\030\002 \002(\0132\037.Hel"
    "loKittyMsgData.UserBaseInfo\"Z\n\021RequireCr"
    "eateRole\022\014\n\004name\030\001 \002(\t\022\'\n\003sex\030\002 \002(\0162\032.He"
    "lloKittyMsgData.SexType\022\016\n\006heroId\030\003 \002(\r\""
    "I\n\025OpReceiveWorldChatCmd\0220\n\tswitchFlg\030\001 "
    "\002(\0162\035.HelloKittyMsgData.SwitchType*$\n\tPh"
    "oneType\022\013\n\007Android\020\000\022\n\n\006Iphone\020\001*\037\n\007NetT"
    "ype\022\010\n\004Tele\020\000\022\n\n\006NetCom\020\001*=\n\rUserPlateTy"
    "pe\022\013\n\007Tencent\020\000\022\t\n\005Baidu\020\001\022\t\n\005Qihoo\020\002\022\t\n"
    "\005Other\020\003*\300\001\n\017LoginFailReason\022\016\n\nAccountO"
    "dd\020\000\022\020\n\014VersionError\020\001\022\016\n\nNormalMain\020\002\022\022"
    "\n\016GatewayNotOpen\020\003\022\014\n\010UserFull\020\004\022\021\n\rSend"
    "ZoneError\020\005\022\013\n\007TimeOut\020\006\022\r\n\tUuidError\020\007\022"
    "\016\n\nNameIllega\020\010\022\r\n\tNameAgain\020\t\022\013\n\007NotRol"
    "e\020\n*$\n\014LoginRetType\022\n\n\006Normal\020\000\022\010\n\004Kick\020"
    "\001*\037\n\007SexType\022\010\n\004Male\020\000\022\n\n\006Female\020\001*!\n\nSw"
    "itchType\022\010\n\004Open\020\000\022\t\n\005Close\020\001", 1549);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.proto", &protobuf_RegisterTypes);
  ClientRequestVersion::default_instance_ = new ClientRequestVersion();
  ClientRequestLogin::default_instance_ = new ClientRequestLogin();
  ClientLoginFailReturn::default_instance_ = new ClientLoginFailReturn();
  LoginSuccessReturn::default_instance_ = new LoginSuccessReturn();
  LoginGateway::default_instance_ = new LoginGateway();
  GameTime::default_instance_ = new GameTime();
  UserBaseInfo::default_instance_ = new UserBaseInfo();
  ReturnUserInfo::default_instance_ = new ReturnUserInfo();
  RequireCreateRole::default_instance_ = new RequireCreateRole();
  OpReceiveWorldChatCmd::default_instance_ = new OpReceiveWorldChatCmd();
  ClientRequestVersion::default_instance_->InitAsDefaultInstance();
  ClientRequestLogin::default_instance_->InitAsDefaultInstance();
  ClientLoginFailReturn::default_instance_->InitAsDefaultInstance();
  LoginSuccessReturn::default_instance_->InitAsDefaultInstance();
  LoginGateway::default_instance_->InitAsDefaultInstance();
  GameTime::default_instance_->InitAsDefaultInstance();
  UserBaseInfo::default_instance_->InitAsDefaultInstance();
  ReturnUserInfo::default_instance_->InitAsDefaultInstance();
  RequireCreateRole::default_instance_->InitAsDefaultInstance();
  OpReceiveWorldChatCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2eproto {
  StaticDescriptorInitializer_login_2eproto() {
    protobuf_AddDesc_login_2eproto();
  }
} static_descriptor_initializer_login_2eproto_;
const ::google::protobuf::EnumDescriptor* PhoneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneType_descriptor_;
}
bool PhoneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetType_descriptor_;
}
bool NetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserPlateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPlateType_descriptor_;
}
bool UserPlateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginFailReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginFailReason_descriptor_;
}
bool LoginFailReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginRetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRetType_descriptor_;
}
bool LoginRetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SexType_descriptor_;
}
bool SexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SwitchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchType_descriptor_;
}
bool SwitchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRequestVersion::kClientVersionFieldNumber;
#endif  // !_MSC_VER

ClientRequestVersion::ClientRequestVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequestVersion::InitAsDefaultInstance() {
}

ClientRequestVersion::ClientRequestVersion(const ClientRequestVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequestVersion::SharedCtor() {
  _cached_size_ = 0;
  clientversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequestVersion::~ClientRequestVersion() {
  SharedDtor();
}

void ClientRequestVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientRequestVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequestVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequestVersion_descriptor_;
}

const ClientRequestVersion& ClientRequestVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ClientRequestVersion* ClientRequestVersion::default_instance_ = NULL;

ClientRequestVersion* ClientRequestVersion::New() const {
  return new ClientRequestVersion;
}

void ClientRequestVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientversion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequestVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequestVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientVersion = 1;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequestVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientVersion = 1;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequestVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientVersion = 1;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequestVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequestVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequestVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequestVersion::MergeFrom(const ClientRequestVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequestVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequestVersion::CopyFrom(const ClientRequestVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequestVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientRequestVersion::Swap(ClientRequestVersion* other) {
  if (other != this) {
    std::swap(clientversion_, other->clientversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequestVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequestVersion_descriptor_;
  metadata.reflection = ClientRequestVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRequestLogin::kPhoneTypeFieldNumber;
const int ClientRequestLogin::kPhoneUuidFieldNumber;
const int ClientRequestLogin::kGameZoneFieldNumber;
const int ClientRequestLogin::kAccountFieldNumber;
const int ClientRequestLogin::kNetTypeFieldNumber;
const int ClientRequestLogin::kUsertypeFieldNumber;
#endif  // !_MSC_VER

ClientRequestLogin::ClientRequestLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequestLogin::InitAsDefaultInstance() {
}

ClientRequestLogin::ClientRequestLogin(const ClientRequestLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequestLogin::SharedCtor() {
  _cached_size_ = 0;
  phonetype_ = 0;
  phoneuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamezone_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nettype_ = 0;
  usertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequestLogin::~ClientRequestLogin() {
  SharedDtor();
}

void ClientRequestLogin::SharedDtor() {
  if (phoneuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete phoneuuid_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ClientRequestLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequestLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequestLogin_descriptor_;
}

const ClientRequestLogin& ClientRequestLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ClientRequestLogin* ClientRequestLogin::default_instance_ = NULL;

ClientRequestLogin* ClientRequestLogin::New() const {
  return new ClientRequestLogin;
}

void ClientRequestLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonetype_ = 0;
    if (has_phoneuuid()) {
      if (phoneuuid_ != &::google::protobuf::internal::kEmptyString) {
        phoneuuid_->clear();
      }
    }
    gamezone_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    nettype_ = 0;
    usertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequestLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.PhoneType phoneType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::PhoneType_IsValid(value)) {
            set_phonetype(static_cast< ::HelloKittyMsgData::PhoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phoneUuid;
        break;
      }

      // required string phoneUuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneUuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phoneuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phoneuuid().data(), this->phoneuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameZone;
        break;
      }

      // required uint32 gameZone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamezone_)));
          set_has_gamezone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // required string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_netType;
        break;
      }

      // required .HelloKittyMsgData.NetType netType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::NetType_IsValid(value)) {
            set_nettype(static_cast< ::HelloKittyMsgData::NetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usertype;
        break;
      }

      // required .HelloKittyMsgData.UserPlateType usertype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usertype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::UserPlateType_IsValid(value)) {
            set_usertype(static_cast< ::HelloKittyMsgData::UserPlateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequestLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.PhoneType phoneType = 1;
  if (has_phonetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phonetype(), output);
  }

  // required string phoneUuid = 2;
  if (has_phoneuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phoneuuid().data(), this->phoneuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phoneuuid(), output);
  }

  // required uint32 gameZone = 3;
  if (has_gamezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gamezone(), output);
  }

  // required string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  // required .HelloKittyMsgData.NetType netType = 5;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->nettype(), output);
  }

  // required .HelloKittyMsgData.UserPlateType usertype = 6;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->usertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequestLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.PhoneType phoneType = 1;
  if (has_phonetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phonetype(), target);
  }

  // required string phoneUuid = 2;
  if (has_phoneuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phoneuuid().data(), this->phoneuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phoneuuid(), target);
  }

  // required uint32 gameZone = 3;
  if (has_gamezone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gamezone(), target);
  }

  // required string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // required .HelloKittyMsgData.NetType netType = 5;
  if (has_nettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->nettype(), target);
  }

  // required .HelloKittyMsgData.UserPlateType usertype = 6;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->usertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequestLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.PhoneType phoneType = 1;
    if (has_phonetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phonetype());
    }

    // required string phoneUuid = 2;
    if (has_phoneuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phoneuuid());
    }

    // required uint32 gameZone = 3;
    if (has_gamezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamezone());
    }

    // required string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required .HelloKittyMsgData.NetType netType = 5;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nettype());
    }

    // required .HelloKittyMsgData.UserPlateType usertype = 6;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequestLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequestLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequestLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequestLogin::MergeFrom(const ClientRequestLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonetype()) {
      set_phonetype(from.phonetype());
    }
    if (from.has_phoneuuid()) {
      set_phoneuuid(from.phoneuuid());
    }
    if (from.has_gamezone()) {
      set_gamezone(from.gamezone());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_nettype()) {
      set_nettype(from.nettype());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequestLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequestLogin::CopyFrom(const ClientRequestLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequestLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ClientRequestLogin::Swap(ClientRequestLogin* other) {
  if (other != this) {
    std::swap(phonetype_, other->phonetype_);
    std::swap(phoneuuid_, other->phoneuuid_);
    std::swap(gamezone_, other->gamezone_);
    std::swap(account_, other->account_);
    std::swap(nettype_, other->nettype_);
    std::swap(usertype_, other->usertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequestLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequestLogin_descriptor_;
  metadata.reflection = ClientRequestLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginFailReturn::kFailReasonFieldNumber;
#endif  // !_MSC_VER

ClientLoginFailReturn::ClientLoginFailReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginFailReturn::InitAsDefaultInstance() {
}

ClientLoginFailReturn::ClientLoginFailReturn(const ClientLoginFailReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginFailReturn::SharedCtor() {
  _cached_size_ = 0;
  failreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginFailReturn::~ClientLoginFailReturn() {
  SharedDtor();
}

void ClientLoginFailReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientLoginFailReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginFailReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginFailReturn_descriptor_;
}

const ClientLoginFailReturn& ClientLoginFailReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ClientLoginFailReturn* ClientLoginFailReturn::default_instance_ = NULL;

ClientLoginFailReturn* ClientLoginFailReturn::New() const {
  return new ClientLoginFailReturn;
}

void ClientLoginFailReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    failreason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginFailReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.LoginFailReason failReason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::LoginFailReason_IsValid(value)) {
            set_failreason(static_cast< ::HelloKittyMsgData::LoginFailReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginFailReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.LoginFailReason failReason = 1;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->failreason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginFailReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.LoginFailReason failReason = 1;
  if (has_failreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->failreason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginFailReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.LoginFailReason failReason = 1;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->failreason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginFailReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginFailReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginFailReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginFailReturn::MergeFrom(const ClientLoginFailReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginFailReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginFailReturn::CopyFrom(const ClientLoginFailReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginFailReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientLoginFailReturn::Swap(ClientLoginFailReturn* other) {
  if (other != this) {
    std::swap(failreason_, other->failreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginFailReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginFailReturn_descriptor_;
  metadata.reflection = ClientLoginFailReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginSuccessReturn::kLoginTempIDFieldNumber;
const int LoginSuccessReturn::kGatewayIPFieldNumber;
const int LoginSuccessReturn::kGatewayPortFieldNumber;
const int LoginSuccessReturn::kKeyArrFieldNumber;
const int LoginSuccessReturn::kLoginRetFieldNumber;
#endif  // !_MSC_VER

LoginSuccessReturn::LoginSuccessReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginSuccessReturn::InitAsDefaultInstance() {
}

LoginSuccessReturn::LoginSuccessReturn(const LoginSuccessReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginSuccessReturn::SharedCtor() {
  _cached_size_ = 0;
  logintempid_ = 0u;
  gatewayip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gatewayport_ = 0u;
  loginret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginSuccessReturn::~LoginSuccessReturn() {
  SharedDtor();
}

void LoginSuccessReturn::SharedDtor() {
  if (gatewayip_ != &::google::protobuf::internal::kEmptyString) {
    delete gatewayip_;
  }
  if (this != default_instance_) {
  }
}

void LoginSuccessReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSuccessReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSuccessReturn_descriptor_;
}

const LoginSuccessReturn& LoginSuccessReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

LoginSuccessReturn* LoginSuccessReturn::default_instance_ = NULL;

LoginSuccessReturn* LoginSuccessReturn::New() const {
  return new LoginSuccessReturn;
}

void LoginSuccessReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logintempid_ = 0u;
    if (has_gatewayip()) {
      if (gatewayip_ != &::google::protobuf::internal::kEmptyString) {
        gatewayip_->clear();
      }
    }
    gatewayport_ = 0u;
    loginret_ = 0;
  }
  keyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginSuccessReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 loginTempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintempid_)));
          set_has_logintempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gatewayIP;
        break;
      }

      // required string gatewayIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gatewayIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gatewayip().data(), this->gatewayip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gatewayPort;
        break;
      }

      // required uint32 gatewayPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatewayPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gatewayport_)));
          set_has_gatewayport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_keyArr;
        break;
      }

      // repeated uint32 keyArr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_keyarr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keyarr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_keyArr;
        if (input->ExpectTag(40)) goto parse_loginRet;
        break;
      }

      // required .HelloKittyMsgData.LoginRetType loginRet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginRet:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::LoginRetType_IsValid(value)) {
            set_loginret(static_cast< ::HelloKittyMsgData::LoginRetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginSuccessReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 loginTempID = 1;
  if (has_logintempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logintempid(), output);
  }

  // required string gatewayIP = 2;
  if (has_gatewayip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gatewayip().data(), this->gatewayip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gatewayip(), output);
  }

  // required uint32 gatewayPort = 3;
  if (has_gatewayport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gatewayport(), output);
  }

  // repeated uint32 keyArr = 4;
  for (int i = 0; i < this->keyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->keyarr(i), output);
  }

  // required .HelloKittyMsgData.LoginRetType loginRet = 5;
  if (has_loginret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->loginret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginSuccessReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 loginTempID = 1;
  if (has_logintempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logintempid(), target);
  }

  // required string gatewayIP = 2;
  if (has_gatewayip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gatewayip().data(), this->gatewayip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gatewayip(), target);
  }

  // required uint32 gatewayPort = 3;
  if (has_gatewayport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gatewayport(), target);
  }

  // repeated uint32 keyArr = 4;
  for (int i = 0; i < this->keyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->keyarr(i), target);
  }

  // required .HelloKittyMsgData.LoginRetType loginRet = 5;
  if (has_loginret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->loginret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginSuccessReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 loginTempID = 1;
    if (has_logintempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintempid());
    }

    // required string gatewayIP = 2;
    if (has_gatewayip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gatewayip());
    }

    // required uint32 gatewayPort = 3;
    if (has_gatewayport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gatewayport());
    }

    // required .HelloKittyMsgData.LoginRetType loginRet = 5;
    if (has_loginret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loginret());
    }

  }
  // repeated uint32 keyArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->keyarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keyarr(i));
    }
    total_size += 1 * this->keyarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSuccessReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginSuccessReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginSuccessReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSuccessReturn::MergeFrom(const LoginSuccessReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyarr_.MergeFrom(from.keyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logintempid()) {
      set_logintempid(from.logintempid());
    }
    if (from.has_gatewayip()) {
      set_gatewayip(from.gatewayip());
    }
    if (from.has_gatewayport()) {
      set_gatewayport(from.gatewayport());
    }
    if (from.has_loginret()) {
      set_loginret(from.loginret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginSuccessReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSuccessReturn::CopyFrom(const LoginSuccessReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSuccessReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void LoginSuccessReturn::Swap(LoginSuccessReturn* other) {
  if (other != this) {
    std::swap(logintempid_, other->logintempid_);
    std::swap(gatewayip_, other->gatewayip_);
    std::swap(gatewayport_, other->gatewayport_);
    keyarr_.Swap(&other->keyarr_);
    std::swap(loginret_, other->loginret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginSuccessReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSuccessReturn_descriptor_;
  metadata.reflection = LoginSuccessReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginGateway::kAccountFieldNumber;
const int LoginGateway::kUsertypeFieldNumber;
const int LoginGateway::kPhoneTypeFieldNumber;
const int LoginGateway::kPhoneUuidFieldNumber;
#endif  // !_MSC_VER

LoginGateway::LoginGateway()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginGateway::InitAsDefaultInstance() {
}

LoginGateway::LoginGateway(const LoginGateway& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginGateway::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usertype_ = 0;
  phonetype_ = 0;
  phoneuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginGateway::~LoginGateway() {
  SharedDtor();
}

void LoginGateway::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (phoneuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete phoneuuid_;
  }
  if (this != default_instance_) {
  }
}

void LoginGateway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginGateway::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginGateway_descriptor_;
}

const LoginGateway& LoginGateway::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

LoginGateway* LoginGateway::default_instance_ = NULL;

LoginGateway* LoginGateway::New() const {
  return new LoginGateway;
}

void LoginGateway::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    usertype_ = 0;
    phonetype_ = 0;
    if (has_phoneuuid()) {
      if (phoneuuid_ != &::google::protobuf::internal::kEmptyString) {
        phoneuuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginGateway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usertype;
        break;
      }

      // required .HelloKittyMsgData.UserPlateType usertype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usertype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::UserPlateType_IsValid(value)) {
            set_usertype(static_cast< ::HelloKittyMsgData::UserPlateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_phoneType;
        break;
      }

      // required .HelloKittyMsgData.PhoneType phoneType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phoneType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::PhoneType_IsValid(value)) {
            set_phonetype(static_cast< ::HelloKittyMsgData::PhoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_phoneUuid;
        break;
      }

      // required string phoneUuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneUuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phoneuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phoneuuid().data(), this->phoneuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginGateway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // required .HelloKittyMsgData.UserPlateType usertype = 2;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->usertype(), output);
  }

  // required .HelloKittyMsgData.PhoneType phoneType = 3;
  if (has_phonetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->phonetype(), output);
  }

  // required string phoneUuid = 4;
  if (has_phoneuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phoneuuid().data(), this->phoneuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->phoneuuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginGateway::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required .HelloKittyMsgData.UserPlateType usertype = 2;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->usertype(), target);
  }

  // required .HelloKittyMsgData.PhoneType phoneType = 3;
  if (has_phonetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->phonetype(), target);
  }

  // required string phoneUuid = 4;
  if (has_phoneuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phoneuuid().data(), this->phoneuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phoneuuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginGateway::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required .HelloKittyMsgData.UserPlateType usertype = 2;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usertype());
    }

    // required .HelloKittyMsgData.PhoneType phoneType = 3;
    if (has_phonetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phonetype());
    }

    // required string phoneUuid = 4;
    if (has_phoneuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phoneuuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginGateway::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginGateway* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginGateway*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginGateway::MergeFrom(const LoginGateway& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_phonetype()) {
      set_phonetype(from.phonetype());
    }
    if (from.has_phoneuuid()) {
      set_phoneuuid(from.phoneuuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginGateway::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginGateway::CopyFrom(const LoginGateway& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginGateway::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LoginGateway::Swap(LoginGateway* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(usertype_, other->usertype_);
    std::swap(phonetype_, other->phonetype_);
    std::swap(phoneuuid_, other->phoneuuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginGateway::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginGateway_descriptor_;
  metadata.reflection = LoginGateway_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTime::kGameTimeFieldNumber;
#endif  // !_MSC_VER

GameTime::GameTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameTime::InitAsDefaultInstance() {
}

GameTime::GameTime(const GameTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameTime::SharedCtor() {
  _cached_size_ = 0;
  gametime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTime::~GameTime() {
  SharedDtor();
}

void GameTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTime_descriptor_;
}

const GameTime& GameTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

GameTime* GameTime::default_instance_ = NULL;

GameTime* GameTime::New() const {
  return new GameTime;
}

void GameTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gameTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gameTime = 1;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gametime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gameTime = 1;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gametime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gameTime = 1;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gametime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameTime::MergeFrom(const GameTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTime::CopyFrom(const GameTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameTime::Swap(GameTime* other) {
  if (other != this) {
    std::swap(gametime_, other->gametime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTime_descriptor_;
  metadata.reflection = GameTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBaseInfo::kCharIdFieldNumber;
const int UserBaseInfo::kNameFieldNumber;
const int UserBaseInfo::kSexFieldNumber;
const int UserBaseInfo::kLevelFieldNumber;
const int UserBaseInfo::kExpFieldNumber;
const int UserBaseInfo::kGoldFieldNumber;
const int UserBaseInfo::kGemFieldNumber;
#endif  // !_MSC_VER

UserBaseInfo::UserBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserBaseInfo::InitAsDefaultInstance() {
}

UserBaseInfo::UserBaseInfo(const UserBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  gold_ = GOOGLE_ULONGLONG(0);
  gem_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBaseInfo::~UserBaseInfo() {
  SharedDtor();
}

void UserBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UserBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBaseInfo_descriptor_;
}

const UserBaseInfo& UserBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

UserBaseInfo* UserBaseInfo::default_instance_ = NULL;

UserBaseInfo* UserBaseInfo::New() const {
  return new UserBaseInfo;
}

void UserBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    gold_ = GOOGLE_ULONGLONG(0);
    gem_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // required .HelloKittyMsgData.SexType sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::SexType_IsValid(value)) {
            set_sex(static_cast< ::HelloKittyMsgData::SexType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // required uint64 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // required uint64 gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gem;
        break;
      }

      // required uint64 gem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required .HelloKittyMsgData.SexType sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sex(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint64 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->exp(), output);
  }

  // required uint64 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gold(), output);
  }

  // required uint64 gem = 7;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->gem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .HelloKittyMsgData.SexType sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sex(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint64 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->exp(), target);
  }

  // required uint64 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gold(), target);
  }

  // required uint64 gem = 7;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->gem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .HelloKittyMsgData.SexType sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint64 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // required uint64 gem = 7;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBaseInfo::MergeFrom(const UserBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_gem()) {
      set_gem(from.gem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBaseInfo::CopyFrom(const UserBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void UserBaseInfo::Swap(UserBaseInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(gem_, other->gem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBaseInfo_descriptor_;
  metadata.reflection = UserBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnUserInfo::kHasUserFieldNumber;
const int ReturnUserInfo::kUserBaseFieldNumber;
#endif  // !_MSC_VER

ReturnUserInfo::ReturnUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnUserInfo::InitAsDefaultInstance() {
  userbase_ = const_cast< ::HelloKittyMsgData::UserBaseInfo*>(&::HelloKittyMsgData::UserBaseInfo::default_instance());
}

ReturnUserInfo::ReturnUserInfo(const ReturnUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnUserInfo::SharedCtor() {
  _cached_size_ = 0;
  hasuser_ = false;
  userbase_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnUserInfo::~ReturnUserInfo() {
  SharedDtor();
}

void ReturnUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userbase_;
  }
}

void ReturnUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnUserInfo_descriptor_;
}

const ReturnUserInfo& ReturnUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ReturnUserInfo* ReturnUserInfo::default_instance_ = NULL;

ReturnUserInfo* ReturnUserInfo::New() const {
  return new ReturnUserInfo;
}

void ReturnUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasuser_ = false;
    if (has_userbase()) {
      if (userbase_ != NULL) userbase_->::HelloKittyMsgData::UserBaseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool hasUser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasuser_)));
          set_has_hasuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userBase;
        break;
      }

      // required .HelloKittyMsgData.UserBaseInfo userBase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userBase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool hasUser = 1;
  if (has_hasuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasuser(), output);
  }

  // required .HelloKittyMsgData.UserBaseInfo userBase = 2;
  if (has_userbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userbase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool hasUser = 1;
  if (has_hasuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasuser(), target);
  }

  // required .HelloKittyMsgData.UserBaseInfo userBase = 2;
  if (has_userbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userbase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool hasUser = 1;
    if (has_hasuser()) {
      total_size += 1 + 1;
    }

    // required .HelloKittyMsgData.UserBaseInfo userBase = 2;
    if (has_userbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userbase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnUserInfo::MergeFrom(const ReturnUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasuser()) {
      set_hasuser(from.hasuser());
    }
    if (from.has_userbase()) {
      mutable_userbase()->::HelloKittyMsgData::UserBaseInfo::MergeFrom(from.userbase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnUserInfo::CopyFrom(const ReturnUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_userbase()) {
    if (!this->userbase().IsInitialized()) return false;
  }
  return true;
}

void ReturnUserInfo::Swap(ReturnUserInfo* other) {
  if (other != this) {
    std::swap(hasuser_, other->hasuser_);
    std::swap(userbase_, other->userbase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnUserInfo_descriptor_;
  metadata.reflection = ReturnUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequireCreateRole::kNameFieldNumber;
const int RequireCreateRole::kSexFieldNumber;
const int RequireCreateRole::kHeroIdFieldNumber;
#endif  // !_MSC_VER

RequireCreateRole::RequireCreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequireCreateRole::InitAsDefaultInstance() {
}

RequireCreateRole::RequireCreateRole(const RequireCreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequireCreateRole::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequireCreateRole::~RequireCreateRole() {
  SharedDtor();
}

void RequireCreateRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RequireCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequireCreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequireCreateRole_descriptor_;
}

const RequireCreateRole& RequireCreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

RequireCreateRole* RequireCreateRole::default_instance_ = NULL;

RequireCreateRole* RequireCreateRole::New() const {
  return new RequireCreateRole;
}

void RequireCreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequireCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // required .HelloKittyMsgData.SexType sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::SexType_IsValid(value)) {
            set_sex(static_cast< ::HelloKittyMsgData::SexType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroId;
        break;
      }

      // required uint32 heroId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequireCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .HelloKittyMsgData.SexType sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sex(), output);
  }

  // required uint32 heroId = 3;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequireCreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .HelloKittyMsgData.SexType sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sex(), target);
  }

  // required uint32 heroId = 3;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequireCreateRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .HelloKittyMsgData.SexType sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // required uint32 heroId = 3;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequireCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequireCreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequireCreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequireCreateRole::MergeFrom(const RequireCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequireCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequireCreateRole::CopyFrom(const RequireCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequireCreateRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequireCreateRole::Swap(RequireCreateRole* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequireCreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequireCreateRole_descriptor_;
  metadata.reflection = RequireCreateRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpReceiveWorldChatCmd::kSwitchFlgFieldNumber;
#endif  // !_MSC_VER

OpReceiveWorldChatCmd::OpReceiveWorldChatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpReceiveWorldChatCmd::InitAsDefaultInstance() {
}

OpReceiveWorldChatCmd::OpReceiveWorldChatCmd(const OpReceiveWorldChatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpReceiveWorldChatCmd::SharedCtor() {
  _cached_size_ = 0;
  switchflg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpReceiveWorldChatCmd::~OpReceiveWorldChatCmd() {
  SharedDtor();
}

void OpReceiveWorldChatCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpReceiveWorldChatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpReceiveWorldChatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpReceiveWorldChatCmd_descriptor_;
}

const OpReceiveWorldChatCmd& OpReceiveWorldChatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

OpReceiveWorldChatCmd* OpReceiveWorldChatCmd::default_instance_ = NULL;

OpReceiveWorldChatCmd* OpReceiveWorldChatCmd::New() const {
  return new OpReceiveWorldChatCmd;
}

void OpReceiveWorldChatCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    switchflg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpReceiveWorldChatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.SwitchType switchFlg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::SwitchType_IsValid(value)) {
            set_switchflg(static_cast< ::HelloKittyMsgData::SwitchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpReceiveWorldChatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.SwitchType switchFlg = 1;
  if (has_switchflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->switchflg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpReceiveWorldChatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.SwitchType switchFlg = 1;
  if (has_switchflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->switchflg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpReceiveWorldChatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.SwitchType switchFlg = 1;
    if (has_switchflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->switchflg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpReceiveWorldChatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpReceiveWorldChatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpReceiveWorldChatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpReceiveWorldChatCmd::MergeFrom(const OpReceiveWorldChatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switchflg()) {
      set_switchflg(from.switchflg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpReceiveWorldChatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpReceiveWorldChatCmd::CopyFrom(const OpReceiveWorldChatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpReceiveWorldChatCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpReceiveWorldChatCmd::Swap(OpReceiveWorldChatCmd* other) {
  if (other != this) {
    std::swap(switchflg_, other->switchflg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpReceiveWorldChatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpReceiveWorldChatCmd_descriptor_;
  metadata.reflection = OpReceiveWorldChatCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
