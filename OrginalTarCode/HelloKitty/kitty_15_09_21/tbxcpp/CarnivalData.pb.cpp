// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarnivalData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarnivalData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* CarnivalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarnivalData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarnivalData_t_CarnivalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarnivalData_t_CarnivalData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarnivalData_2eproto() {
  protobuf_AddDesc_CarnivalData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarnivalData.proto");
  GOOGLE_CHECK(file != NULL);
  CarnivalData_descriptor_ = file->message_type(0);
  static const int CarnivalData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData, datas_),
  };
  CarnivalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarnivalData_descriptor_,
      CarnivalData::default_instance_,
      CarnivalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarnivalData));
  CarnivalData_t_CarnivalData_descriptor_ = CarnivalData_descriptor_->nested_type(0);
  static const int CarnivalData_t_CarnivalData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, tbxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, rewardpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, state1uplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, state2uplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, rewardpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, wrokercdbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, producetimebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, rewardgold_),
  };
  CarnivalData_t_CarnivalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarnivalData_t_CarnivalData_descriptor_,
      CarnivalData_t_CarnivalData::default_instance_,
      CarnivalData_t_CarnivalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalData_t_CarnivalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarnivalData_t_CarnivalData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarnivalData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarnivalData_descriptor_, &CarnivalData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarnivalData_t_CarnivalData_descriptor_, &CarnivalData_t_CarnivalData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarnivalData_2eproto() {
  delete CarnivalData::default_instance_;
  delete CarnivalData_reflection_;
  delete CarnivalData_t_CarnivalData::default_instance_;
  delete CarnivalData_t_CarnivalData_reflection_;
}

void protobuf_AddDesc_CarnivalData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022CarnivalData.proto\022\002pb\"\211\002\n\014CarnivalDat"
    "a\022.\n\005datas\030\001 \003(\0132\037.pb.CarnivalData.t_Car"
    "nivalData\032\310\001\n\016t_CarnivalData\022\r\n\005tbxid\030\001 "
    "\002(\r\022\n\n\002id\030\002 \002(\r\022\023\n\013RewardPoint\030\003 \002(\r\022\025\n\r"
    "State1UpLimit\030\004 \002(\r\022\025\n\rState2UpLimit\030\005 \002"
    "(\r\022\025\n\rRewardPercent\030\006 \002(\001\022\024\n\014WrokerCDBas"
    "e\030\007 \002(\r\022\027\n\017ProduceTimeBase\030\010 \002(\r\022\022\n\nRewa"
    "rdGold\030\t \002(\r", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarnivalData.proto", &protobuf_RegisterTypes);
  CarnivalData::default_instance_ = new CarnivalData();
  CarnivalData_t_CarnivalData::default_instance_ = new CarnivalData_t_CarnivalData();
  CarnivalData::default_instance_->InitAsDefaultInstance();
  CarnivalData_t_CarnivalData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarnivalData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarnivalData_2eproto {
  StaticDescriptorInitializer_CarnivalData_2eproto() {
    protobuf_AddDesc_CarnivalData_2eproto();
  }
} static_descriptor_initializer_CarnivalData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CarnivalData_t_CarnivalData::kTbxidFieldNumber;
const int CarnivalData_t_CarnivalData::kIdFieldNumber;
const int CarnivalData_t_CarnivalData::kRewardPointFieldNumber;
const int CarnivalData_t_CarnivalData::kState1UpLimitFieldNumber;
const int CarnivalData_t_CarnivalData::kState2UpLimitFieldNumber;
const int CarnivalData_t_CarnivalData::kRewardPercentFieldNumber;
const int CarnivalData_t_CarnivalData::kWrokerCDBaseFieldNumber;
const int CarnivalData_t_CarnivalData::kProduceTimeBaseFieldNumber;
const int CarnivalData_t_CarnivalData::kRewardGoldFieldNumber;
#endif  // !_MSC_VER

CarnivalData_t_CarnivalData::CarnivalData_t_CarnivalData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarnivalData_t_CarnivalData::InitAsDefaultInstance() {
}

CarnivalData_t_CarnivalData::CarnivalData_t_CarnivalData(const CarnivalData_t_CarnivalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarnivalData_t_CarnivalData::SharedCtor() {
  _cached_size_ = 0;
  tbxid_ = 0u;
  id_ = 0u;
  rewardpoint_ = 0u;
  state1uplimit_ = 0u;
  state2uplimit_ = 0u;
  rewardpercent_ = 0;
  wrokercdbase_ = 0u;
  producetimebase_ = 0u;
  rewardgold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarnivalData_t_CarnivalData::~CarnivalData_t_CarnivalData() {
  SharedDtor();
}

void CarnivalData_t_CarnivalData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarnivalData_t_CarnivalData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarnivalData_t_CarnivalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarnivalData_t_CarnivalData_descriptor_;
}

const CarnivalData_t_CarnivalData& CarnivalData_t_CarnivalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarnivalData_2eproto();
  return *default_instance_;
}

CarnivalData_t_CarnivalData* CarnivalData_t_CarnivalData::default_instance_ = NULL;

CarnivalData_t_CarnivalData* CarnivalData_t_CarnivalData::New() const {
  return new CarnivalData_t_CarnivalData;
}

void CarnivalData_t_CarnivalData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tbxid_ = 0u;
    id_ = 0u;
    rewardpoint_ = 0u;
    state1uplimit_ = 0u;
    state2uplimit_ = 0u;
    rewardpercent_ = 0;
    wrokercdbase_ = 0u;
    producetimebase_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rewardgold_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarnivalData_t_CarnivalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tbxid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbxid_)));
          set_has_tbxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RewardPoint;
        break;
      }

      // required uint32 RewardPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardpoint_)));
          set_has_rewardpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_State1UpLimit;
        break;
      }

      // required uint32 State1UpLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State1UpLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state1uplimit_)));
          set_has_state1uplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_State2UpLimit;
        break;
      }

      // required uint32 State2UpLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State2UpLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state2uplimit_)));
          set_has_state2uplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_RewardPercent;
        break;
      }

      // required double RewardPercent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RewardPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rewardpercent_)));
          set_has_rewardpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_WrokerCDBase;
        break;
      }

      // required uint32 WrokerCDBase = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WrokerCDBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wrokercdbase_)));
          set_has_wrokercdbase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ProduceTimeBase;
        break;
      }

      // required uint32 ProduceTimeBase = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProduceTimeBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producetimebase_)));
          set_has_producetimebase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_RewardGold;
        break;
      }

      // required uint32 RewardGold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardgold_)));
          set_has_rewardgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarnivalData_t_CarnivalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tbxid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 RewardPoint = 3;
  if (has_rewardpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rewardpoint(), output);
  }

  // required uint32 State1UpLimit = 4;
  if (has_state1uplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state1uplimit(), output);
  }

  // required uint32 State2UpLimit = 5;
  if (has_state2uplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->state2uplimit(), output);
  }

  // required double RewardPercent = 6;
  if (has_rewardpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rewardpercent(), output);
  }

  // required uint32 WrokerCDBase = 7;
  if (has_wrokercdbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->wrokercdbase(), output);
  }

  // required uint32 ProduceTimeBase = 8;
  if (has_producetimebase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->producetimebase(), output);
  }

  // required uint32 RewardGold = 9;
  if (has_rewardgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rewardgold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarnivalData_t_CarnivalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tbxid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 RewardPoint = 3;
  if (has_rewardpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rewardpoint(), target);
  }

  // required uint32 State1UpLimit = 4;
  if (has_state1uplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state1uplimit(), target);
  }

  // required uint32 State2UpLimit = 5;
  if (has_state2uplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->state2uplimit(), target);
  }

  // required double RewardPercent = 6;
  if (has_rewardpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rewardpercent(), target);
  }

  // required uint32 WrokerCDBase = 7;
  if (has_wrokercdbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->wrokercdbase(), target);
  }

  // required uint32 ProduceTimeBase = 8;
  if (has_producetimebase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->producetimebase(), target);
  }

  // required uint32 RewardGold = 9;
  if (has_rewardgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rewardgold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarnivalData_t_CarnivalData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tbxid = 1;
    if (has_tbxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbxid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 RewardPoint = 3;
    if (has_rewardpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardpoint());
    }

    // required uint32 State1UpLimit = 4;
    if (has_state1uplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state1uplimit());
    }

    // required uint32 State2UpLimit = 5;
    if (has_state2uplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state2uplimit());
    }

    // required double RewardPercent = 6;
    if (has_rewardpercent()) {
      total_size += 1 + 8;
    }

    // required uint32 WrokerCDBase = 7;
    if (has_wrokercdbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wrokercdbase());
    }

    // required uint32 ProduceTimeBase = 8;
    if (has_producetimebase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producetimebase());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 RewardGold = 9;
    if (has_rewardgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardgold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarnivalData_t_CarnivalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarnivalData_t_CarnivalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarnivalData_t_CarnivalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarnivalData_t_CarnivalData::MergeFrom(const CarnivalData_t_CarnivalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tbxid()) {
      set_tbxid(from.tbxid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rewardpoint()) {
      set_rewardpoint(from.rewardpoint());
    }
    if (from.has_state1uplimit()) {
      set_state1uplimit(from.state1uplimit());
    }
    if (from.has_state2uplimit()) {
      set_state2uplimit(from.state2uplimit());
    }
    if (from.has_rewardpercent()) {
      set_rewardpercent(from.rewardpercent());
    }
    if (from.has_wrokercdbase()) {
      set_wrokercdbase(from.wrokercdbase());
    }
    if (from.has_producetimebase()) {
      set_producetimebase(from.producetimebase());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rewardgold()) {
      set_rewardgold(from.rewardgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarnivalData_t_CarnivalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarnivalData_t_CarnivalData::CopyFrom(const CarnivalData_t_CarnivalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarnivalData_t_CarnivalData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void CarnivalData_t_CarnivalData::Swap(CarnivalData_t_CarnivalData* other) {
  if (other != this) {
    std::swap(tbxid_, other->tbxid_);
    std::swap(id_, other->id_);
    std::swap(rewardpoint_, other->rewardpoint_);
    std::swap(state1uplimit_, other->state1uplimit_);
    std::swap(state2uplimit_, other->state2uplimit_);
    std::swap(rewardpercent_, other->rewardpercent_);
    std::swap(wrokercdbase_, other->wrokercdbase_);
    std::swap(producetimebase_, other->producetimebase_);
    std::swap(rewardgold_, other->rewardgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarnivalData_t_CarnivalData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarnivalData_t_CarnivalData_descriptor_;
  metadata.reflection = CarnivalData_t_CarnivalData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CarnivalData::kDatasFieldNumber;
#endif  // !_MSC_VER

CarnivalData::CarnivalData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarnivalData::InitAsDefaultInstance() {
}

CarnivalData::CarnivalData(const CarnivalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarnivalData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarnivalData::~CarnivalData() {
  SharedDtor();
}

void CarnivalData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarnivalData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarnivalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarnivalData_descriptor_;
}

const CarnivalData& CarnivalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarnivalData_2eproto();
  return *default_instance_;
}

CarnivalData* CarnivalData::default_instance_ = NULL;

CarnivalData* CarnivalData::New() const {
  return new CarnivalData;
}

void CarnivalData::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarnivalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CarnivalData.t_CarnivalData datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarnivalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.CarnivalData.t_CarnivalData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarnivalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.CarnivalData.t_CarnivalData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarnivalData::ByteSize() const {
  int total_size = 0;

  // repeated .pb.CarnivalData.t_CarnivalData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarnivalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarnivalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarnivalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarnivalData::MergeFrom(const CarnivalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarnivalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarnivalData::CopyFrom(const CarnivalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarnivalData::IsInitialized() const {

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }
  return true;
}

void CarnivalData::Swap(CarnivalData* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarnivalData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarnivalData_descriptor_;
  metadata.reflection = CarnivalData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
