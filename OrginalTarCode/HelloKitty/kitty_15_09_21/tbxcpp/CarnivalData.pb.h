// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarnivalData.proto

#ifndef PROTOBUF_CarnivalData_2eproto__INCLUDED
#define PROTOBUF_CarnivalData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CarnivalData_2eproto();
void protobuf_AssignDesc_CarnivalData_2eproto();
void protobuf_ShutdownFile_CarnivalData_2eproto();

class CarnivalData;
class CarnivalData_t_CarnivalData;

// ===================================================================

class CarnivalData_t_CarnivalData : public ::google::protobuf::Message {
 public:
  CarnivalData_t_CarnivalData();
  virtual ~CarnivalData_t_CarnivalData();

  CarnivalData_t_CarnivalData(const CarnivalData_t_CarnivalData& from);

  inline CarnivalData_t_CarnivalData& operator=(const CarnivalData_t_CarnivalData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarnivalData_t_CarnivalData& default_instance();

  void Swap(CarnivalData_t_CarnivalData* other);

  // implements Message ----------------------------------------------

  CarnivalData_t_CarnivalData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CarnivalData_t_CarnivalData& from);
  void MergeFrom(const CarnivalData_t_CarnivalData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tbxid = 1;
  inline bool has_tbxid() const;
  inline void clear_tbxid();
  static const int kTbxidFieldNumber = 1;
  inline ::google::protobuf::uint32 tbxid() const;
  inline void set_tbxid(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 RewardPoint = 3;
  inline bool has_rewardpoint() const;
  inline void clear_rewardpoint();
  static const int kRewardPointFieldNumber = 3;
  inline ::google::protobuf::uint32 rewardpoint() const;
  inline void set_rewardpoint(::google::protobuf::uint32 value);

  // required uint32 State1UpLimit = 4;
  inline bool has_state1uplimit() const;
  inline void clear_state1uplimit();
  static const int kState1UpLimitFieldNumber = 4;
  inline ::google::protobuf::uint32 state1uplimit() const;
  inline void set_state1uplimit(::google::protobuf::uint32 value);

  // required uint32 State2UpLimit = 5;
  inline bool has_state2uplimit() const;
  inline void clear_state2uplimit();
  static const int kState2UpLimitFieldNumber = 5;
  inline ::google::protobuf::uint32 state2uplimit() const;
  inline void set_state2uplimit(::google::protobuf::uint32 value);

  // required double RewardPercent = 6;
  inline bool has_rewardpercent() const;
  inline void clear_rewardpercent();
  static const int kRewardPercentFieldNumber = 6;
  inline double rewardpercent() const;
  inline void set_rewardpercent(double value);

  // required uint32 WrokerCDBase = 7;
  inline bool has_wrokercdbase() const;
  inline void clear_wrokercdbase();
  static const int kWrokerCDBaseFieldNumber = 7;
  inline ::google::protobuf::uint32 wrokercdbase() const;
  inline void set_wrokercdbase(::google::protobuf::uint32 value);

  // required uint32 ProduceTimeBase = 8;
  inline bool has_producetimebase() const;
  inline void clear_producetimebase();
  static const int kProduceTimeBaseFieldNumber = 8;
  inline ::google::protobuf::uint32 producetimebase() const;
  inline void set_producetimebase(::google::protobuf::uint32 value);

  // required uint32 RewardGold = 9;
  inline bool has_rewardgold() const;
  inline void clear_rewardgold();
  static const int kRewardGoldFieldNumber = 9;
  inline ::google::protobuf::uint32 rewardgold() const;
  inline void set_rewardgold(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.CarnivalData.t_CarnivalData)
 private:
  inline void set_has_tbxid();
  inline void clear_has_tbxid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rewardpoint();
  inline void clear_has_rewardpoint();
  inline void set_has_state1uplimit();
  inline void clear_has_state1uplimit();
  inline void set_has_state2uplimit();
  inline void clear_has_state2uplimit();
  inline void set_has_rewardpercent();
  inline void clear_has_rewardpercent();
  inline void set_has_wrokercdbase();
  inline void clear_has_wrokercdbase();
  inline void set_has_producetimebase();
  inline void clear_has_producetimebase();
  inline void set_has_rewardgold();
  inline void clear_has_rewardgold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tbxid_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 rewardpoint_;
  ::google::protobuf::uint32 state1uplimit_;
  double rewardpercent_;
  ::google::protobuf::uint32 state2uplimit_;
  ::google::protobuf::uint32 wrokercdbase_;
  ::google::protobuf::uint32 producetimebase_;
  ::google::protobuf::uint32 rewardgold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_CarnivalData_2eproto();
  friend void protobuf_AssignDesc_CarnivalData_2eproto();
  friend void protobuf_ShutdownFile_CarnivalData_2eproto();

  void InitAsDefaultInstance();
  static CarnivalData_t_CarnivalData* default_instance_;
};
// -------------------------------------------------------------------

class CarnivalData : public ::google::protobuf::Message {
 public:
  CarnivalData();
  virtual ~CarnivalData();

  CarnivalData(const CarnivalData& from);

  inline CarnivalData& operator=(const CarnivalData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarnivalData& default_instance();

  void Swap(CarnivalData* other);

  // implements Message ----------------------------------------------

  CarnivalData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CarnivalData& from);
  void MergeFrom(const CarnivalData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CarnivalData_t_CarnivalData t_CarnivalData;

  // accessors -------------------------------------------------------

  // repeated .pb.CarnivalData.t_CarnivalData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::pb::CarnivalData_t_CarnivalData& datas(int index) const;
  inline ::pb::CarnivalData_t_CarnivalData* mutable_datas(int index);
  inline ::pb::CarnivalData_t_CarnivalData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CarnivalData_t_CarnivalData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CarnivalData_t_CarnivalData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:pb.CarnivalData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::CarnivalData_t_CarnivalData > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CarnivalData_2eproto();
  friend void protobuf_AssignDesc_CarnivalData_2eproto();
  friend void protobuf_ShutdownFile_CarnivalData_2eproto();

  void InitAsDefaultInstance();
  static CarnivalData* default_instance_;
};
// ===================================================================


// ===================================================================

// CarnivalData_t_CarnivalData

// required uint32 tbxid = 1;
inline bool CarnivalData_t_CarnivalData::has_tbxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CarnivalData_t_CarnivalData::set_has_tbxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CarnivalData_t_CarnivalData::clear_has_tbxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CarnivalData_t_CarnivalData::clear_tbxid() {
  tbxid_ = 0u;
  clear_has_tbxid();
}
inline ::google::protobuf::uint32 CarnivalData_t_CarnivalData::tbxid() const {
  return tbxid_;
}
inline void CarnivalData_t_CarnivalData::set_tbxid(::google::protobuf::uint32 value) {
  set_has_tbxid();
  tbxid_ = value;
}

// required uint32 id = 2;
inline bool CarnivalData_t_CarnivalData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CarnivalData_t_CarnivalData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CarnivalData_t_CarnivalData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CarnivalData_t_CarnivalData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CarnivalData_t_CarnivalData::id() const {
  return id_;
}
inline void CarnivalData_t_CarnivalData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 RewardPoint = 3;
inline bool CarnivalData_t_CarnivalData::has_rewardpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CarnivalData_t_CarnivalData::set_has_rewardpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CarnivalData_t_CarnivalData::clear_has_rewardpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CarnivalData_t_CarnivalData::clear_rewardpoint() {
  rewardpoint_ = 0u;
  clear_has_rewardpoint();
}
inline ::google::protobuf::uint32 CarnivalData_t_CarnivalData::rewardpoint() const {
  return rewardpoint_;
}
inline void CarnivalData_t_CarnivalData::set_rewardpoint(::google::protobuf::uint32 value) {
  set_has_rewardpoint();
  rewardpoint_ = value;
}

// required uint32 State1UpLimit = 4;
inline bool CarnivalData_t_CarnivalData::has_state1uplimit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CarnivalData_t_CarnivalData::set_has_state1uplimit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CarnivalData_t_CarnivalData::clear_has_state1uplimit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CarnivalData_t_CarnivalData::clear_state1uplimit() {
  state1uplimit_ = 0u;
  clear_has_state1uplimit();
}
inline ::google::protobuf::uint32 CarnivalData_t_CarnivalData::state1uplimit() const {
  return state1uplimit_;
}
inline void CarnivalData_t_CarnivalData::set_state1uplimit(::google::protobuf::uint32 value) {
  set_has_state1uplimit();
  state1uplimit_ = value;
}

// required uint32 State2UpLimit = 5;
inline bool CarnivalData_t_CarnivalData::has_state2uplimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CarnivalData_t_CarnivalData::set_has_state2uplimit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CarnivalData_t_CarnivalData::clear_has_state2uplimit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CarnivalData_t_CarnivalData::clear_state2uplimit() {
  state2uplimit_ = 0u;
  clear_has_state2uplimit();
}
inline ::google::protobuf::uint32 CarnivalData_t_CarnivalData::state2uplimit() const {
  return state2uplimit_;
}
inline void CarnivalData_t_CarnivalData::set_state2uplimit(::google::protobuf::uint32 value) {
  set_has_state2uplimit();
  state2uplimit_ = value;
}

// required double RewardPercent = 6;
inline bool CarnivalData_t_CarnivalData::has_rewardpercent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CarnivalData_t_CarnivalData::set_has_rewardpercent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CarnivalData_t_CarnivalData::clear_has_rewardpercent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CarnivalData_t_CarnivalData::clear_rewardpercent() {
  rewardpercent_ = 0;
  clear_has_rewardpercent();
}
inline double CarnivalData_t_CarnivalData::rewardpercent() const {
  return rewardpercent_;
}
inline void CarnivalData_t_CarnivalData::set_rewardpercent(double value) {
  set_has_rewardpercent();
  rewardpercent_ = value;
}

// required uint32 WrokerCDBase = 7;
inline bool CarnivalData_t_CarnivalData::has_wrokercdbase() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CarnivalData_t_CarnivalData::set_has_wrokercdbase() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CarnivalData_t_CarnivalData::clear_has_wrokercdbase() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CarnivalData_t_CarnivalData::clear_wrokercdbase() {
  wrokercdbase_ = 0u;
  clear_has_wrokercdbase();
}
inline ::google::protobuf::uint32 CarnivalData_t_CarnivalData::wrokercdbase() const {
  return wrokercdbase_;
}
inline void CarnivalData_t_CarnivalData::set_wrokercdbase(::google::protobuf::uint32 value) {
  set_has_wrokercdbase();
  wrokercdbase_ = value;
}

// required uint32 ProduceTimeBase = 8;
inline bool CarnivalData_t_CarnivalData::has_producetimebase() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CarnivalData_t_CarnivalData::set_has_producetimebase() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CarnivalData_t_CarnivalData::clear_has_producetimebase() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CarnivalData_t_CarnivalData::clear_producetimebase() {
  producetimebase_ = 0u;
  clear_has_producetimebase();
}
inline ::google::protobuf::uint32 CarnivalData_t_CarnivalData::producetimebase() const {
  return producetimebase_;
}
inline void CarnivalData_t_CarnivalData::set_producetimebase(::google::protobuf::uint32 value) {
  set_has_producetimebase();
  producetimebase_ = value;
}

// required uint32 RewardGold = 9;
inline bool CarnivalData_t_CarnivalData::has_rewardgold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CarnivalData_t_CarnivalData::set_has_rewardgold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CarnivalData_t_CarnivalData::clear_has_rewardgold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CarnivalData_t_CarnivalData::clear_rewardgold() {
  rewardgold_ = 0u;
  clear_has_rewardgold();
}
inline ::google::protobuf::uint32 CarnivalData_t_CarnivalData::rewardgold() const {
  return rewardgold_;
}
inline void CarnivalData_t_CarnivalData::set_rewardgold(::google::protobuf::uint32 value) {
  set_has_rewardgold();
  rewardgold_ = value;
}

// -------------------------------------------------------------------

// CarnivalData

// repeated .pb.CarnivalData.t_CarnivalData datas = 1;
inline int CarnivalData::datas_size() const {
  return datas_.size();
}
inline void CarnivalData::clear_datas() {
  datas_.Clear();
}
inline const ::pb::CarnivalData_t_CarnivalData& CarnivalData::datas(int index) const {
  return datas_.Get(index);
}
inline ::pb::CarnivalData_t_CarnivalData* CarnivalData::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::pb::CarnivalData_t_CarnivalData* CarnivalData::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CarnivalData_t_CarnivalData >&
CarnivalData::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CarnivalData_t_CarnivalData >*
CarnivalData::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CarnivalData_2eproto__INCLUDED
