// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BurstEventReward.proto

#ifndef PROTOBUF_BurstEventReward_2eproto__INCLUDED
#define PROTOBUF_BurstEventReward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BurstEventReward_2eproto();
void protobuf_AssignDesc_BurstEventReward_2eproto();
void protobuf_ShutdownFile_BurstEventReward_2eproto();

class BurstEventReward;
class BurstEventReward_t_BurstEventReward;

// ===================================================================

class BurstEventReward_t_BurstEventReward : public ::google::protobuf::Message {
 public:
  BurstEventReward_t_BurstEventReward();
  virtual ~BurstEventReward_t_BurstEventReward();

  BurstEventReward_t_BurstEventReward(const BurstEventReward_t_BurstEventReward& from);

  inline BurstEventReward_t_BurstEventReward& operator=(const BurstEventReward_t_BurstEventReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BurstEventReward_t_BurstEventReward& default_instance();

  void Swap(BurstEventReward_t_BurstEventReward* other);

  // implements Message ----------------------------------------------

  BurstEventReward_t_BurstEventReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BurstEventReward_t_BurstEventReward& from);
  void MergeFrom(const BurstEventReward_t_BurstEventReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tbxid = 1;
  inline bool has_tbxid() const;
  inline void clear_tbxid();
  static const int kTbxidFieldNumber = 1;
  inline ::google::protobuf::uint32 tbxid() const;
  inline void set_tbxid(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string needitem = 3;
  inline bool has_needitem() const;
  inline void clear_needitem();
  static const int kNeeditemFieldNumber = 3;
  inline const ::std::string& needitem() const;
  inline void set_needitem(const ::std::string& value);
  inline void set_needitem(const char* value);
  inline void set_needitem(const char* value, size_t size);
  inline ::std::string* mutable_needitem();
  inline ::std::string* release_needitem();
  inline void set_allocated_needitem(::std::string* needitem);

  // required string reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // required uint32 levelgrade = 5;
  inline bool has_levelgrade() const;
  inline void clear_levelgrade();
  static const int kLevelgradeFieldNumber = 5;
  inline ::google::protobuf::uint32 levelgrade() const;
  inline void set_levelgrade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.BurstEventReward.t_BurstEventReward)
 private:
  inline void set_has_tbxid();
  inline void clear_has_tbxid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_needitem();
  inline void clear_has_needitem();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_levelgrade();
  inline void clear_has_levelgrade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tbxid_;
  ::google::protobuf::uint32 id_;
  ::std::string* needitem_;
  ::std::string* reward_;
  ::google::protobuf::uint32 levelgrade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_BurstEventReward_2eproto();
  friend void protobuf_AssignDesc_BurstEventReward_2eproto();
  friend void protobuf_ShutdownFile_BurstEventReward_2eproto();

  void InitAsDefaultInstance();
  static BurstEventReward_t_BurstEventReward* default_instance_;
};
// -------------------------------------------------------------------

class BurstEventReward : public ::google::protobuf::Message {
 public:
  BurstEventReward();
  virtual ~BurstEventReward();

  BurstEventReward(const BurstEventReward& from);

  inline BurstEventReward& operator=(const BurstEventReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BurstEventReward& default_instance();

  void Swap(BurstEventReward* other);

  // implements Message ----------------------------------------------

  BurstEventReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BurstEventReward& from);
  void MergeFrom(const BurstEventReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BurstEventReward_t_BurstEventReward t_BurstEventReward;

  // accessors -------------------------------------------------------

  // repeated .pb.BurstEventReward.t_BurstEventReward datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::pb::BurstEventReward_t_BurstEventReward& datas(int index) const;
  inline ::pb::BurstEventReward_t_BurstEventReward* mutable_datas(int index);
  inline ::pb::BurstEventReward_t_BurstEventReward* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BurstEventReward_t_BurstEventReward >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BurstEventReward_t_BurstEventReward >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:pb.BurstEventReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::BurstEventReward_t_BurstEventReward > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BurstEventReward_2eproto();
  friend void protobuf_AssignDesc_BurstEventReward_2eproto();
  friend void protobuf_ShutdownFile_BurstEventReward_2eproto();

  void InitAsDefaultInstance();
  static BurstEventReward* default_instance_;
};
// ===================================================================


// ===================================================================

// BurstEventReward_t_BurstEventReward

// required uint32 tbxid = 1;
inline bool BurstEventReward_t_BurstEventReward::has_tbxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BurstEventReward_t_BurstEventReward::set_has_tbxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BurstEventReward_t_BurstEventReward::clear_has_tbxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BurstEventReward_t_BurstEventReward::clear_tbxid() {
  tbxid_ = 0u;
  clear_has_tbxid();
}
inline ::google::protobuf::uint32 BurstEventReward_t_BurstEventReward::tbxid() const {
  return tbxid_;
}
inline void BurstEventReward_t_BurstEventReward::set_tbxid(::google::protobuf::uint32 value) {
  set_has_tbxid();
  tbxid_ = value;
}

// required uint32 id = 2;
inline bool BurstEventReward_t_BurstEventReward::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BurstEventReward_t_BurstEventReward::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BurstEventReward_t_BurstEventReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BurstEventReward_t_BurstEventReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BurstEventReward_t_BurstEventReward::id() const {
  return id_;
}
inline void BurstEventReward_t_BurstEventReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string needitem = 3;
inline bool BurstEventReward_t_BurstEventReward::has_needitem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BurstEventReward_t_BurstEventReward::set_has_needitem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BurstEventReward_t_BurstEventReward::clear_has_needitem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BurstEventReward_t_BurstEventReward::clear_needitem() {
  if (needitem_ != &::google::protobuf::internal::kEmptyString) {
    needitem_->clear();
  }
  clear_has_needitem();
}
inline const ::std::string& BurstEventReward_t_BurstEventReward::needitem() const {
  return *needitem_;
}
inline void BurstEventReward_t_BurstEventReward::set_needitem(const ::std::string& value) {
  set_has_needitem();
  if (needitem_ == &::google::protobuf::internal::kEmptyString) {
    needitem_ = new ::std::string;
  }
  needitem_->assign(value);
}
inline void BurstEventReward_t_BurstEventReward::set_needitem(const char* value) {
  set_has_needitem();
  if (needitem_ == &::google::protobuf::internal::kEmptyString) {
    needitem_ = new ::std::string;
  }
  needitem_->assign(value);
}
inline void BurstEventReward_t_BurstEventReward::set_needitem(const char* value, size_t size) {
  set_has_needitem();
  if (needitem_ == &::google::protobuf::internal::kEmptyString) {
    needitem_ = new ::std::string;
  }
  needitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BurstEventReward_t_BurstEventReward::mutable_needitem() {
  set_has_needitem();
  if (needitem_ == &::google::protobuf::internal::kEmptyString) {
    needitem_ = new ::std::string;
  }
  return needitem_;
}
inline ::std::string* BurstEventReward_t_BurstEventReward::release_needitem() {
  clear_has_needitem();
  if (needitem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = needitem_;
    needitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BurstEventReward_t_BurstEventReward::set_allocated_needitem(::std::string* needitem) {
  if (needitem_ != &::google::protobuf::internal::kEmptyString) {
    delete needitem_;
  }
  if (needitem) {
    set_has_needitem();
    needitem_ = needitem;
  } else {
    clear_has_needitem();
    needitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string reward = 4;
inline bool BurstEventReward_t_BurstEventReward::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BurstEventReward_t_BurstEventReward::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BurstEventReward_t_BurstEventReward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BurstEventReward_t_BurstEventReward::clear_reward() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& BurstEventReward_t_BurstEventReward::reward() const {
  return *reward_;
}
inline void BurstEventReward_t_BurstEventReward::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void BurstEventReward_t_BurstEventReward::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void BurstEventReward_t_BurstEventReward::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BurstEventReward_t_BurstEventReward::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  return reward_;
}
inline ::std::string* BurstEventReward_t_BurstEventReward::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BurstEventReward_t_BurstEventReward::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 levelgrade = 5;
inline bool BurstEventReward_t_BurstEventReward::has_levelgrade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BurstEventReward_t_BurstEventReward::set_has_levelgrade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BurstEventReward_t_BurstEventReward::clear_has_levelgrade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BurstEventReward_t_BurstEventReward::clear_levelgrade() {
  levelgrade_ = 0u;
  clear_has_levelgrade();
}
inline ::google::protobuf::uint32 BurstEventReward_t_BurstEventReward::levelgrade() const {
  return levelgrade_;
}
inline void BurstEventReward_t_BurstEventReward::set_levelgrade(::google::protobuf::uint32 value) {
  set_has_levelgrade();
  levelgrade_ = value;
}

// -------------------------------------------------------------------

// BurstEventReward

// repeated .pb.BurstEventReward.t_BurstEventReward datas = 1;
inline int BurstEventReward::datas_size() const {
  return datas_.size();
}
inline void BurstEventReward::clear_datas() {
  datas_.Clear();
}
inline const ::pb::BurstEventReward_t_BurstEventReward& BurstEventReward::datas(int index) const {
  return datas_.Get(index);
}
inline ::pb::BurstEventReward_t_BurstEventReward* BurstEventReward::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::pb::BurstEventReward_t_BurstEventReward* BurstEventReward::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BurstEventReward_t_BurstEventReward >&
BurstEventReward::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BurstEventReward_t_BurstEventReward >*
BurstEventReward::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BurstEventReward_2eproto__INCLUDED
