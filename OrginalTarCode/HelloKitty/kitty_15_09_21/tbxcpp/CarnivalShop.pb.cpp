// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarnivalShop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarnivalShop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* CarnivalShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarnivalShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarnivalShop_t_CarnivalShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarnivalShop_t_CarnivalShop_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarnivalShop_2eproto() {
  protobuf_AddDesc_CarnivalShop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarnivalShop.proto");
  GOOGLE_CHECK(file != NULL);
  CarnivalShop_descriptor_ = file->message_type(0);
  static const int CarnivalShop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop, datas_),
  };
  CarnivalShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarnivalShop_descriptor_,
      CarnivalShop::default_instance_,
      CarnivalShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarnivalShop));
  CarnivalShop_t_CarnivalShop_descriptor_ = CarnivalShop_descriptor_->nested_type(0);
  static const int CarnivalShop_t_CarnivalShop_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop_t_CarnivalShop, tbxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop_t_CarnivalShop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop_t_CarnivalShop, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop_t_CarnivalShop, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop_t_CarnivalShop, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop_t_CarnivalShop, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop_t_CarnivalShop, point_),
  };
  CarnivalShop_t_CarnivalShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarnivalShop_t_CarnivalShop_descriptor_,
      CarnivalShop_t_CarnivalShop::default_instance_,
      CarnivalShop_t_CarnivalShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop_t_CarnivalShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShop_t_CarnivalShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarnivalShop_t_CarnivalShop));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarnivalShop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarnivalShop_descriptor_, &CarnivalShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarnivalShop_t_CarnivalShop_descriptor_, &CarnivalShop_t_CarnivalShop::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarnivalShop_2eproto() {
  delete CarnivalShop::default_instance_;
  delete CarnivalShop_reflection_;
  delete CarnivalShop_t_CarnivalShop::default_instance_;
  delete CarnivalShop_t_CarnivalShop_reflection_;
}

void protobuf_AddDesc_CarnivalShop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022CarnivalShop.proto\022\002pb\"\274\001\n\014CarnivalSho"
    "p\022.\n\005datas\030\001 \003(\0132\037.pb.CarnivalShop.t_Car"
    "nivalShop\032|\n\016t_CarnivalShop\022\r\n\005tbxid\030\001 \002"
    "(\r\022\n\n\002id\030\002 \002(\r\022\016\n\006weight\030\003 \002(\t\022\020\n\010discou"
    "nt\030\004 \002(\r\022\020\n\010lasttime\030\005 \002(\r\022\014\n\004icon\030\006 \002(\r"
    "\022\r\n\005point\030\007 \002(\t", 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarnivalShop.proto", &protobuf_RegisterTypes);
  CarnivalShop::default_instance_ = new CarnivalShop();
  CarnivalShop_t_CarnivalShop::default_instance_ = new CarnivalShop_t_CarnivalShop();
  CarnivalShop::default_instance_->InitAsDefaultInstance();
  CarnivalShop_t_CarnivalShop::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarnivalShop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarnivalShop_2eproto {
  StaticDescriptorInitializer_CarnivalShop_2eproto() {
    protobuf_AddDesc_CarnivalShop_2eproto();
  }
} static_descriptor_initializer_CarnivalShop_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CarnivalShop_t_CarnivalShop::kTbxidFieldNumber;
const int CarnivalShop_t_CarnivalShop::kIdFieldNumber;
const int CarnivalShop_t_CarnivalShop::kWeightFieldNumber;
const int CarnivalShop_t_CarnivalShop::kDiscountFieldNumber;
const int CarnivalShop_t_CarnivalShop::kLasttimeFieldNumber;
const int CarnivalShop_t_CarnivalShop::kIconFieldNumber;
const int CarnivalShop_t_CarnivalShop::kPointFieldNumber;
#endif  // !_MSC_VER

CarnivalShop_t_CarnivalShop::CarnivalShop_t_CarnivalShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarnivalShop_t_CarnivalShop::InitAsDefaultInstance() {
}

CarnivalShop_t_CarnivalShop::CarnivalShop_t_CarnivalShop(const CarnivalShop_t_CarnivalShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarnivalShop_t_CarnivalShop::SharedCtor() {
  _cached_size_ = 0;
  tbxid_ = 0u;
  id_ = 0u;
  weight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  discount_ = 0u;
  lasttime_ = 0u;
  icon_ = 0u;
  point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarnivalShop_t_CarnivalShop::~CarnivalShop_t_CarnivalShop() {
  SharedDtor();
}

void CarnivalShop_t_CarnivalShop::SharedDtor() {
  if (weight_ != &::google::protobuf::internal::kEmptyString) {
    delete weight_;
  }
  if (point_ != &::google::protobuf::internal::kEmptyString) {
    delete point_;
  }
  if (this != default_instance_) {
  }
}

void CarnivalShop_t_CarnivalShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarnivalShop_t_CarnivalShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarnivalShop_t_CarnivalShop_descriptor_;
}

const CarnivalShop_t_CarnivalShop& CarnivalShop_t_CarnivalShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarnivalShop_2eproto();
  return *default_instance_;
}

CarnivalShop_t_CarnivalShop* CarnivalShop_t_CarnivalShop::default_instance_ = NULL;

CarnivalShop_t_CarnivalShop* CarnivalShop_t_CarnivalShop::New() const {
  return new CarnivalShop_t_CarnivalShop;
}

void CarnivalShop_t_CarnivalShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tbxid_ = 0u;
    id_ = 0u;
    if (has_weight()) {
      if (weight_ != &::google::protobuf::internal::kEmptyString) {
        weight_->clear();
      }
    }
    discount_ = 0u;
    lasttime_ = 0u;
    icon_ = 0u;
    if (has_point()) {
      if (point_ != &::google::protobuf::internal::kEmptyString) {
        point_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarnivalShop_t_CarnivalShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tbxid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbxid_)));
          set_has_tbxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weight;
        break;
      }

      // required string weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weight().data(), this->weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_discount;
        break;
      }

      // required uint32 discount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lasttime;
        break;
      }

      // required uint32 lasttime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_icon;
        break;
      }

      // required uint32 icon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_point;
        break;
      }

      // required string point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_point()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->point().data(), this->point().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarnivalShop_t_CarnivalShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tbxid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->weight(), output);
  }

  // required uint32 discount = 4;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->discount(), output);
  }

  // required uint32 lasttime = 5;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lasttime(), output);
  }

  // required uint32 icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->icon(), output);
  }

  // required string point = 7;
  if (has_point()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->point().data(), this->point().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarnivalShop_t_CarnivalShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tbxid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weight(), target);
  }

  // required uint32 discount = 4;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->discount(), target);
  }

  // required uint32 lasttime = 5;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lasttime(), target);
  }

  // required uint32 icon = 6;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->icon(), target);
  }

  // required string point = 7;
  if (has_point()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->point().data(), this->point().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarnivalShop_t_CarnivalShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tbxid = 1;
    if (has_tbxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbxid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string weight = 3;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight());
    }

    // required uint32 discount = 4;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discount());
    }

    // required uint32 lasttime = 5;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lasttime());
    }

    // required uint32 icon = 6;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->icon());
    }

    // required string point = 7;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarnivalShop_t_CarnivalShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarnivalShop_t_CarnivalShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarnivalShop_t_CarnivalShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarnivalShop_t_CarnivalShop::MergeFrom(const CarnivalShop_t_CarnivalShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tbxid()) {
      set_tbxid(from.tbxid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarnivalShop_t_CarnivalShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarnivalShop_t_CarnivalShop::CopyFrom(const CarnivalShop_t_CarnivalShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarnivalShop_t_CarnivalShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void CarnivalShop_t_CarnivalShop::Swap(CarnivalShop_t_CarnivalShop* other) {
  if (other != this) {
    std::swap(tbxid_, other->tbxid_);
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(discount_, other->discount_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(icon_, other->icon_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarnivalShop_t_CarnivalShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarnivalShop_t_CarnivalShop_descriptor_;
  metadata.reflection = CarnivalShop_t_CarnivalShop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CarnivalShop::kDatasFieldNumber;
#endif  // !_MSC_VER

CarnivalShop::CarnivalShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarnivalShop::InitAsDefaultInstance() {
}

CarnivalShop::CarnivalShop(const CarnivalShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarnivalShop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarnivalShop::~CarnivalShop() {
  SharedDtor();
}

void CarnivalShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarnivalShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarnivalShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarnivalShop_descriptor_;
}

const CarnivalShop& CarnivalShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarnivalShop_2eproto();
  return *default_instance_;
}

CarnivalShop* CarnivalShop::default_instance_ = NULL;

CarnivalShop* CarnivalShop::New() const {
  return new CarnivalShop;
}

void CarnivalShop::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarnivalShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CarnivalShop.t_CarnivalShop datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarnivalShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.CarnivalShop.t_CarnivalShop datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarnivalShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.CarnivalShop.t_CarnivalShop datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarnivalShop::ByteSize() const {
  int total_size = 0;

  // repeated .pb.CarnivalShop.t_CarnivalShop datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarnivalShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarnivalShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarnivalShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarnivalShop::MergeFrom(const CarnivalShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarnivalShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarnivalShop::CopyFrom(const CarnivalShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarnivalShop::IsInitialized() const {

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }
  return true;
}

void CarnivalShop::Swap(CarnivalShop* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarnivalShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarnivalShop_descriptor_;
  metadata.reflection = CarnivalShop_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
