// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_t_event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_t_event_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Event_2eproto() {
  protobuf_AddDesc_Event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Event.proto");
  GOOGLE_CHECK(file != NULL);
  event_descriptor_ = file->message_type(0);
  static const int event_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event, datas_),
  };
  event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_descriptor_,
      event::default_instance_,
      event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event));
  event_t_event_descriptor_ = event_descriptor_->nested_type(0);
  static const int event_t_event_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, tbxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, send_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, needbuild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, reflushtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, buildevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, desript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, cooltimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, rewardower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, rewardguess_),
  };
  event_t_event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_t_event_descriptor_,
      event_t_event::default_instance_,
      event_t_event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_t_event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_t_event));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_descriptor_, &event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_t_event_descriptor_, &event_t_event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Event_2eproto() {
  delete event::default_instance_;
  delete event_reflection_;
  delete event_t_event::default_instance_;
  delete event_t_event_reflection_;
}

void protobuf_AddDesc_Event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Event.proto\022\002pb\"\334\002\n\005event\022 \n\005datas\030\001 \003"
    "(\0132\021.pb.event.t_event\032\260\002\n\007t_event\022\r\n\005tbx"
    "id\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\r\n\005order\030\003 \002(\r\022\014\n\004n"
    "ame\030\004 \002(\t\022\014\n\004send\030\005 \002(\r\022\r\n\005timer\030\006 \002(\r\022\021"
    "\n\tneedbuild\030\007 \002(\r\022\r\n\005level\030\010 \002(\r\022\014\n\004task"
    "\030\t \002(\r\022\014\n\004rate\030\n \002(\r\022\023\n\013reflushtime\030\013 \002("
    "\t\022\014\n\004icon\030\014 \002(\t\022\022\n\nbuildevent\030\r \002(\t\022\017\n\007d"
    "esript\030\016 \002(\t\022\016\n\006target\030\017 \002(\t\022\021\n\tcooltime"
    "r\030\020 \002(\r\022\022\n\nrewardower\030\021 \002(\t\022\023\n\013rewardgue"
    "ss\030\022 \002(\t", 368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Event.proto", &protobuf_RegisterTypes);
  event::default_instance_ = new event();
  event_t_event::default_instance_ = new event_t_event();
  event::default_instance_->InitAsDefaultInstance();
  event_t_event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Event_2eproto {
  StaticDescriptorInitializer_Event_2eproto() {
    protobuf_AddDesc_Event_2eproto();
  }
} static_descriptor_initializer_Event_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int event_t_event::kTbxidFieldNumber;
const int event_t_event::kIdFieldNumber;
const int event_t_event::kOrderFieldNumber;
const int event_t_event::kNameFieldNumber;
const int event_t_event::kSendFieldNumber;
const int event_t_event::kTimerFieldNumber;
const int event_t_event::kNeedbuildFieldNumber;
const int event_t_event::kLevelFieldNumber;
const int event_t_event::kTaskFieldNumber;
const int event_t_event::kRateFieldNumber;
const int event_t_event::kReflushtimeFieldNumber;
const int event_t_event::kIconFieldNumber;
const int event_t_event::kBuildeventFieldNumber;
const int event_t_event::kDesriptFieldNumber;
const int event_t_event::kTargetFieldNumber;
const int event_t_event::kCooltimerFieldNumber;
const int event_t_event::kRewardowerFieldNumber;
const int event_t_event::kRewardguessFieldNumber;
#endif  // !_MSC_VER

event_t_event::event_t_event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_t_event::InitAsDefaultInstance() {
}

event_t_event::event_t_event(const event_t_event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_t_event::SharedCtor() {
  _cached_size_ = 0;
  tbxid_ = 0u;
  id_ = 0u;
  order_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_ = 0u;
  timer_ = 0u;
  needbuild_ = 0u;
  level_ = 0u;
  task_ = 0u;
  rate_ = 0u;
  reflushtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buildevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cooltimer_ = 0u;
  rewardower_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rewardguess_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_t_event::~event_t_event() {
  SharedDtor();
}

void event_t_event::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (reflushtime_ != &::google::protobuf::internal::kEmptyString) {
    delete reflushtime_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (buildevent_ != &::google::protobuf::internal::kEmptyString) {
    delete buildevent_;
  }
  if (desript_ != &::google::protobuf::internal::kEmptyString) {
    delete desript_;
  }
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (rewardower_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardower_;
  }
  if (rewardguess_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardguess_;
  }
  if (this != default_instance_) {
  }
}

void event_t_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_t_event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_t_event_descriptor_;
}

const event_t_event& event_t_event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

event_t_event* event_t_event::default_instance_ = NULL;

event_t_event* event_t_event::New() const {
  return new event_t_event;
}

void event_t_event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tbxid_ = 0u;
    id_ = 0u;
    order_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    send_ = 0u;
    timer_ = 0u;
    needbuild_ = 0u;
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    task_ = 0u;
    rate_ = 0u;
    if (has_reflushtime()) {
      if (reflushtime_ != &::google::protobuf::internal::kEmptyString) {
        reflushtime_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_buildevent()) {
      if (buildevent_ != &::google::protobuf::internal::kEmptyString) {
        buildevent_->clear();
      }
    }
    if (has_desript()) {
      if (desript_ != &::google::protobuf::internal::kEmptyString) {
        desript_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    cooltimer_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_rewardower()) {
      if (rewardower_ != &::google::protobuf::internal::kEmptyString) {
        rewardower_->clear();
      }
    }
    if (has_rewardguess()) {
      if (rewardguess_ != &::google::protobuf::internal::kEmptyString) {
        rewardguess_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_t_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tbxid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbxid_)));
          set_has_tbxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // required uint32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_send;
        break;
      }

      // required uint32 send = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_)));
          set_has_send();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timer;
        break;
      }

      // required uint32 timer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_needbuild;
        break;
      }

      // required uint32 needbuild = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needbuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needbuild_)));
          set_has_needbuild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // required uint32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_task;
        break;
      }

      // required uint32 task = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_)));
          set_has_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rate;
        break;
      }

      // required uint32 rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_reflushtime;
        break;
      }

      // required string reflushtime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reflushtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reflushtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reflushtime().data(), this->reflushtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_icon;
        break;
      }

      // required string icon = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_buildevent;
        break;
      }

      // required string buildevent = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildevent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buildevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buildevent().data(), this->buildevent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_desript;
        break;
      }

      // required string desript = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desript()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desript().data(), this->desript().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_target;
        break;
      }

      // required string target = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_cooltimer;
        break;
      }

      // required uint32 cooltimer = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cooltimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cooltimer_)));
          set_has_cooltimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_rewardower;
        break;
      }

      // required string rewardower = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewardower()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rewardower().data(), this->rewardower().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_rewardguess;
        break;
      }

      // required string rewardguess = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardguess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewardguess()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rewardguess().data(), this->rewardguess().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_t_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tbxid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // required uint32 send = 5;
  if (has_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->send(), output);
  }

  // required uint32 timer = 6;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timer(), output);
  }

  // required uint32 needbuild = 7;
  if (has_needbuild()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->needbuild(), output);
  }

  // required uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // required uint32 task = 9;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->task(), output);
  }

  // required uint32 rate = 10;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rate(), output);
  }

  // required string reflushtime = 11;
  if (has_reflushtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reflushtime().data(), this->reflushtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->reflushtime(), output);
  }

  // required string icon = 12;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->icon(), output);
  }

  // required string buildevent = 13;
  if (has_buildevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildevent().data(), this->buildevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->buildevent(), output);
  }

  // required string desript = 14;
  if (has_desript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desript().data(), this->desript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->desript(), output);
  }

  // required string target = 15;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->target(), output);
  }

  // required uint32 cooltimer = 16;
  if (has_cooltimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->cooltimer(), output);
  }

  // required string rewardower = 17;
  if (has_rewardower()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rewardower().data(), this->rewardower().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->rewardower(), output);
  }

  // required string rewardguess = 18;
  if (has_rewardguess()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rewardguess().data(), this->rewardguess().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->rewardguess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_t_event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tbxid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->order(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required uint32 send = 5;
  if (has_send()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->send(), target);
  }

  // required uint32 timer = 6;
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timer(), target);
  }

  // required uint32 needbuild = 7;
  if (has_needbuild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->needbuild(), target);
  }

  // required uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // required uint32 task = 9;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->task(), target);
  }

  // required uint32 rate = 10;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rate(), target);
  }

  // required string reflushtime = 11;
  if (has_reflushtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reflushtime().data(), this->reflushtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->reflushtime(), target);
  }

  // required string icon = 12;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->icon(), target);
  }

  // required string buildevent = 13;
  if (has_buildevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildevent().data(), this->buildevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->buildevent(), target);
  }

  // required string desript = 14;
  if (has_desript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desript().data(), this->desript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->desript(), target);
  }

  // required string target = 15;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->target(), target);
  }

  // required uint32 cooltimer = 16;
  if (has_cooltimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->cooltimer(), target);
  }

  // required string rewardower = 17;
  if (has_rewardower()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rewardower().data(), this->rewardower().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->rewardower(), target);
  }

  // required string rewardguess = 18;
  if (has_rewardguess()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rewardguess().data(), this->rewardguess().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->rewardguess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_t_event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tbxid = 1;
    if (has_tbxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbxid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 send = 5;
    if (has_send()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send());
    }

    // required uint32 timer = 6;
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timer());
    }

    // required uint32 needbuild = 7;
    if (has_needbuild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needbuild());
    }

    // required uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 task = 9;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task());
    }

    // required uint32 rate = 10;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // required string reflushtime = 11;
    if (has_reflushtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reflushtime());
    }

    // required string icon = 12;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required string buildevent = 13;
    if (has_buildevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buildevent());
    }

    // required string desript = 14;
    if (has_desript()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desript());
    }

    // required string target = 15;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // required uint32 cooltimer = 16;
    if (has_cooltimer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cooltimer());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string rewardower = 17;
    if (has_rewardower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewardower());
    }

    // required string rewardguess = 18;
    if (has_rewardguess()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewardguess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_t_event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_t_event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_t_event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_t_event::MergeFrom(const event_t_event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tbxid()) {
      set_tbxid(from.tbxid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_send()) {
      set_send(from.send());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
    if (from.has_needbuild()) {
      set_needbuild(from.needbuild());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_task()) {
      set_task(from.task());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_reflushtime()) {
      set_reflushtime(from.reflushtime());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_buildevent()) {
      set_buildevent(from.buildevent());
    }
    if (from.has_desript()) {
      set_desript(from.desript());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_cooltimer()) {
      set_cooltimer(from.cooltimer());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rewardower()) {
      set_rewardower(from.rewardower());
    }
    if (from.has_rewardguess()) {
      set_rewardguess(from.rewardguess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_t_event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_t_event::CopyFrom(const event_t_event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_t_event::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void event_t_event::Swap(event_t_event* other) {
  if (other != this) {
    std::swap(tbxid_, other->tbxid_);
    std::swap(id_, other->id_);
    std::swap(order_, other->order_);
    std::swap(name_, other->name_);
    std::swap(send_, other->send_);
    std::swap(timer_, other->timer_);
    std::swap(needbuild_, other->needbuild_);
    std::swap(level_, other->level_);
    std::swap(task_, other->task_);
    std::swap(rate_, other->rate_);
    std::swap(reflushtime_, other->reflushtime_);
    std::swap(icon_, other->icon_);
    std::swap(buildevent_, other->buildevent_);
    std::swap(desript_, other->desript_);
    std::swap(target_, other->target_);
    std::swap(cooltimer_, other->cooltimer_);
    std::swap(rewardower_, other->rewardower_);
    std::swap(rewardguess_, other->rewardguess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_t_event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_t_event_descriptor_;
  metadata.reflection = event_t_event_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int event::kDatasFieldNumber;
#endif  // !_MSC_VER

event::event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event::InitAsDefaultInstance() {
}

event::event(const event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event::~event() {
  SharedDtor();
}

void event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_descriptor_;
}

const event& event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

event* event::default_instance_ = NULL;

event* event::New() const {
  return new event;
}

void event::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.event.t_event datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.event.t_event datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.event.t_event datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event::ByteSize() const {
  int total_size = 0;

  // repeated .pb.event.t_event datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event::MergeFrom(const event& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event::CopyFrom(const event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event::IsInitialized() const {

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }
  return true;
}

void event::Swap(event* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_descriptor_;
  metadata.reflection = event_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
