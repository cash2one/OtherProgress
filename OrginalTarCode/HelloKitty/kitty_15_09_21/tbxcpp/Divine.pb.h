// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Divine.proto

#ifndef PROTOBUF_Divine_2eproto__INCLUDED
#define PROTOBUF_Divine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Divine_2eproto();
void protobuf_AssignDesc_Divine_2eproto();
void protobuf_ShutdownFile_Divine_2eproto();

class Divine;
class Divine_t_Divine;

// ===================================================================

class Divine_t_Divine : public ::google::protobuf::Message {
 public:
  Divine_t_Divine();
  virtual ~Divine_t_Divine();

  Divine_t_Divine(const Divine_t_Divine& from);

  inline Divine_t_Divine& operator=(const Divine_t_Divine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Divine_t_Divine& default_instance();

  void Swap(Divine_t_Divine* other);

  // implements Message ----------------------------------------------

  Divine_t_Divine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Divine_t_Divine& from);
  void MergeFrom(const Divine_t_Divine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tbxid = 1;
  inline bool has_tbxid() const;
  inline void clear_tbxid();
  static const int kTbxidFieldNumber = 1;
  inline ::google::protobuf::uint32 tbxid() const;
  inline void set_tbxid(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 lucklevel = 3;
  inline bool has_lucklevel() const;
  inline void clear_lucklevel();
  static const int kLucklevelFieldNumber = 3;
  inline ::google::protobuf::uint32 lucklevel() const;
  inline void set_lucklevel(::google::protobuf::uint32 value);

  // required string comment = 4;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 4;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // required string buffer = 5;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 5;
  inline const ::std::string& buffer() const;
  inline void set_buffer(const ::std::string& value);
  inline void set_buffer(const char* value);
  inline void set_buffer(const char* value, size_t size);
  inline ::std::string* mutable_buffer();
  inline ::std::string* release_buffer();
  inline void set_allocated_buffer(::std::string* buffer);

  // required string reward = 6;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 6;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // required uint32 weight = 7;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 7;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Divine.t_Divine)
 private:
  inline void set_has_tbxid();
  inline void clear_has_tbxid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lucklevel();
  inline void clear_has_lucklevel();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_buffer();
  inline void clear_has_buffer();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tbxid_;
  ::google::protobuf::uint32 id_;
  ::std::string* comment_;
  ::std::string* buffer_;
  ::google::protobuf::uint32 lucklevel_;
  ::google::protobuf::uint32 weight_;
  ::std::string* reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Divine_2eproto();
  friend void protobuf_AssignDesc_Divine_2eproto();
  friend void protobuf_ShutdownFile_Divine_2eproto();

  void InitAsDefaultInstance();
  static Divine_t_Divine* default_instance_;
};
// -------------------------------------------------------------------

class Divine : public ::google::protobuf::Message {
 public:
  Divine();
  virtual ~Divine();

  Divine(const Divine& from);

  inline Divine& operator=(const Divine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Divine& default_instance();

  void Swap(Divine* other);

  // implements Message ----------------------------------------------

  Divine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Divine& from);
  void MergeFrom(const Divine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Divine_t_Divine t_Divine;

  // accessors -------------------------------------------------------

  // repeated .pb.Divine.t_Divine datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::pb::Divine_t_Divine& datas(int index) const;
  inline ::pb::Divine_t_Divine* mutable_datas(int index);
  inline ::pb::Divine_t_Divine* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Divine_t_Divine >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Divine_t_Divine >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:pb.Divine)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Divine_t_Divine > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Divine_2eproto();
  friend void protobuf_AssignDesc_Divine_2eproto();
  friend void protobuf_ShutdownFile_Divine_2eproto();

  void InitAsDefaultInstance();
  static Divine* default_instance_;
};
// ===================================================================


// ===================================================================

// Divine_t_Divine

// required uint32 tbxid = 1;
inline bool Divine_t_Divine::has_tbxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Divine_t_Divine::set_has_tbxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Divine_t_Divine::clear_has_tbxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Divine_t_Divine::clear_tbxid() {
  tbxid_ = 0u;
  clear_has_tbxid();
}
inline ::google::protobuf::uint32 Divine_t_Divine::tbxid() const {
  return tbxid_;
}
inline void Divine_t_Divine::set_tbxid(::google::protobuf::uint32 value) {
  set_has_tbxid();
  tbxid_ = value;
}

// required uint32 id = 2;
inline bool Divine_t_Divine::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Divine_t_Divine::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Divine_t_Divine::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Divine_t_Divine::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Divine_t_Divine::id() const {
  return id_;
}
inline void Divine_t_Divine::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 lucklevel = 3;
inline bool Divine_t_Divine::has_lucklevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Divine_t_Divine::set_has_lucklevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Divine_t_Divine::clear_has_lucklevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Divine_t_Divine::clear_lucklevel() {
  lucklevel_ = 0u;
  clear_has_lucklevel();
}
inline ::google::protobuf::uint32 Divine_t_Divine::lucklevel() const {
  return lucklevel_;
}
inline void Divine_t_Divine::set_lucklevel(::google::protobuf::uint32 value) {
  set_has_lucklevel();
  lucklevel_ = value;
}

// required string comment = 4;
inline bool Divine_t_Divine::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Divine_t_Divine::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Divine_t_Divine::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Divine_t_Divine::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& Divine_t_Divine::comment() const {
  return *comment_;
}
inline void Divine_t_Divine::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Divine_t_Divine::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Divine_t_Divine::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Divine_t_Divine::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* Divine_t_Divine::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Divine_t_Divine::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string buffer = 5;
inline bool Divine_t_Divine::has_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Divine_t_Divine::set_has_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Divine_t_Divine::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Divine_t_Divine::clear_buffer() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    buffer_->clear();
  }
  clear_has_buffer();
}
inline const ::std::string& Divine_t_Divine::buffer() const {
  return *buffer_;
}
inline void Divine_t_Divine::set_buffer(const ::std::string& value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void Divine_t_Divine::set_buffer(const char* value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void Divine_t_Divine::set_buffer(const char* value, size_t size) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Divine_t_Divine::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  return buffer_;
}
inline ::std::string* Divine_t_Divine::release_buffer() {
  clear_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buffer_;
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Divine_t_Divine::set_allocated_buffer(::std::string* buffer) {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (buffer) {
    set_has_buffer();
    buffer_ = buffer;
  } else {
    clear_has_buffer();
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string reward = 6;
inline bool Divine_t_Divine::has_reward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Divine_t_Divine::set_has_reward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Divine_t_Divine::clear_has_reward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Divine_t_Divine::clear_reward() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& Divine_t_Divine::reward() const {
  return *reward_;
}
inline void Divine_t_Divine::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void Divine_t_Divine::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void Divine_t_Divine::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Divine_t_Divine::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  return reward_;
}
inline ::std::string* Divine_t_Divine::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Divine_t_Divine::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 weight = 7;
inline bool Divine_t_Divine::has_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Divine_t_Divine::set_has_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Divine_t_Divine::clear_has_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Divine_t_Divine::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 Divine_t_Divine::weight() const {
  return weight_;
}
inline void Divine_t_Divine::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// Divine

// repeated .pb.Divine.t_Divine datas = 1;
inline int Divine::datas_size() const {
  return datas_.size();
}
inline void Divine::clear_datas() {
  datas_.Clear();
}
inline const ::pb::Divine_t_Divine& Divine::datas(int index) const {
  return datas_.Get(index);
}
inline ::pb::Divine_t_Divine* Divine::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::pb::Divine_t_Divine* Divine::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Divine_t_Divine >&
Divine::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Divine_t_Divine >*
Divine::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Divine_2eproto__INCLUDED
