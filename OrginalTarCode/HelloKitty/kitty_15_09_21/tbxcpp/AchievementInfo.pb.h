// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AchievementInfo.proto

#ifndef PROTOBUF_AchievementInfo_2eproto__INCLUDED
#define PROTOBUF_AchievementInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AchievementInfo_2eproto();
void protobuf_AssignDesc_AchievementInfo_2eproto();
void protobuf_ShutdownFile_AchievementInfo_2eproto();

class Achievement;
class Achievement_t_Achievement;

// ===================================================================

class Achievement_t_Achievement : public ::google::protobuf::Message {
 public:
  Achievement_t_Achievement();
  virtual ~Achievement_t_Achievement();

  Achievement_t_Achievement(const Achievement_t_Achievement& from);

  inline Achievement_t_Achievement& operator=(const Achievement_t_Achievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Achievement_t_Achievement& default_instance();

  void Swap(Achievement_t_Achievement* other);

  // implements Message ----------------------------------------------

  Achievement_t_Achievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Achievement_t_Achievement& from);
  void MergeFrom(const Achievement_t_Achievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tbxid = 1;
  inline bool has_tbxid() const;
  inline void clear_tbxid();
  static const int kTbxidFieldNumber = 1;
  inline ::google::protobuf::uint32 tbxid() const;
  inline void set_tbxid(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 stars = 3;
  inline bool has_stars() const;
  inline void clear_stars();
  static const int kStarsFieldNumber = 3;
  inline ::google::protobuf::uint32 stars() const;
  inline void set_stars(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 targettype = 5;
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargettypeFieldNumber = 5;
  inline ::google::protobuf::uint32 targettype() const;
  inline void set_targettype(::google::protobuf::uint32 value);

  // required uint32 targetsubtype = 6;
  inline bool has_targetsubtype() const;
  inline void clear_targetsubtype();
  static const int kTargetsubtypeFieldNumber = 6;
  inline ::google::protobuf::uint32 targetsubtype() const;
  inline void set_targetsubtype(::google::protobuf::uint32 value);

  // required string target = 7;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 7;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // required uint32 process = 8;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 8;
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // required string reward = 9;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 9;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // @@protoc_insertion_point(class_scope:pb.Achievement.t_Achievement)
 private:
  inline void set_has_tbxid();
  inline void clear_has_tbxid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_stars();
  inline void clear_has_stars();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_targettype();
  inline void clear_has_targettype();
  inline void set_has_targetsubtype();
  inline void clear_has_targetsubtype();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_process();
  inline void clear_has_process();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tbxid_;
  ::google::protobuf::uint32 id_;
  ::std::string* name_;
  ::google::protobuf::uint32 stars_;
  ::google::protobuf::uint32 targettype_;
  ::std::string* target_;
  ::google::protobuf::uint32 targetsubtype_;
  ::google::protobuf::uint32 process_;
  ::std::string* reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_AchievementInfo_2eproto();
  friend void protobuf_AssignDesc_AchievementInfo_2eproto();
  friend void protobuf_ShutdownFile_AchievementInfo_2eproto();

  void InitAsDefaultInstance();
  static Achievement_t_Achievement* default_instance_;
};
// -------------------------------------------------------------------

class Achievement : public ::google::protobuf::Message {
 public:
  Achievement();
  virtual ~Achievement();

  Achievement(const Achievement& from);

  inline Achievement& operator=(const Achievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Achievement& default_instance();

  void Swap(Achievement* other);

  // implements Message ----------------------------------------------

  Achievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Achievement& from);
  void MergeFrom(const Achievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Achievement_t_Achievement t_Achievement;

  // accessors -------------------------------------------------------

  // repeated .pb.Achievement.t_Achievement datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::pb::Achievement_t_Achievement& datas(int index) const;
  inline ::pb::Achievement_t_Achievement* mutable_datas(int index);
  inline ::pb::Achievement_t_Achievement* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Achievement_t_Achievement >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Achievement_t_Achievement >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:pb.Achievement)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Achievement_t_Achievement > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_AchievementInfo_2eproto();
  friend void protobuf_AssignDesc_AchievementInfo_2eproto();
  friend void protobuf_ShutdownFile_AchievementInfo_2eproto();

  void InitAsDefaultInstance();
  static Achievement* default_instance_;
};
// ===================================================================


// ===================================================================

// Achievement_t_Achievement

// required uint32 tbxid = 1;
inline bool Achievement_t_Achievement::has_tbxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Achievement_t_Achievement::set_has_tbxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Achievement_t_Achievement::clear_has_tbxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Achievement_t_Achievement::clear_tbxid() {
  tbxid_ = 0u;
  clear_has_tbxid();
}
inline ::google::protobuf::uint32 Achievement_t_Achievement::tbxid() const {
  return tbxid_;
}
inline void Achievement_t_Achievement::set_tbxid(::google::protobuf::uint32 value) {
  set_has_tbxid();
  tbxid_ = value;
}

// required uint32 id = 2;
inline bool Achievement_t_Achievement::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Achievement_t_Achievement::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Achievement_t_Achievement::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Achievement_t_Achievement::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Achievement_t_Achievement::id() const {
  return id_;
}
inline void Achievement_t_Achievement::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 stars = 3;
inline bool Achievement_t_Achievement::has_stars() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Achievement_t_Achievement::set_has_stars() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Achievement_t_Achievement::clear_has_stars() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Achievement_t_Achievement::clear_stars() {
  stars_ = 0u;
  clear_has_stars();
}
inline ::google::protobuf::uint32 Achievement_t_Achievement::stars() const {
  return stars_;
}
inline void Achievement_t_Achievement::set_stars(::google::protobuf::uint32 value) {
  set_has_stars();
  stars_ = value;
}

// required string name = 4;
inline bool Achievement_t_Achievement::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Achievement_t_Achievement::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Achievement_t_Achievement::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Achievement_t_Achievement::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Achievement_t_Achievement::name() const {
  return *name_;
}
inline void Achievement_t_Achievement::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Achievement_t_Achievement::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Achievement_t_Achievement::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Achievement_t_Achievement::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Achievement_t_Achievement::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Achievement_t_Achievement::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 targettype = 5;
inline bool Achievement_t_Achievement::has_targettype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Achievement_t_Achievement::set_has_targettype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Achievement_t_Achievement::clear_has_targettype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Achievement_t_Achievement::clear_targettype() {
  targettype_ = 0u;
  clear_has_targettype();
}
inline ::google::protobuf::uint32 Achievement_t_Achievement::targettype() const {
  return targettype_;
}
inline void Achievement_t_Achievement::set_targettype(::google::protobuf::uint32 value) {
  set_has_targettype();
  targettype_ = value;
}

// required uint32 targetsubtype = 6;
inline bool Achievement_t_Achievement::has_targetsubtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Achievement_t_Achievement::set_has_targetsubtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Achievement_t_Achievement::clear_has_targetsubtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Achievement_t_Achievement::clear_targetsubtype() {
  targetsubtype_ = 0u;
  clear_has_targetsubtype();
}
inline ::google::protobuf::uint32 Achievement_t_Achievement::targetsubtype() const {
  return targetsubtype_;
}
inline void Achievement_t_Achievement::set_targetsubtype(::google::protobuf::uint32 value) {
  set_has_targetsubtype();
  targetsubtype_ = value;
}

// required string target = 7;
inline bool Achievement_t_Achievement::has_target() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Achievement_t_Achievement::set_has_target() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Achievement_t_Achievement::clear_has_target() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Achievement_t_Achievement::clear_target() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& Achievement_t_Achievement::target() const {
  return *target_;
}
inline void Achievement_t_Achievement::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void Achievement_t_Achievement::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void Achievement_t_Achievement::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Achievement_t_Achievement::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  return target_;
}
inline ::std::string* Achievement_t_Achievement::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Achievement_t_Achievement::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 process = 8;
inline bool Achievement_t_Achievement::has_process() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Achievement_t_Achievement::set_has_process() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Achievement_t_Achievement::clear_has_process() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Achievement_t_Achievement::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 Achievement_t_Achievement::process() const {
  return process_;
}
inline void Achievement_t_Achievement::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
}

// required string reward = 9;
inline bool Achievement_t_Achievement::has_reward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Achievement_t_Achievement::set_has_reward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Achievement_t_Achievement::clear_has_reward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Achievement_t_Achievement::clear_reward() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& Achievement_t_Achievement::reward() const {
  return *reward_;
}
inline void Achievement_t_Achievement::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void Achievement_t_Achievement::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void Achievement_t_Achievement::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Achievement_t_Achievement::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  return reward_;
}
inline ::std::string* Achievement_t_Achievement::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Achievement_t_Achievement::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Achievement

// repeated .pb.Achievement.t_Achievement datas = 1;
inline int Achievement::datas_size() const {
  return datas_.size();
}
inline void Achievement::clear_datas() {
  datas_.Clear();
}
inline const ::pb::Achievement_t_Achievement& Achievement::datas(int index) const {
  return datas_.Get(index);
}
inline ::pb::Achievement_t_Achievement* Achievement::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::pb::Achievement_t_Achievement* Achievement::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Achievement_t_Achievement >&
Achievement::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Achievement_t_Achievement >*
Achievement::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AchievementInfo_2eproto__INCLUDED
