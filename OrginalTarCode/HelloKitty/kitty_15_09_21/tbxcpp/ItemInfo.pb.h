// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemInfo.proto

#ifndef PROTOBUF_ItemInfo_2eproto__INCLUDED
#define PROTOBUF_ItemInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ItemInfo_2eproto();
void protobuf_AssignDesc_ItemInfo_2eproto();
void protobuf_ShutdownFile_ItemInfo_2eproto();

class itemInfo;
class itemInfo_t_itemInfo;

// ===================================================================

class itemInfo_t_itemInfo : public ::google::protobuf::Message {
 public:
  itemInfo_t_itemInfo();
  virtual ~itemInfo_t_itemInfo();

  itemInfo_t_itemInfo(const itemInfo_t_itemInfo& from);

  inline itemInfo_t_itemInfo& operator=(const itemInfo_t_itemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const itemInfo_t_itemInfo& default_instance();

  void Swap(itemInfo_t_itemInfo* other);

  // implements Message ----------------------------------------------

  itemInfo_t_itemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const itemInfo_t_itemInfo& from);
  void MergeFrom(const itemInfo_t_itemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tbxid = 1;
  inline bool has_tbxid() const;
  inline void clear_tbxid();
  static const int kTbxidFieldNumber = 1;
  inline ::google::protobuf::uint32 tbxid() const;
  inline void set_tbxid(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::std::string& item() const;
  inline void set_item(const ::std::string& value);
  inline void set_item(const char* value);
  inline void set_item(const char* value, size_t size);
  inline ::std::string* mutable_item();
  inline ::std::string* release_item();
  inline void set_allocated_item(::std::string* item);

  // required uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // required uint32 kind = 6;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 6;
  inline ::google::protobuf::uint32 kind() const;
  inline void set_kind(::google::protobuf::uint32 value);

  // required string kindValue = 7;
  inline bool has_kindvalue() const;
  inline void clear_kindvalue();
  static const int kKindValueFieldNumber = 7;
  inline const ::std::string& kindvalue() const;
  inline void set_kindvalue(const ::std::string& value);
  inline void set_kindvalue(const char* value);
  inline void set_kindvalue(const char* value, size_t size);
  inline ::std::string* mutable_kindvalue();
  inline ::std::string* release_kindvalue();
  inline void set_allocated_kindvalue(::std::string* kindvalue);

  // required uint32 starLevel = 8;
  inline bool has_starlevel() const;
  inline void clear_starlevel();
  static const int kStarLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 starlevel() const;
  inline void set_starlevel(::google::protobuf::uint32 value);

  // required uint32 card = 9;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 9;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // required string describe = 10;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 10;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // required string icon = 11;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 11;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required string buffer = 12;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 12;
  inline const ::std::string& buffer() const;
  inline void set_buffer(const ::std::string& value);
  inline void set_buffer(const char* value);
  inline void set_buffer(const char* value, size_t size);
  inline ::std::string* mutable_buffer();
  inline ::std::string* release_buffer();
  inline void set_allocated_buffer(::std::string* buffer);

  // required uint32 shopprice = 13;
  inline bool has_shopprice() const;
  inline void clear_shopprice();
  static const int kShoppriceFieldNumber = 13;
  inline ::google::protobuf::uint32 shopprice() const;
  inline void set_shopprice(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.itemInfo.t_itemInfo)
 private:
  inline void set_has_tbxid();
  inline void clear_has_tbxid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_kindvalue();
  inline void clear_has_kindvalue();
  inline void set_has_starlevel();
  inline void clear_has_starlevel();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_buffer();
  inline void clear_has_buffer();
  inline void set_has_shopprice();
  inline void clear_has_shopprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tbxid_;
  ::google::protobuf::uint32 id_;
  ::std::string* item_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 price_;
  ::std::string* kindvalue_;
  ::google::protobuf::uint32 kind_;
  ::google::protobuf::uint32 starlevel_;
  ::std::string* describe_;
  ::std::string* icon_;
  ::google::protobuf::uint32 card_;
  ::google::protobuf::uint32 shopprice_;
  ::std::string* buffer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_ItemInfo_2eproto();
  friend void protobuf_AssignDesc_ItemInfo_2eproto();
  friend void protobuf_ShutdownFile_ItemInfo_2eproto();

  void InitAsDefaultInstance();
  static itemInfo_t_itemInfo* default_instance_;
};
// -------------------------------------------------------------------

class itemInfo : public ::google::protobuf::Message {
 public:
  itemInfo();
  virtual ~itemInfo();

  itemInfo(const itemInfo& from);

  inline itemInfo& operator=(const itemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const itemInfo& default_instance();

  void Swap(itemInfo* other);

  // implements Message ----------------------------------------------

  itemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const itemInfo& from);
  void MergeFrom(const itemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef itemInfo_t_itemInfo t_itemInfo;

  // accessors -------------------------------------------------------

  // repeated .pb.itemInfo.t_itemInfo datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::pb::itemInfo_t_itemInfo& datas(int index) const;
  inline ::pb::itemInfo_t_itemInfo* mutable_datas(int index);
  inline ::pb::itemInfo_t_itemInfo* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::itemInfo_t_itemInfo >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::itemInfo_t_itemInfo >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:pb.itemInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::itemInfo_t_itemInfo > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ItemInfo_2eproto();
  friend void protobuf_AssignDesc_ItemInfo_2eproto();
  friend void protobuf_ShutdownFile_ItemInfo_2eproto();

  void InitAsDefaultInstance();
  static itemInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// itemInfo_t_itemInfo

// required uint32 tbxid = 1;
inline bool itemInfo_t_itemInfo::has_tbxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_tbxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void itemInfo_t_itemInfo::clear_has_tbxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void itemInfo_t_itemInfo::clear_tbxid() {
  tbxid_ = 0u;
  clear_has_tbxid();
}
inline ::google::protobuf::uint32 itemInfo_t_itemInfo::tbxid() const {
  return tbxid_;
}
inline void itemInfo_t_itemInfo::set_tbxid(::google::protobuf::uint32 value) {
  set_has_tbxid();
  tbxid_ = value;
}

// required uint32 id = 2;
inline bool itemInfo_t_itemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void itemInfo_t_itemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void itemInfo_t_itemInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 itemInfo_t_itemInfo::id() const {
  return id_;
}
inline void itemInfo_t_itemInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string item = 3;
inline bool itemInfo_t_itemInfo::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void itemInfo_t_itemInfo::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void itemInfo_t_itemInfo::clear_item() {
  if (item_ != &::google::protobuf::internal::kEmptyString) {
    item_->clear();
  }
  clear_has_item();
}
inline const ::std::string& itemInfo_t_itemInfo::item() const {
  return *item_;
}
inline void itemInfo_t_itemInfo::set_item(const ::std::string& value) {
  set_has_item();
  if (item_ == &::google::protobuf::internal::kEmptyString) {
    item_ = new ::std::string;
  }
  item_->assign(value);
}
inline void itemInfo_t_itemInfo::set_item(const char* value) {
  set_has_item();
  if (item_ == &::google::protobuf::internal::kEmptyString) {
    item_ = new ::std::string;
  }
  item_->assign(value);
}
inline void itemInfo_t_itemInfo::set_item(const char* value, size_t size) {
  set_has_item();
  if (item_ == &::google::protobuf::internal::kEmptyString) {
    item_ = new ::std::string;
  }
  item_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* itemInfo_t_itemInfo::mutable_item() {
  set_has_item();
  if (item_ == &::google::protobuf::internal::kEmptyString) {
    item_ = new ::std::string;
  }
  return item_;
}
inline ::std::string* itemInfo_t_itemInfo::release_item() {
  clear_has_item();
  if (item_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = item_;
    item_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void itemInfo_t_itemInfo::set_allocated_item(::std::string* item) {
  if (item_ != &::google::protobuf::internal::kEmptyString) {
    delete item_;
  }
  if (item) {
    set_has_item();
    item_ = item;
  } else {
    clear_has_item();
    item_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 level = 4;
inline bool itemInfo_t_itemInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void itemInfo_t_itemInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void itemInfo_t_itemInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 itemInfo_t_itemInfo::level() const {
  return level_;
}
inline void itemInfo_t_itemInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 price = 5;
inline bool itemInfo_t_itemInfo::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void itemInfo_t_itemInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void itemInfo_t_itemInfo::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 itemInfo_t_itemInfo::price() const {
  return price_;
}
inline void itemInfo_t_itemInfo::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// required uint32 kind = 6;
inline bool itemInfo_t_itemInfo::has_kind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_kind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void itemInfo_t_itemInfo::clear_has_kind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void itemInfo_t_itemInfo::clear_kind() {
  kind_ = 0u;
  clear_has_kind();
}
inline ::google::protobuf::uint32 itemInfo_t_itemInfo::kind() const {
  return kind_;
}
inline void itemInfo_t_itemInfo::set_kind(::google::protobuf::uint32 value) {
  set_has_kind();
  kind_ = value;
}

// required string kindValue = 7;
inline bool itemInfo_t_itemInfo::has_kindvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_kindvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void itemInfo_t_itemInfo::clear_has_kindvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void itemInfo_t_itemInfo::clear_kindvalue() {
  if (kindvalue_ != &::google::protobuf::internal::kEmptyString) {
    kindvalue_->clear();
  }
  clear_has_kindvalue();
}
inline const ::std::string& itemInfo_t_itemInfo::kindvalue() const {
  return *kindvalue_;
}
inline void itemInfo_t_itemInfo::set_kindvalue(const ::std::string& value) {
  set_has_kindvalue();
  if (kindvalue_ == &::google::protobuf::internal::kEmptyString) {
    kindvalue_ = new ::std::string;
  }
  kindvalue_->assign(value);
}
inline void itemInfo_t_itemInfo::set_kindvalue(const char* value) {
  set_has_kindvalue();
  if (kindvalue_ == &::google::protobuf::internal::kEmptyString) {
    kindvalue_ = new ::std::string;
  }
  kindvalue_->assign(value);
}
inline void itemInfo_t_itemInfo::set_kindvalue(const char* value, size_t size) {
  set_has_kindvalue();
  if (kindvalue_ == &::google::protobuf::internal::kEmptyString) {
    kindvalue_ = new ::std::string;
  }
  kindvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* itemInfo_t_itemInfo::mutable_kindvalue() {
  set_has_kindvalue();
  if (kindvalue_ == &::google::protobuf::internal::kEmptyString) {
    kindvalue_ = new ::std::string;
  }
  return kindvalue_;
}
inline ::std::string* itemInfo_t_itemInfo::release_kindvalue() {
  clear_has_kindvalue();
  if (kindvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kindvalue_;
    kindvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void itemInfo_t_itemInfo::set_allocated_kindvalue(::std::string* kindvalue) {
  if (kindvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete kindvalue_;
  }
  if (kindvalue) {
    set_has_kindvalue();
    kindvalue_ = kindvalue;
  } else {
    clear_has_kindvalue();
    kindvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 starLevel = 8;
inline bool itemInfo_t_itemInfo::has_starlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_starlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void itemInfo_t_itemInfo::clear_has_starlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void itemInfo_t_itemInfo::clear_starlevel() {
  starlevel_ = 0u;
  clear_has_starlevel();
}
inline ::google::protobuf::uint32 itemInfo_t_itemInfo::starlevel() const {
  return starlevel_;
}
inline void itemInfo_t_itemInfo::set_starlevel(::google::protobuf::uint32 value) {
  set_has_starlevel();
  starlevel_ = value;
}

// required uint32 card = 9;
inline bool itemInfo_t_itemInfo::has_card() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_card() {
  _has_bits_[0] |= 0x00000100u;
}
inline void itemInfo_t_itemInfo::clear_has_card() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void itemInfo_t_itemInfo::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 itemInfo_t_itemInfo::card() const {
  return card_;
}
inline void itemInfo_t_itemInfo::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// required string describe = 10;
inline bool itemInfo_t_itemInfo::has_describe() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_describe() {
  _has_bits_[0] |= 0x00000200u;
}
inline void itemInfo_t_itemInfo::clear_has_describe() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void itemInfo_t_itemInfo::clear_describe() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& itemInfo_t_itemInfo::describe() const {
  return *describe_;
}
inline void itemInfo_t_itemInfo::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void itemInfo_t_itemInfo::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void itemInfo_t_itemInfo::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* itemInfo_t_itemInfo::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  return describe_;
}
inline ::std::string* itemInfo_t_itemInfo::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void itemInfo_t_itemInfo::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string icon = 11;
inline bool itemInfo_t_itemInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000400u;
}
inline void itemInfo_t_itemInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void itemInfo_t_itemInfo::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& itemInfo_t_itemInfo::icon() const {
  return *icon_;
}
inline void itemInfo_t_itemInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void itemInfo_t_itemInfo::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void itemInfo_t_itemInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* itemInfo_t_itemInfo::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* itemInfo_t_itemInfo::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void itemInfo_t_itemInfo::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string buffer = 12;
inline bool itemInfo_t_itemInfo::has_buffer() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_buffer() {
  _has_bits_[0] |= 0x00000800u;
}
inline void itemInfo_t_itemInfo::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void itemInfo_t_itemInfo::clear_buffer() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    buffer_->clear();
  }
  clear_has_buffer();
}
inline const ::std::string& itemInfo_t_itemInfo::buffer() const {
  return *buffer_;
}
inline void itemInfo_t_itemInfo::set_buffer(const ::std::string& value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void itemInfo_t_itemInfo::set_buffer(const char* value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void itemInfo_t_itemInfo::set_buffer(const char* value, size_t size) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* itemInfo_t_itemInfo::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  return buffer_;
}
inline ::std::string* itemInfo_t_itemInfo::release_buffer() {
  clear_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buffer_;
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void itemInfo_t_itemInfo::set_allocated_buffer(::std::string* buffer) {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (buffer) {
    set_has_buffer();
    buffer_ = buffer;
  } else {
    clear_has_buffer();
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 shopprice = 13;
inline bool itemInfo_t_itemInfo::has_shopprice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void itemInfo_t_itemInfo::set_has_shopprice() {
  _has_bits_[0] |= 0x00001000u;
}
inline void itemInfo_t_itemInfo::clear_has_shopprice() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void itemInfo_t_itemInfo::clear_shopprice() {
  shopprice_ = 0u;
  clear_has_shopprice();
}
inline ::google::protobuf::uint32 itemInfo_t_itemInfo::shopprice() const {
  return shopprice_;
}
inline void itemInfo_t_itemInfo::set_shopprice(::google::protobuf::uint32 value) {
  set_has_shopprice();
  shopprice_ = value;
}

// -------------------------------------------------------------------

// itemInfo

// repeated .pb.itemInfo.t_itemInfo datas = 1;
inline int itemInfo::datas_size() const {
  return datas_.size();
}
inline void itemInfo::clear_datas() {
  datas_.Clear();
}
inline const ::pb::itemInfo_t_itemInfo& itemInfo::datas(int index) const {
  return datas_.Get(index);
}
inline ::pb::itemInfo_t_itemInfo* itemInfo::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::pb::itemInfo_t_itemInfo* itemInfo::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::itemInfo_t_itemInfo >&
itemInfo::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::itemInfo_t_itemInfo >*
itemInfo::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ItemInfo_2eproto__INCLUDED
