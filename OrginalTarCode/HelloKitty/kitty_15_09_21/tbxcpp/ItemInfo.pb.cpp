// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ItemInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* itemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  itemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* itemInfo_t_itemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  itemInfo_t_itemInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ItemInfo_2eproto() {
  protobuf_AddDesc_ItemInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ItemInfo.proto");
  GOOGLE_CHECK(file != NULL);
  itemInfo_descriptor_ = file->message_type(0);
  static const int itemInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo, datas_),
  };
  itemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      itemInfo_descriptor_,
      itemInfo::default_instance_,
      itemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(itemInfo));
  itemInfo_t_itemInfo_descriptor_ = itemInfo_descriptor_->nested_type(0);
  static const int itemInfo_t_itemInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, tbxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, kindvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, shopprice_),
  };
  itemInfo_t_itemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      itemInfo_t_itemInfo_descriptor_,
      itemInfo_t_itemInfo::default_instance_,
      itemInfo_t_itemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemInfo_t_itemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(itemInfo_t_itemInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ItemInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    itemInfo_descriptor_, &itemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    itemInfo_t_itemInfo_descriptor_, &itemInfo_t_itemInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ItemInfo_2eproto() {
  delete itemInfo::default_instance_;
  delete itemInfo_reflection_;
  delete itemInfo_t_itemInfo::default_instance_;
  delete itemInfo_t_itemInfo_reflection_;
}

void protobuf_AddDesc_ItemInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ItemInfo.proto\022\002pb\"\215\002\n\010itemInfo\022&\n\005dat"
    "as\030\001 \003(\0132\027.pb.itemInfo.t_itemInfo\032\330\001\n\nt_"
    "itemInfo\022\r\n\005tbxid\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\014\n\004i"
    "tem\030\003 \002(\t\022\r\n\005level\030\004 \002(\r\022\r\n\005price\030\005 \002(\r\022"
    "\014\n\004kind\030\006 \002(\r\022\021\n\tkindValue\030\007 \002(\t\022\021\n\tstar"
    "Level\030\010 \002(\r\022\014\n\004card\030\t \002(\r\022\020\n\010describe\030\n "
    "\002(\t\022\014\n\004icon\030\013 \002(\t\022\016\n\006buffer\030\014 \002(\t\022\021\n\tsho"
    "pprice\030\r \002(\r", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ItemInfo.proto", &protobuf_RegisterTypes);
  itemInfo::default_instance_ = new itemInfo();
  itemInfo_t_itemInfo::default_instance_ = new itemInfo_t_itemInfo();
  itemInfo::default_instance_->InitAsDefaultInstance();
  itemInfo_t_itemInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ItemInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ItemInfo_2eproto {
  StaticDescriptorInitializer_ItemInfo_2eproto() {
    protobuf_AddDesc_ItemInfo_2eproto();
  }
} static_descriptor_initializer_ItemInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int itemInfo_t_itemInfo::kTbxidFieldNumber;
const int itemInfo_t_itemInfo::kIdFieldNumber;
const int itemInfo_t_itemInfo::kItemFieldNumber;
const int itemInfo_t_itemInfo::kLevelFieldNumber;
const int itemInfo_t_itemInfo::kPriceFieldNumber;
const int itemInfo_t_itemInfo::kKindFieldNumber;
const int itemInfo_t_itemInfo::kKindValueFieldNumber;
const int itemInfo_t_itemInfo::kStarLevelFieldNumber;
const int itemInfo_t_itemInfo::kCardFieldNumber;
const int itemInfo_t_itemInfo::kDescribeFieldNumber;
const int itemInfo_t_itemInfo::kIconFieldNumber;
const int itemInfo_t_itemInfo::kBufferFieldNumber;
const int itemInfo_t_itemInfo::kShoppriceFieldNumber;
#endif  // !_MSC_VER

itemInfo_t_itemInfo::itemInfo_t_itemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void itemInfo_t_itemInfo::InitAsDefaultInstance() {
}

itemInfo_t_itemInfo::itemInfo_t_itemInfo(const itemInfo_t_itemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void itemInfo_t_itemInfo::SharedCtor() {
  _cached_size_ = 0;
  tbxid_ = 0u;
  id_ = 0u;
  item_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  price_ = 0u;
  kind_ = 0u;
  kindvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starlevel_ = 0u;
  card_ = 0u;
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shopprice_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

itemInfo_t_itemInfo::~itemInfo_t_itemInfo() {
  SharedDtor();
}

void itemInfo_t_itemInfo::SharedDtor() {
  if (item_ != &::google::protobuf::internal::kEmptyString) {
    delete item_;
  }
  if (kindvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete kindvalue_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

void itemInfo_t_itemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* itemInfo_t_itemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return itemInfo_t_itemInfo_descriptor_;
}

const itemInfo_t_itemInfo& itemInfo_t_itemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();
  return *default_instance_;
}

itemInfo_t_itemInfo* itemInfo_t_itemInfo::default_instance_ = NULL;

itemInfo_t_itemInfo* itemInfo_t_itemInfo::New() const {
  return new itemInfo_t_itemInfo;
}

void itemInfo_t_itemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tbxid_ = 0u;
    id_ = 0u;
    if (has_item()) {
      if (item_ != &::google::protobuf::internal::kEmptyString) {
        item_->clear();
      }
    }
    level_ = 0u;
    price_ = 0u;
    kind_ = 0u;
    if (has_kindvalue()) {
      if (kindvalue_ != &::google::protobuf::internal::kEmptyString) {
        kindvalue_->clear();
      }
    }
    starlevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    card_ = 0u;
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
    shopprice_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool itemInfo_t_itemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tbxid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbxid_)));
          set_has_tbxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // required string item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item().data(), this->item().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }

      // required uint32 price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_kind;
        break;
      }

      // required uint32 kind = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_kindValue;
        break;
      }

      // required string kindValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kindValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kindvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kindvalue().data(), this->kindvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_starLevel;
        break;
      }

      // required uint32 starLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlevel_)));
          set_has_starlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_card;
        break;
      }

      // required uint32 card = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_describe;
        break;
      }

      // required string describe = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_icon;
        break;
      }

      // required string icon = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_buffer;
        break;
      }

      // required string buffer = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buffer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buffer().data(), this->buffer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_shopprice;
        break;
      }

      // required uint32 shopprice = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopprice_)));
          set_has_shopprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void itemInfo_t_itemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tbxid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->item(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->price(), output);
  }

  // required uint32 kind = 6;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kind(), output);
  }

  // required string kindValue = 7;
  if (has_kindvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kindvalue().data(), this->kindvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->kindvalue(), output);
  }

  // required uint32 starLevel = 8;
  if (has_starlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->starlevel(), output);
  }

  // required uint32 card = 9;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->card(), output);
  }

  // required string describe = 10;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->describe(), output);
  }

  // required string icon = 11;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->icon(), output);
  }

  // required string buffer = 12;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buffer().data(), this->buffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->buffer(), output);
  }

  // required uint32 shopprice = 13;
  if (has_shopprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->shopprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* itemInfo_t_itemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tbxid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->item(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint32 price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->price(), target);
  }

  // required uint32 kind = 6;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kind(), target);
  }

  // required string kindValue = 7;
  if (has_kindvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kindvalue().data(), this->kindvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->kindvalue(), target);
  }

  // required uint32 starLevel = 8;
  if (has_starlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->starlevel(), target);
  }

  // required uint32 card = 9;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->card(), target);
  }

  // required string describe = 10;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->describe(), target);
  }

  // required string icon = 11;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->icon(), target);
  }

  // required string buffer = 12;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buffer().data(), this->buffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->buffer(), target);
  }

  // required uint32 shopprice = 13;
  if (has_shopprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->shopprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int itemInfo_t_itemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tbxid = 1;
    if (has_tbxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbxid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required uint32 kind = 6;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // required string kindValue = 7;
    if (has_kindvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kindvalue());
    }

    // required uint32 starLevel = 8;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 card = 9;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // required string describe = 10;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

    // required string icon = 11;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required string buffer = 12;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buffer());
    }

    // required uint32 shopprice = 13;
    if (has_shopprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void itemInfo_t_itemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const itemInfo_t_itemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const itemInfo_t_itemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void itemInfo_t_itemInfo::MergeFrom(const itemInfo_t_itemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tbxid()) {
      set_tbxid(from.tbxid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_kindvalue()) {
      set_kindvalue(from.kindvalue());
    }
    if (from.has_starlevel()) {
      set_starlevel(from.starlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
    if (from.has_shopprice()) {
      set_shopprice(from.shopprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void itemInfo_t_itemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void itemInfo_t_itemInfo::CopyFrom(const itemInfo_t_itemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool itemInfo_t_itemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void itemInfo_t_itemInfo::Swap(itemInfo_t_itemInfo* other) {
  if (other != this) {
    std::swap(tbxid_, other->tbxid_);
    std::swap(id_, other->id_);
    std::swap(item_, other->item_);
    std::swap(level_, other->level_);
    std::swap(price_, other->price_);
    std::swap(kind_, other->kind_);
    std::swap(kindvalue_, other->kindvalue_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(card_, other->card_);
    std::swap(describe_, other->describe_);
    std::swap(icon_, other->icon_);
    std::swap(buffer_, other->buffer_);
    std::swap(shopprice_, other->shopprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata itemInfo_t_itemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = itemInfo_t_itemInfo_descriptor_;
  metadata.reflection = itemInfo_t_itemInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int itemInfo::kDatasFieldNumber;
#endif  // !_MSC_VER

itemInfo::itemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void itemInfo::InitAsDefaultInstance() {
}

itemInfo::itemInfo(const itemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void itemInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

itemInfo::~itemInfo() {
  SharedDtor();
}

void itemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void itemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* itemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return itemInfo_descriptor_;
}

const itemInfo& itemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();
  return *default_instance_;
}

itemInfo* itemInfo::default_instance_ = NULL;

itemInfo* itemInfo::New() const {
  return new itemInfo;
}

void itemInfo::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool itemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.itemInfo.t_itemInfo datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void itemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.itemInfo.t_itemInfo datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* itemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.itemInfo.t_itemInfo datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int itemInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.itemInfo.t_itemInfo datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void itemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const itemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const itemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void itemInfo::MergeFrom(const itemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void itemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void itemInfo::CopyFrom(const itemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool itemInfo::IsInitialized() const {

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }
  return true;
}

void itemInfo::Swap(itemInfo* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata itemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = itemInfo_descriptor_;
  metadata.reflection = itemInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
