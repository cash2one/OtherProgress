// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Toy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Toy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Toy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Toy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Toy_t_Toy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Toy_t_Toy_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Toy_2eproto() {
  protobuf_AddDesc_Toy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Toy.proto");
  GOOGLE_CHECK(file != NULL);
  Toy_descriptor_ = file->message_type(0);
  static const int Toy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy, datas_),
  };
  Toy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Toy_descriptor_,
      Toy::default_instance_,
      Toy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Toy));
  Toy_t_Toy_descriptor_ = Toy_descriptor_->nested_type(0);
  static const int Toy_t_Toy_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy_t_Toy, tbxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy_t_Toy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy_t_Toy, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy_t_Toy, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy_t_Toy, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy_t_Toy, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy_t_Toy, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy_t_Toy, awardcounts_),
  };
  Toy_t_Toy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Toy_t_Toy_descriptor_,
      Toy_t_Toy::default_instance_,
      Toy_t_Toy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy_t_Toy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Toy_t_Toy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Toy_t_Toy));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Toy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Toy_descriptor_, &Toy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Toy_t_Toy_descriptor_, &Toy_t_Toy::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Toy_2eproto() {
  delete Toy::default_instance_;
  delete Toy_reflection_;
  delete Toy_t_Toy::default_instance_;
  delete Toy_t_Toy_reflection_;
}

void protobuf_AddDesc_Toy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tToy.proto\022\002pb\"\246\001\n\003Toy\022\034\n\005datas\030\001 \003(\0132\r"
    ".pb.Toy.t_Toy\032\200\001\n\005t_Toy\022\r\n\005tbxid\030\001 \002(\r\022\n"
    "\n\002id\030\002 \002(\r\022\016\n\006itemid\030\003 \002(\r\022\013\n\003num\030\004 \002(\r\022"
    "\016\n\006weight\030\005 \002(\r\022\014\n\004mark\030\006 \002(\r\022\014\n\004open\030\007 "
    "\002(\r\022\023\n\013awardCounts\030\010 \002(\r", 184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Toy.proto", &protobuf_RegisterTypes);
  Toy::default_instance_ = new Toy();
  Toy_t_Toy::default_instance_ = new Toy_t_Toy();
  Toy::default_instance_->InitAsDefaultInstance();
  Toy_t_Toy::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Toy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Toy_2eproto {
  StaticDescriptorInitializer_Toy_2eproto() {
    protobuf_AddDesc_Toy_2eproto();
  }
} static_descriptor_initializer_Toy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Toy_t_Toy::kTbxidFieldNumber;
const int Toy_t_Toy::kIdFieldNumber;
const int Toy_t_Toy::kItemidFieldNumber;
const int Toy_t_Toy::kNumFieldNumber;
const int Toy_t_Toy::kWeightFieldNumber;
const int Toy_t_Toy::kMarkFieldNumber;
const int Toy_t_Toy::kOpenFieldNumber;
const int Toy_t_Toy::kAwardCountsFieldNumber;
#endif  // !_MSC_VER

Toy_t_Toy::Toy_t_Toy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Toy_t_Toy::InitAsDefaultInstance() {
}

Toy_t_Toy::Toy_t_Toy(const Toy_t_Toy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Toy_t_Toy::SharedCtor() {
  _cached_size_ = 0;
  tbxid_ = 0u;
  id_ = 0u;
  itemid_ = 0u;
  num_ = 0u;
  weight_ = 0u;
  mark_ = 0u;
  open_ = 0u;
  awardcounts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Toy_t_Toy::~Toy_t_Toy() {
  SharedDtor();
}

void Toy_t_Toy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Toy_t_Toy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Toy_t_Toy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Toy_t_Toy_descriptor_;
}

const Toy_t_Toy& Toy_t_Toy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Toy_2eproto();
  return *default_instance_;
}

Toy_t_Toy* Toy_t_Toy::default_instance_ = NULL;

Toy_t_Toy* Toy_t_Toy::New() const {
  return new Toy_t_Toy;
}

void Toy_t_Toy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tbxid_ = 0u;
    id_ = 0u;
    itemid_ = 0u;
    num_ = 0u;
    weight_ = 0u;
    mark_ = 0u;
    open_ = 0u;
    awardcounts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Toy_t_Toy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tbxid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbxid_)));
          set_has_tbxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // required uint32 itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // required uint32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weight;
        break;
      }

      // required uint32 weight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mark;
        break;
      }

      // required uint32 mark = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_open;
        break;
      }

      // required uint32 open = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_awardCounts;
        break;
      }

      // required uint32 awardCounts = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcounts_)));
          set_has_awardcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Toy_t_Toy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tbxid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // required uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // required uint32 weight = 5;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->weight(), output);
  }

  // required uint32 mark = 6;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mark(), output);
  }

  // required uint32 open = 7;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->open(), output);
  }

  // required uint32 awardCounts = 8;
  if (has_awardcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->awardcounts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Toy_t_Toy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tbxid = 1;
  if (has_tbxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tbxid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // required uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // required uint32 weight = 5;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->weight(), target);
  }

  // required uint32 mark = 6;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mark(), target);
  }

  // required uint32 open = 7;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->open(), target);
  }

  // required uint32 awardCounts = 8;
  if (has_awardcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->awardcounts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Toy_t_Toy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tbxid = 1;
    if (has_tbxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbxid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 weight = 5;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // required uint32 mark = 6;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mark());
    }

    // required uint32 open = 7;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open());
    }

    // required uint32 awardCounts = 8;
    if (has_awardcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcounts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Toy_t_Toy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Toy_t_Toy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Toy_t_Toy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Toy_t_Toy::MergeFrom(const Toy_t_Toy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tbxid()) {
      set_tbxid(from.tbxid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_awardcounts()) {
      set_awardcounts(from.awardcounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Toy_t_Toy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Toy_t_Toy::CopyFrom(const Toy_t_Toy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Toy_t_Toy::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Toy_t_Toy::Swap(Toy_t_Toy* other) {
  if (other != this) {
    std::swap(tbxid_, other->tbxid_);
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(weight_, other->weight_);
    std::swap(mark_, other->mark_);
    std::swap(open_, other->open_);
    std::swap(awardcounts_, other->awardcounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Toy_t_Toy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Toy_t_Toy_descriptor_;
  metadata.reflection = Toy_t_Toy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Toy::kDatasFieldNumber;
#endif  // !_MSC_VER

Toy::Toy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Toy::InitAsDefaultInstance() {
}

Toy::Toy(const Toy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Toy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Toy::~Toy() {
  SharedDtor();
}

void Toy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Toy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Toy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Toy_descriptor_;
}

const Toy& Toy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Toy_2eproto();
  return *default_instance_;
}

Toy* Toy::default_instance_ = NULL;

Toy* Toy::New() const {
  return new Toy;
}

void Toy::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Toy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Toy.t_Toy datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Toy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Toy.t_Toy datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Toy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Toy.t_Toy datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Toy::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Toy.t_Toy datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Toy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Toy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Toy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Toy::MergeFrom(const Toy& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Toy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Toy::CopyFrom(const Toy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Toy::IsInitialized() const {

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }
  return true;
}

void Toy::Swap(Toy* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Toy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Toy_descriptor_;
  metadata.reflection = Toy_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
