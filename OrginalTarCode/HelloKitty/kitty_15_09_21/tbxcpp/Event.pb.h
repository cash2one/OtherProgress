// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#ifndef PROTOBUF_Event_2eproto__INCLUDED
#define PROTOBUF_Event_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Event_2eproto();
void protobuf_AssignDesc_Event_2eproto();
void protobuf_ShutdownFile_Event_2eproto();

class event;
class event_t_event;

// ===================================================================

class event_t_event : public ::google::protobuf::Message {
 public:
  event_t_event();
  virtual ~event_t_event();

  event_t_event(const event_t_event& from);

  inline event_t_event& operator=(const event_t_event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_t_event& default_instance();

  void Swap(event_t_event* other);

  // implements Message ----------------------------------------------

  event_t_event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_t_event& from);
  void MergeFrom(const event_t_event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tbxid = 1;
  inline bool has_tbxid() const;
  inline void clear_tbxid();
  static const int kTbxidFieldNumber = 1;
  inline ::google::protobuf::uint32 tbxid() const;
  inline void set_tbxid(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 order = 3;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 3;
  inline ::google::protobuf::uint32 order() const;
  inline void set_order(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 send = 5;
  inline bool has_send() const;
  inline void clear_send();
  static const int kSendFieldNumber = 5;
  inline ::google::protobuf::uint32 send() const;
  inline void set_send(::google::protobuf::uint32 value);

  // required uint32 timer = 6;
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 6;
  inline ::google::protobuf::uint32 timer() const;
  inline void set_timer(::google::protobuf::uint32 value);

  // required uint32 needbuild = 7;
  inline bool has_needbuild() const;
  inline void clear_needbuild();
  static const int kNeedbuildFieldNumber = 7;
  inline ::google::protobuf::uint32 needbuild() const;
  inline void set_needbuild(::google::protobuf::uint32 value);

  // required uint32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 task = 9;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 9;
  inline ::google::protobuf::uint32 task() const;
  inline void set_task(::google::protobuf::uint32 value);

  // required uint32 rate = 10;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 10;
  inline ::google::protobuf::uint32 rate() const;
  inline void set_rate(::google::protobuf::uint32 value);

  // required string reflushtime = 11;
  inline bool has_reflushtime() const;
  inline void clear_reflushtime();
  static const int kReflushtimeFieldNumber = 11;
  inline const ::std::string& reflushtime() const;
  inline void set_reflushtime(const ::std::string& value);
  inline void set_reflushtime(const char* value);
  inline void set_reflushtime(const char* value, size_t size);
  inline ::std::string* mutable_reflushtime();
  inline ::std::string* release_reflushtime();
  inline void set_allocated_reflushtime(::std::string* reflushtime);

  // required string icon = 12;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 12;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required string buildevent = 13;
  inline bool has_buildevent() const;
  inline void clear_buildevent();
  static const int kBuildeventFieldNumber = 13;
  inline const ::std::string& buildevent() const;
  inline void set_buildevent(const ::std::string& value);
  inline void set_buildevent(const char* value);
  inline void set_buildevent(const char* value, size_t size);
  inline ::std::string* mutable_buildevent();
  inline ::std::string* release_buildevent();
  inline void set_allocated_buildevent(::std::string* buildevent);

  // required string desript = 14;
  inline bool has_desript() const;
  inline void clear_desript();
  static const int kDesriptFieldNumber = 14;
  inline const ::std::string& desript() const;
  inline void set_desript(const ::std::string& value);
  inline void set_desript(const char* value);
  inline void set_desript(const char* value, size_t size);
  inline ::std::string* mutable_desript();
  inline ::std::string* release_desript();
  inline void set_allocated_desript(::std::string* desript);

  // required string target = 15;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 15;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // required uint32 cooltimer = 16;
  inline bool has_cooltimer() const;
  inline void clear_cooltimer();
  static const int kCooltimerFieldNumber = 16;
  inline ::google::protobuf::uint32 cooltimer() const;
  inline void set_cooltimer(::google::protobuf::uint32 value);

  // required string rewardower = 17;
  inline bool has_rewardower() const;
  inline void clear_rewardower();
  static const int kRewardowerFieldNumber = 17;
  inline const ::std::string& rewardower() const;
  inline void set_rewardower(const ::std::string& value);
  inline void set_rewardower(const char* value);
  inline void set_rewardower(const char* value, size_t size);
  inline ::std::string* mutable_rewardower();
  inline ::std::string* release_rewardower();
  inline void set_allocated_rewardower(::std::string* rewardower);

  // required string rewardguess = 18;
  inline bool has_rewardguess() const;
  inline void clear_rewardguess();
  static const int kRewardguessFieldNumber = 18;
  inline const ::std::string& rewardguess() const;
  inline void set_rewardguess(const ::std::string& value);
  inline void set_rewardguess(const char* value);
  inline void set_rewardguess(const char* value, size_t size);
  inline ::std::string* mutable_rewardguess();
  inline ::std::string* release_rewardguess();
  inline void set_allocated_rewardguess(::std::string* rewardguess);

  // @@protoc_insertion_point(class_scope:pb.event.t_event)
 private:
  inline void set_has_tbxid();
  inline void clear_has_tbxid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_send();
  inline void clear_has_send();
  inline void set_has_timer();
  inline void clear_has_timer();
  inline void set_has_needbuild();
  inline void clear_has_needbuild();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_reflushtime();
  inline void clear_has_reflushtime();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_buildevent();
  inline void clear_has_buildevent();
  inline void set_has_desript();
  inline void clear_has_desript();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_cooltimer();
  inline void clear_has_cooltimer();
  inline void set_has_rewardower();
  inline void clear_has_rewardower();
  inline void set_has_rewardguess();
  inline void clear_has_rewardguess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tbxid_;
  ::google::protobuf::uint32 id_;
  ::std::string* name_;
  ::google::protobuf::uint32 order_;
  ::google::protobuf::uint32 send_;
  ::google::protobuf::uint32 timer_;
  ::google::protobuf::uint32 needbuild_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 task_;
  ::std::string* reflushtime_;
  ::std::string* icon_;
  ::std::string* buildevent_;
  ::google::protobuf::uint32 rate_;
  ::google::protobuf::uint32 cooltimer_;
  ::std::string* desript_;
  ::std::string* target_;
  ::std::string* rewardower_;
  ::std::string* rewardguess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();

  void InitAsDefaultInstance();
  static event_t_event* default_instance_;
};
// -------------------------------------------------------------------

class event : public ::google::protobuf::Message {
 public:
  event();
  virtual ~event();

  event(const event& from);

  inline event& operator=(const event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event& default_instance();

  void Swap(event* other);

  // implements Message ----------------------------------------------

  event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event& from);
  void MergeFrom(const event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef event_t_event t_event;

  // accessors -------------------------------------------------------

  // repeated .pb.event.t_event datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::pb::event_t_event& datas(int index) const;
  inline ::pb::event_t_event* mutable_datas(int index);
  inline ::pb::event_t_event* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::event_t_event >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::event_t_event >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:pb.event)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::event_t_event > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();

  void InitAsDefaultInstance();
  static event* default_instance_;
};
// ===================================================================


// ===================================================================

// event_t_event

// required uint32 tbxid = 1;
inline bool event_t_event::has_tbxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_t_event::set_has_tbxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_t_event::clear_has_tbxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_t_event::clear_tbxid() {
  tbxid_ = 0u;
  clear_has_tbxid();
}
inline ::google::protobuf::uint32 event_t_event::tbxid() const {
  return tbxid_;
}
inline void event_t_event::set_tbxid(::google::protobuf::uint32 value) {
  set_has_tbxid();
  tbxid_ = value;
}

// required uint32 id = 2;
inline bool event_t_event::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_t_event::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_t_event::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_t_event::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 event_t_event::id() const {
  return id_;
}
inline void event_t_event::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 order = 3;
inline bool event_t_event::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void event_t_event::set_has_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void event_t_event::clear_has_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void event_t_event::clear_order() {
  order_ = 0u;
  clear_has_order();
}
inline ::google::protobuf::uint32 event_t_event::order() const {
  return order_;
}
inline void event_t_event::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
}

// required string name = 4;
inline bool event_t_event::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void event_t_event::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void event_t_event::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void event_t_event::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& event_t_event::name() const {
  return *name_;
}
inline void event_t_event::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void event_t_event::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void event_t_event::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* event_t_event::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* event_t_event::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void event_t_event::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 send = 5;
inline bool event_t_event::has_send() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void event_t_event::set_has_send() {
  _has_bits_[0] |= 0x00000010u;
}
inline void event_t_event::clear_has_send() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void event_t_event::clear_send() {
  send_ = 0u;
  clear_has_send();
}
inline ::google::protobuf::uint32 event_t_event::send() const {
  return send_;
}
inline void event_t_event::set_send(::google::protobuf::uint32 value) {
  set_has_send();
  send_ = value;
}

// required uint32 timer = 6;
inline bool event_t_event::has_timer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void event_t_event::set_has_timer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void event_t_event::clear_has_timer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void event_t_event::clear_timer() {
  timer_ = 0u;
  clear_has_timer();
}
inline ::google::protobuf::uint32 event_t_event::timer() const {
  return timer_;
}
inline void event_t_event::set_timer(::google::protobuf::uint32 value) {
  set_has_timer();
  timer_ = value;
}

// required uint32 needbuild = 7;
inline bool event_t_event::has_needbuild() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void event_t_event::set_has_needbuild() {
  _has_bits_[0] |= 0x00000040u;
}
inline void event_t_event::clear_has_needbuild() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void event_t_event::clear_needbuild() {
  needbuild_ = 0u;
  clear_has_needbuild();
}
inline ::google::protobuf::uint32 event_t_event::needbuild() const {
  return needbuild_;
}
inline void event_t_event::set_needbuild(::google::protobuf::uint32 value) {
  set_has_needbuild();
  needbuild_ = value;
}

// required uint32 level = 8;
inline bool event_t_event::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void event_t_event::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void event_t_event::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void event_t_event::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 event_t_event::level() const {
  return level_;
}
inline void event_t_event::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 task = 9;
inline bool event_t_event::has_task() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void event_t_event::set_has_task() {
  _has_bits_[0] |= 0x00000100u;
}
inline void event_t_event::clear_has_task() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void event_t_event::clear_task() {
  task_ = 0u;
  clear_has_task();
}
inline ::google::protobuf::uint32 event_t_event::task() const {
  return task_;
}
inline void event_t_event::set_task(::google::protobuf::uint32 value) {
  set_has_task();
  task_ = value;
}

// required uint32 rate = 10;
inline bool event_t_event::has_rate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void event_t_event::set_has_rate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void event_t_event::clear_has_rate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void event_t_event::clear_rate() {
  rate_ = 0u;
  clear_has_rate();
}
inline ::google::protobuf::uint32 event_t_event::rate() const {
  return rate_;
}
inline void event_t_event::set_rate(::google::protobuf::uint32 value) {
  set_has_rate();
  rate_ = value;
}

// required string reflushtime = 11;
inline bool event_t_event::has_reflushtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void event_t_event::set_has_reflushtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void event_t_event::clear_has_reflushtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void event_t_event::clear_reflushtime() {
  if (reflushtime_ != &::google::protobuf::internal::kEmptyString) {
    reflushtime_->clear();
  }
  clear_has_reflushtime();
}
inline const ::std::string& event_t_event::reflushtime() const {
  return *reflushtime_;
}
inline void event_t_event::set_reflushtime(const ::std::string& value) {
  set_has_reflushtime();
  if (reflushtime_ == &::google::protobuf::internal::kEmptyString) {
    reflushtime_ = new ::std::string;
  }
  reflushtime_->assign(value);
}
inline void event_t_event::set_reflushtime(const char* value) {
  set_has_reflushtime();
  if (reflushtime_ == &::google::protobuf::internal::kEmptyString) {
    reflushtime_ = new ::std::string;
  }
  reflushtime_->assign(value);
}
inline void event_t_event::set_reflushtime(const char* value, size_t size) {
  set_has_reflushtime();
  if (reflushtime_ == &::google::protobuf::internal::kEmptyString) {
    reflushtime_ = new ::std::string;
  }
  reflushtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* event_t_event::mutable_reflushtime() {
  set_has_reflushtime();
  if (reflushtime_ == &::google::protobuf::internal::kEmptyString) {
    reflushtime_ = new ::std::string;
  }
  return reflushtime_;
}
inline ::std::string* event_t_event::release_reflushtime() {
  clear_has_reflushtime();
  if (reflushtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reflushtime_;
    reflushtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void event_t_event::set_allocated_reflushtime(::std::string* reflushtime) {
  if (reflushtime_ != &::google::protobuf::internal::kEmptyString) {
    delete reflushtime_;
  }
  if (reflushtime) {
    set_has_reflushtime();
    reflushtime_ = reflushtime;
  } else {
    clear_has_reflushtime();
    reflushtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string icon = 12;
inline bool event_t_event::has_icon() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void event_t_event::set_has_icon() {
  _has_bits_[0] |= 0x00000800u;
}
inline void event_t_event::clear_has_icon() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void event_t_event::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& event_t_event::icon() const {
  return *icon_;
}
inline void event_t_event::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void event_t_event::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void event_t_event::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* event_t_event::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* event_t_event::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void event_t_event::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string buildevent = 13;
inline bool event_t_event::has_buildevent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void event_t_event::set_has_buildevent() {
  _has_bits_[0] |= 0x00001000u;
}
inline void event_t_event::clear_has_buildevent() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void event_t_event::clear_buildevent() {
  if (buildevent_ != &::google::protobuf::internal::kEmptyString) {
    buildevent_->clear();
  }
  clear_has_buildevent();
}
inline const ::std::string& event_t_event::buildevent() const {
  return *buildevent_;
}
inline void event_t_event::set_buildevent(const ::std::string& value) {
  set_has_buildevent();
  if (buildevent_ == &::google::protobuf::internal::kEmptyString) {
    buildevent_ = new ::std::string;
  }
  buildevent_->assign(value);
}
inline void event_t_event::set_buildevent(const char* value) {
  set_has_buildevent();
  if (buildevent_ == &::google::protobuf::internal::kEmptyString) {
    buildevent_ = new ::std::string;
  }
  buildevent_->assign(value);
}
inline void event_t_event::set_buildevent(const char* value, size_t size) {
  set_has_buildevent();
  if (buildevent_ == &::google::protobuf::internal::kEmptyString) {
    buildevent_ = new ::std::string;
  }
  buildevent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* event_t_event::mutable_buildevent() {
  set_has_buildevent();
  if (buildevent_ == &::google::protobuf::internal::kEmptyString) {
    buildevent_ = new ::std::string;
  }
  return buildevent_;
}
inline ::std::string* event_t_event::release_buildevent() {
  clear_has_buildevent();
  if (buildevent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buildevent_;
    buildevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void event_t_event::set_allocated_buildevent(::std::string* buildevent) {
  if (buildevent_ != &::google::protobuf::internal::kEmptyString) {
    delete buildevent_;
  }
  if (buildevent) {
    set_has_buildevent();
    buildevent_ = buildevent;
  } else {
    clear_has_buildevent();
    buildevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string desript = 14;
inline bool event_t_event::has_desript() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void event_t_event::set_has_desript() {
  _has_bits_[0] |= 0x00002000u;
}
inline void event_t_event::clear_has_desript() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void event_t_event::clear_desript() {
  if (desript_ != &::google::protobuf::internal::kEmptyString) {
    desript_->clear();
  }
  clear_has_desript();
}
inline const ::std::string& event_t_event::desript() const {
  return *desript_;
}
inline void event_t_event::set_desript(const ::std::string& value) {
  set_has_desript();
  if (desript_ == &::google::protobuf::internal::kEmptyString) {
    desript_ = new ::std::string;
  }
  desript_->assign(value);
}
inline void event_t_event::set_desript(const char* value) {
  set_has_desript();
  if (desript_ == &::google::protobuf::internal::kEmptyString) {
    desript_ = new ::std::string;
  }
  desript_->assign(value);
}
inline void event_t_event::set_desript(const char* value, size_t size) {
  set_has_desript();
  if (desript_ == &::google::protobuf::internal::kEmptyString) {
    desript_ = new ::std::string;
  }
  desript_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* event_t_event::mutable_desript() {
  set_has_desript();
  if (desript_ == &::google::protobuf::internal::kEmptyString) {
    desript_ = new ::std::string;
  }
  return desript_;
}
inline ::std::string* event_t_event::release_desript() {
  clear_has_desript();
  if (desript_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desript_;
    desript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void event_t_event::set_allocated_desript(::std::string* desript) {
  if (desript_ != &::google::protobuf::internal::kEmptyString) {
    delete desript_;
  }
  if (desript) {
    set_has_desript();
    desript_ = desript;
  } else {
    clear_has_desript();
    desript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string target = 15;
inline bool event_t_event::has_target() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void event_t_event::set_has_target() {
  _has_bits_[0] |= 0x00004000u;
}
inline void event_t_event::clear_has_target() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void event_t_event::clear_target() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& event_t_event::target() const {
  return *target_;
}
inline void event_t_event::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void event_t_event::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void event_t_event::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* event_t_event::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  return target_;
}
inline ::std::string* event_t_event::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void event_t_event::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 cooltimer = 16;
inline bool event_t_event::has_cooltimer() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void event_t_event::set_has_cooltimer() {
  _has_bits_[0] |= 0x00008000u;
}
inline void event_t_event::clear_has_cooltimer() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void event_t_event::clear_cooltimer() {
  cooltimer_ = 0u;
  clear_has_cooltimer();
}
inline ::google::protobuf::uint32 event_t_event::cooltimer() const {
  return cooltimer_;
}
inline void event_t_event::set_cooltimer(::google::protobuf::uint32 value) {
  set_has_cooltimer();
  cooltimer_ = value;
}

// required string rewardower = 17;
inline bool event_t_event::has_rewardower() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void event_t_event::set_has_rewardower() {
  _has_bits_[0] |= 0x00010000u;
}
inline void event_t_event::clear_has_rewardower() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void event_t_event::clear_rewardower() {
  if (rewardower_ != &::google::protobuf::internal::kEmptyString) {
    rewardower_->clear();
  }
  clear_has_rewardower();
}
inline const ::std::string& event_t_event::rewardower() const {
  return *rewardower_;
}
inline void event_t_event::set_rewardower(const ::std::string& value) {
  set_has_rewardower();
  if (rewardower_ == &::google::protobuf::internal::kEmptyString) {
    rewardower_ = new ::std::string;
  }
  rewardower_->assign(value);
}
inline void event_t_event::set_rewardower(const char* value) {
  set_has_rewardower();
  if (rewardower_ == &::google::protobuf::internal::kEmptyString) {
    rewardower_ = new ::std::string;
  }
  rewardower_->assign(value);
}
inline void event_t_event::set_rewardower(const char* value, size_t size) {
  set_has_rewardower();
  if (rewardower_ == &::google::protobuf::internal::kEmptyString) {
    rewardower_ = new ::std::string;
  }
  rewardower_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* event_t_event::mutable_rewardower() {
  set_has_rewardower();
  if (rewardower_ == &::google::protobuf::internal::kEmptyString) {
    rewardower_ = new ::std::string;
  }
  return rewardower_;
}
inline ::std::string* event_t_event::release_rewardower() {
  clear_has_rewardower();
  if (rewardower_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rewardower_;
    rewardower_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void event_t_event::set_allocated_rewardower(::std::string* rewardower) {
  if (rewardower_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardower_;
  }
  if (rewardower) {
    set_has_rewardower();
    rewardower_ = rewardower;
  } else {
    clear_has_rewardower();
    rewardower_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string rewardguess = 18;
inline bool event_t_event::has_rewardguess() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void event_t_event::set_has_rewardguess() {
  _has_bits_[0] |= 0x00020000u;
}
inline void event_t_event::clear_has_rewardguess() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void event_t_event::clear_rewardguess() {
  if (rewardguess_ != &::google::protobuf::internal::kEmptyString) {
    rewardguess_->clear();
  }
  clear_has_rewardguess();
}
inline const ::std::string& event_t_event::rewardguess() const {
  return *rewardguess_;
}
inline void event_t_event::set_rewardguess(const ::std::string& value) {
  set_has_rewardguess();
  if (rewardguess_ == &::google::protobuf::internal::kEmptyString) {
    rewardguess_ = new ::std::string;
  }
  rewardguess_->assign(value);
}
inline void event_t_event::set_rewardguess(const char* value) {
  set_has_rewardguess();
  if (rewardguess_ == &::google::protobuf::internal::kEmptyString) {
    rewardguess_ = new ::std::string;
  }
  rewardguess_->assign(value);
}
inline void event_t_event::set_rewardguess(const char* value, size_t size) {
  set_has_rewardguess();
  if (rewardguess_ == &::google::protobuf::internal::kEmptyString) {
    rewardguess_ = new ::std::string;
  }
  rewardguess_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* event_t_event::mutable_rewardguess() {
  set_has_rewardguess();
  if (rewardguess_ == &::google::protobuf::internal::kEmptyString) {
    rewardguess_ = new ::std::string;
  }
  return rewardguess_;
}
inline ::std::string* event_t_event::release_rewardguess() {
  clear_has_rewardguess();
  if (rewardguess_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rewardguess_;
    rewardguess_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void event_t_event::set_allocated_rewardguess(::std::string* rewardguess) {
  if (rewardguess_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardguess_;
  }
  if (rewardguess) {
    set_has_rewardguess();
    rewardguess_ = rewardguess;
  } else {
    clear_has_rewardguess();
    rewardguess_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// event

// repeated .pb.event.t_event datas = 1;
inline int event::datas_size() const {
  return datas_.size();
}
inline void event::clear_datas() {
  datas_.Clear();
}
inline const ::pb::event_t_event& event::datas(int index) const {
  return datas_.Get(index);
}
inline ::pb::event_t_event* event::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::pb::event_t_event* event::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::event_t_event >&
event::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::event_t_event >*
event::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Event_2eproto__INCLUDED
