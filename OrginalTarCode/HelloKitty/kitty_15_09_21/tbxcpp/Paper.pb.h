// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Paper.proto

#ifndef PROTOBUF_Paper_2eproto__INCLUDED
#define PROTOBUF_Paper_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Paper_2eproto();
void protobuf_AssignDesc_Paper_2eproto();
void protobuf_ShutdownFile_Paper_2eproto();

class Paper;
class Paper_t_Paper;

// ===================================================================

class Paper_t_Paper : public ::google::protobuf::Message {
 public:
  Paper_t_Paper();
  virtual ~Paper_t_Paper();

  Paper_t_Paper(const Paper_t_Paper& from);

  inline Paper_t_Paper& operator=(const Paper_t_Paper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Paper_t_Paper& default_instance();

  void Swap(Paper_t_Paper* other);

  // implements Message ----------------------------------------------

  Paper_t_Paper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Paper_t_Paper& from);
  void MergeFrom(const Paper_t_Paper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tbxid = 1;
  inline bool has_tbxid() const;
  inline void clear_tbxid();
  static const int kTbxidFieldNumber = 1;
  inline ::google::protobuf::uint32 tbxid() const;
  inline void set_tbxid(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string material = 3;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 3;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  inline void set_allocated_material(::std::string* material);

  // required string produce = 4;
  inline bool has_produce() const;
  inline void clear_produce();
  static const int kProduceFieldNumber = 4;
  inline const ::std::string& produce() const;
  inline void set_produce(const ::std::string& value);
  inline void set_produce(const char* value);
  inline void set_produce(const char* value, size_t size);
  inline ::std::string* mutable_produce();
  inline ::std::string* release_produce();
  inline void set_allocated_produce(::std::string* produce);

  // required uint32 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Paper.t_Paper)
 private:
  inline void set_has_tbxid();
  inline void clear_has_tbxid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_produce();
  inline void clear_has_produce();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tbxid_;
  ::google::protobuf::uint32 id_;
  ::std::string* material_;
  ::std::string* produce_;
  ::google::protobuf::uint32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Paper_2eproto();
  friend void protobuf_AssignDesc_Paper_2eproto();
  friend void protobuf_ShutdownFile_Paper_2eproto();

  void InitAsDefaultInstance();
  static Paper_t_Paper* default_instance_;
};
// -------------------------------------------------------------------

class Paper : public ::google::protobuf::Message {
 public:
  Paper();
  virtual ~Paper();

  Paper(const Paper& from);

  inline Paper& operator=(const Paper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Paper& default_instance();

  void Swap(Paper* other);

  // implements Message ----------------------------------------------

  Paper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Paper& from);
  void MergeFrom(const Paper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Paper_t_Paper t_Paper;

  // accessors -------------------------------------------------------

  // repeated .pb.Paper.t_Paper datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::pb::Paper_t_Paper& datas(int index) const;
  inline ::pb::Paper_t_Paper* mutable_datas(int index);
  inline ::pb::Paper_t_Paper* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Paper_t_Paper >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Paper_t_Paper >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:pb.Paper)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Paper_t_Paper > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Paper_2eproto();
  friend void protobuf_AssignDesc_Paper_2eproto();
  friend void protobuf_ShutdownFile_Paper_2eproto();

  void InitAsDefaultInstance();
  static Paper* default_instance_;
};
// ===================================================================


// ===================================================================

// Paper_t_Paper

// required uint32 tbxid = 1;
inline bool Paper_t_Paper::has_tbxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Paper_t_Paper::set_has_tbxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Paper_t_Paper::clear_has_tbxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Paper_t_Paper::clear_tbxid() {
  tbxid_ = 0u;
  clear_has_tbxid();
}
inline ::google::protobuf::uint32 Paper_t_Paper::tbxid() const {
  return tbxid_;
}
inline void Paper_t_Paper::set_tbxid(::google::protobuf::uint32 value) {
  set_has_tbxid();
  tbxid_ = value;
}

// required uint32 id = 2;
inline bool Paper_t_Paper::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Paper_t_Paper::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Paper_t_Paper::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Paper_t_Paper::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Paper_t_Paper::id() const {
  return id_;
}
inline void Paper_t_Paper::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string material = 3;
inline bool Paper_t_Paper::has_material() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Paper_t_Paper::set_has_material() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Paper_t_Paper::clear_has_material() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Paper_t_Paper::clear_material() {
  if (material_ != &::google::protobuf::internal::kEmptyString) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& Paper_t_Paper::material() const {
  return *material_;
}
inline void Paper_t_Paper::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::kEmptyString) {
    material_ = new ::std::string;
  }
  material_->assign(value);
}
inline void Paper_t_Paper::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::kEmptyString) {
    material_ = new ::std::string;
  }
  material_->assign(value);
}
inline void Paper_t_Paper::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::kEmptyString) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Paper_t_Paper::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::kEmptyString) {
    material_ = new ::std::string;
  }
  return material_;
}
inline ::std::string* Paper_t_Paper::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Paper_t_Paper::set_allocated_material(::std::string* material) {
  if (material_ != &::google::protobuf::internal::kEmptyString) {
    delete material_;
  }
  if (material) {
    set_has_material();
    material_ = material;
  } else {
    clear_has_material();
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string produce = 4;
inline bool Paper_t_Paper::has_produce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Paper_t_Paper::set_has_produce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Paper_t_Paper::clear_has_produce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Paper_t_Paper::clear_produce() {
  if (produce_ != &::google::protobuf::internal::kEmptyString) {
    produce_->clear();
  }
  clear_has_produce();
}
inline const ::std::string& Paper_t_Paper::produce() const {
  return *produce_;
}
inline void Paper_t_Paper::set_produce(const ::std::string& value) {
  set_has_produce();
  if (produce_ == &::google::protobuf::internal::kEmptyString) {
    produce_ = new ::std::string;
  }
  produce_->assign(value);
}
inline void Paper_t_Paper::set_produce(const char* value) {
  set_has_produce();
  if (produce_ == &::google::protobuf::internal::kEmptyString) {
    produce_ = new ::std::string;
  }
  produce_->assign(value);
}
inline void Paper_t_Paper::set_produce(const char* value, size_t size) {
  set_has_produce();
  if (produce_ == &::google::protobuf::internal::kEmptyString) {
    produce_ = new ::std::string;
  }
  produce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Paper_t_Paper::mutable_produce() {
  set_has_produce();
  if (produce_ == &::google::protobuf::internal::kEmptyString) {
    produce_ = new ::std::string;
  }
  return produce_;
}
inline ::std::string* Paper_t_Paper::release_produce() {
  clear_has_produce();
  if (produce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = produce_;
    produce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Paper_t_Paper::set_allocated_produce(::std::string* produce) {
  if (produce_ != &::google::protobuf::internal::kEmptyString) {
    delete produce_;
  }
  if (produce) {
    set_has_produce();
    produce_ = produce;
  } else {
    clear_has_produce();
    produce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 price = 5;
inline bool Paper_t_Paper::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Paper_t_Paper::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Paper_t_Paper::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Paper_t_Paper::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 Paper_t_Paper::price() const {
  return price_;
}
inline void Paper_t_Paper::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// Paper

// repeated .pb.Paper.t_Paper datas = 1;
inline int Paper::datas_size() const {
  return datas_.size();
}
inline void Paper::clear_datas() {
  datas_.Clear();
}
inline const ::pb::Paper_t_Paper& Paper::datas(int index) const {
  return datas_.Get(index);
}
inline ::pb::Paper_t_Paper* Paper::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::pb::Paper_t_Paper* Paper::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Paper_t_Paper >&
Paper::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Paper_t_Paper >*
Paper::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Paper_2eproto__INCLUDED
