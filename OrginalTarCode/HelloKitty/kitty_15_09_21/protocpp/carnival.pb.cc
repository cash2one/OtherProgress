// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carnival.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "carnival.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* ReqOpenCarnical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpenCarnical_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOpenCarnical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOpenCarnical_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarnivalShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarnivalShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateCarnicalBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateCarnicalBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClickCarnicalBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClickCarnicalBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClickCarnicalBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClickCarnicalBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuyCarnicalBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuyCarnicalBox_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_carnival_2eproto() {
  protobuf_AddDesc_carnival_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "carnival.proto");
  GOOGLE_CHECK(file != NULL);
  ReqOpenCarnical_descriptor_ = file->message_type(0);
  static const int ReqOpenCarnical_offsets_[1] = {
  };
  ReqOpenCarnical_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpenCarnical_descriptor_,
      ReqOpenCarnical::default_instance_,
      ReqOpenCarnical_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenCarnical, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenCarnical, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpenCarnical));
  AckOpenCarnical_descriptor_ = file->message_type(1);
  static const int AckOpenCarnical_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpenCarnical, updatecharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpenCarnical, ret_),
  };
  AckOpenCarnical_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOpenCarnical_descriptor_,
      AckOpenCarnical::default_instance_,
      AckOpenCarnical_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpenCarnical, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpenCarnical, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOpenCarnical));
  CarnivalShopData_descriptor_ = file->message_type(2);
  static const int CarnivalShopData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShopData, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShopData, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShopData, randitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShopData, price_),
  };
  CarnivalShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarnivalShopData_descriptor_,
      CarnivalShopData::default_instance_,
      CarnivalShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarnivalShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarnivalShopData));
  AckUpdateCarnicalBox_descriptor_ = file->message_type(3);
  static const int AckUpdateCarnicalBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCarnicalBox, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCarnicalBox, disapper_),
  };
  AckUpdateCarnicalBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateCarnicalBox_descriptor_,
      AckUpdateCarnicalBox::default_instance_,
      AckUpdateCarnicalBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCarnicalBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCarnicalBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateCarnicalBox));
  ReqClickCarnicalBox_descriptor_ = file->message_type(4);
  static const int ReqClickCarnicalBox_offsets_[1] = {
  };
  ReqClickCarnicalBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqClickCarnicalBox_descriptor_,
      ReqClickCarnicalBox::default_instance_,
      ReqClickCarnicalBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClickCarnicalBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClickCarnicalBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqClickCarnicalBox));
  AckClickCarnicalBox_descriptor_ = file->message_type(5);
  static const int AckClickCarnicalBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClickCarnicalBox, randitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClickCarnicalBox, price_),
  };
  AckClickCarnicalBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClickCarnicalBox_descriptor_,
      AckClickCarnicalBox::default_instance_,
      AckClickCarnicalBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClickCarnicalBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClickCarnicalBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClickCarnicalBox));
  ReqBuyCarnicalBox_descriptor_ = file->message_type(6);
  static const int ReqBuyCarnicalBox_offsets_[1] = {
  };
  ReqBuyCarnicalBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuyCarnicalBox_descriptor_,
      ReqBuyCarnicalBox::default_instance_,
      ReqBuyCarnicalBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyCarnicalBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyCarnicalBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuyCarnicalBox));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_carnival_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpenCarnical_descriptor_, &ReqOpenCarnical::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOpenCarnical_descriptor_, &AckOpenCarnical::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarnivalShopData_descriptor_, &CarnivalShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateCarnicalBox_descriptor_, &AckUpdateCarnicalBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqClickCarnicalBox_descriptor_, &ReqClickCarnicalBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClickCarnicalBox_descriptor_, &AckClickCarnicalBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuyCarnicalBox_descriptor_, &ReqBuyCarnicalBox::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_carnival_2eproto() {
  delete ReqOpenCarnical::default_instance_;
  delete ReqOpenCarnical_reflection_;
  delete AckOpenCarnical::default_instance_;
  delete AckOpenCarnical_reflection_;
  delete CarnivalShopData::default_instance_;
  delete CarnivalShopData_reflection_;
  delete AckUpdateCarnicalBox::default_instance_;
  delete AckUpdateCarnicalBox_reflection_;
  delete ReqClickCarnicalBox::default_instance_;
  delete ReqClickCarnicalBox_reflection_;
  delete AckClickCarnicalBox::default_instance_;
  delete AckClickCarnicalBox_reflection_;
  delete ReqBuyCarnicalBox::default_instance_;
  delete ReqBuyCarnicalBox_reflection_;
}

void protobuf_AddDesc_carnival_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016carnival.proto\022\021HelloKittyMsgData\"\021\n\017R"
    "eqOpenCarnical\"4\n\017AckOpenCarnical\022\024\n\014upd"
    "atecharid\030\001 \002(\004\022\013\n\003ret\030\002 \002(\010\"T\n\020Carnival"
    "ShopData\022\021\n\tbegintime\030\001 \002(\r\022\014\n\004item\030\002 \002("
    "\r\022\020\n\010randitem\030\003 \003(\r\022\r\n\005price\030\004 \002(\r\";\n\024Ac"
    "kUpdateCarnicalBox\022\021\n\tbegintime\030\001 \002(\r\022\020\n"
    "\010disapper\030\002 \002(\010\"\025\n\023ReqClickCarnicalBox\"6"
    "\n\023AckClickCarnicalBox\022\020\n\010randitem\030\001 \003(\r\022"
    "\r\n\005price\030\002 \002(\r\"\023\n\021ReqBuyCarnicalBox", 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "carnival.proto", &protobuf_RegisterTypes);
  ReqOpenCarnical::default_instance_ = new ReqOpenCarnical();
  AckOpenCarnical::default_instance_ = new AckOpenCarnical();
  CarnivalShopData::default_instance_ = new CarnivalShopData();
  AckUpdateCarnicalBox::default_instance_ = new AckUpdateCarnicalBox();
  ReqClickCarnicalBox::default_instance_ = new ReqClickCarnicalBox();
  AckClickCarnicalBox::default_instance_ = new AckClickCarnicalBox();
  ReqBuyCarnicalBox::default_instance_ = new ReqBuyCarnicalBox();
  ReqOpenCarnical::default_instance_->InitAsDefaultInstance();
  AckOpenCarnical::default_instance_->InitAsDefaultInstance();
  CarnivalShopData::default_instance_->InitAsDefaultInstance();
  AckUpdateCarnicalBox::default_instance_->InitAsDefaultInstance();
  ReqClickCarnicalBox::default_instance_->InitAsDefaultInstance();
  AckClickCarnicalBox::default_instance_->InitAsDefaultInstance();
  ReqBuyCarnicalBox::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_carnival_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_carnival_2eproto {
  StaticDescriptorInitializer_carnival_2eproto() {
    protobuf_AddDesc_carnival_2eproto();
  }
} static_descriptor_initializer_carnival_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqOpenCarnical::ReqOpenCarnical()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpenCarnical::InitAsDefaultInstance() {
}

ReqOpenCarnical::ReqOpenCarnical(const ReqOpenCarnical& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpenCarnical::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpenCarnical::~ReqOpenCarnical() {
  SharedDtor();
}

void ReqOpenCarnical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpenCarnical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpenCarnical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpenCarnical_descriptor_;
}

const ReqOpenCarnical& ReqOpenCarnical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carnival_2eproto();
  return *default_instance_;
}

ReqOpenCarnical* ReqOpenCarnical::default_instance_ = NULL;

ReqOpenCarnical* ReqOpenCarnical::New() const {
  return new ReqOpenCarnical;
}

void ReqOpenCarnical::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpenCarnical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqOpenCarnical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpenCarnical::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpenCarnical::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpenCarnical::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpenCarnical* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpenCarnical*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpenCarnical::MergeFrom(const ReqOpenCarnical& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpenCarnical::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpenCarnical::CopyFrom(const ReqOpenCarnical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpenCarnical::IsInitialized() const {

  return true;
}

void ReqOpenCarnical::Swap(ReqOpenCarnical* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpenCarnical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpenCarnical_descriptor_;
  metadata.reflection = ReqOpenCarnical_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOpenCarnical::kUpdatecharidFieldNumber;
const int AckOpenCarnical::kRetFieldNumber;
#endif  // !_MSC_VER

AckOpenCarnical::AckOpenCarnical()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOpenCarnical::InitAsDefaultInstance() {
}

AckOpenCarnical::AckOpenCarnical(const AckOpenCarnical& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOpenCarnical::SharedCtor() {
  _cached_size_ = 0;
  updatecharid_ = GOOGLE_ULONGLONG(0);
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOpenCarnical::~AckOpenCarnical() {
  SharedDtor();
}

void AckOpenCarnical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOpenCarnical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOpenCarnical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOpenCarnical_descriptor_;
}

const AckOpenCarnical& AckOpenCarnical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carnival_2eproto();
  return *default_instance_;
}

AckOpenCarnical* AckOpenCarnical::default_instance_ = NULL;

AckOpenCarnical* AckOpenCarnical::New() const {
  return new AckOpenCarnical;
}

void AckOpenCarnical::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    updatecharid_ = GOOGLE_ULONGLONG(0);
    ret_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOpenCarnical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 updatecharid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatecharid_)));
          set_has_updatecharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required bool ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOpenCarnical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 updatecharid = 1;
  if (has_updatecharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->updatecharid(), output);
  }

  // required bool ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOpenCarnical::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 updatecharid = 1;
  if (has_updatecharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->updatecharid(), target);
  }

  // required bool ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOpenCarnical::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 updatecharid = 1;
    if (has_updatecharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatecharid());
    }

    // required bool ret = 2;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOpenCarnical::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOpenCarnical* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOpenCarnical*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOpenCarnical::MergeFrom(const AckOpenCarnical& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatecharid()) {
      set_updatecharid(from.updatecharid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOpenCarnical::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOpenCarnical::CopyFrom(const AckOpenCarnical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOpenCarnical::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckOpenCarnical::Swap(AckOpenCarnical* other) {
  if (other != this) {
    std::swap(updatecharid_, other->updatecharid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOpenCarnical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOpenCarnical_descriptor_;
  metadata.reflection = AckOpenCarnical_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CarnivalShopData::kBegintimeFieldNumber;
const int CarnivalShopData::kItemFieldNumber;
const int CarnivalShopData::kRanditemFieldNumber;
const int CarnivalShopData::kPriceFieldNumber;
#endif  // !_MSC_VER

CarnivalShopData::CarnivalShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarnivalShopData::InitAsDefaultInstance() {
}

CarnivalShopData::CarnivalShopData(const CarnivalShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarnivalShopData::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = 0u;
  item_ = 0u;
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarnivalShopData::~CarnivalShopData() {
  SharedDtor();
}

void CarnivalShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarnivalShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarnivalShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarnivalShopData_descriptor_;
}

const CarnivalShopData& CarnivalShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carnival_2eproto();
  return *default_instance_;
}

CarnivalShopData* CarnivalShopData::default_instance_ = NULL;

CarnivalShopData* CarnivalShopData::New() const {
  return new CarnivalShopData;
}

void CarnivalShopData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begintime_ = 0u;
    item_ = 0u;
    price_ = 0u;
  }
  randitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarnivalShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 begintime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // required uint32 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_randitem;
        break;
      }

      // repeated uint32 randitem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_randitem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_randitem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_randitem;
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // required uint32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarnivalShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 begintime = 1;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->begintime(), output);
  }

  // required uint32 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item(), output);
  }

  // repeated uint32 randitem = 3;
  for (int i = 0; i < this->randitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->randitem(i), output);
  }

  // required uint32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarnivalShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 begintime = 1;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->begintime(), target);
  }

  // required uint32 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item(), target);
  }

  // repeated uint32 randitem = 3;
  for (int i = 0; i < this->randitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->randitem(i), target);
  }

  // required uint32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarnivalShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 begintime = 1;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // required uint32 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item());
    }

    // required uint32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  // repeated uint32 randitem = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->randitem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->randitem(i));
    }
    total_size += 1 * this->randitem_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarnivalShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarnivalShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarnivalShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarnivalShopData::MergeFrom(const CarnivalShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  randitem_.MergeFrom(from.randitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarnivalShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarnivalShopData::CopyFrom(const CarnivalShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarnivalShopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void CarnivalShopData::Swap(CarnivalShopData* other) {
  if (other != this) {
    std::swap(begintime_, other->begintime_);
    std::swap(item_, other->item_);
    randitem_.Swap(&other->randitem_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarnivalShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarnivalShopData_descriptor_;
  metadata.reflection = CarnivalShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateCarnicalBox::kBegintimeFieldNumber;
const int AckUpdateCarnicalBox::kDisapperFieldNumber;
#endif  // !_MSC_VER

AckUpdateCarnicalBox::AckUpdateCarnicalBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateCarnicalBox::InitAsDefaultInstance() {
}

AckUpdateCarnicalBox::AckUpdateCarnicalBox(const AckUpdateCarnicalBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateCarnicalBox::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = 0u;
  disapper_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateCarnicalBox::~AckUpdateCarnicalBox() {
  SharedDtor();
}

void AckUpdateCarnicalBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateCarnicalBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateCarnicalBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateCarnicalBox_descriptor_;
}

const AckUpdateCarnicalBox& AckUpdateCarnicalBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carnival_2eproto();
  return *default_instance_;
}

AckUpdateCarnicalBox* AckUpdateCarnicalBox::default_instance_ = NULL;

AckUpdateCarnicalBox* AckUpdateCarnicalBox::New() const {
  return new AckUpdateCarnicalBox;
}

void AckUpdateCarnicalBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begintime_ = 0u;
    disapper_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateCarnicalBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 begintime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_disapper;
        break;
      }

      // required bool disapper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disapper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disapper_)));
          set_has_disapper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateCarnicalBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 begintime = 1;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->begintime(), output);
  }

  // required bool disapper = 2;
  if (has_disapper()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disapper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateCarnicalBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 begintime = 1;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->begintime(), target);
  }

  // required bool disapper = 2;
  if (has_disapper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disapper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateCarnicalBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 begintime = 1;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // required bool disapper = 2;
    if (has_disapper()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateCarnicalBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateCarnicalBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateCarnicalBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateCarnicalBox::MergeFrom(const AckUpdateCarnicalBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_disapper()) {
      set_disapper(from.disapper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateCarnicalBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateCarnicalBox::CopyFrom(const AckUpdateCarnicalBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateCarnicalBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckUpdateCarnicalBox::Swap(AckUpdateCarnicalBox* other) {
  if (other != this) {
    std::swap(begintime_, other->begintime_);
    std::swap(disapper_, other->disapper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateCarnicalBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateCarnicalBox_descriptor_;
  metadata.reflection = AckUpdateCarnicalBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqClickCarnicalBox::ReqClickCarnicalBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqClickCarnicalBox::InitAsDefaultInstance() {
}

ReqClickCarnicalBox::ReqClickCarnicalBox(const ReqClickCarnicalBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqClickCarnicalBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqClickCarnicalBox::~ReqClickCarnicalBox() {
  SharedDtor();
}

void ReqClickCarnicalBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqClickCarnicalBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClickCarnicalBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClickCarnicalBox_descriptor_;
}

const ReqClickCarnicalBox& ReqClickCarnicalBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carnival_2eproto();
  return *default_instance_;
}

ReqClickCarnicalBox* ReqClickCarnicalBox::default_instance_ = NULL;

ReqClickCarnicalBox* ReqClickCarnicalBox::New() const {
  return new ReqClickCarnicalBox;
}

void ReqClickCarnicalBox::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqClickCarnicalBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqClickCarnicalBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqClickCarnicalBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqClickCarnicalBox::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClickCarnicalBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqClickCarnicalBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqClickCarnicalBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqClickCarnicalBox::MergeFrom(const ReqClickCarnicalBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqClickCarnicalBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClickCarnicalBox::CopyFrom(const ReqClickCarnicalBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClickCarnicalBox::IsInitialized() const {

  return true;
}

void ReqClickCarnicalBox::Swap(ReqClickCarnicalBox* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqClickCarnicalBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClickCarnicalBox_descriptor_;
  metadata.reflection = ReqClickCarnicalBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClickCarnicalBox::kRanditemFieldNumber;
const int AckClickCarnicalBox::kPriceFieldNumber;
#endif  // !_MSC_VER

AckClickCarnicalBox::AckClickCarnicalBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClickCarnicalBox::InitAsDefaultInstance() {
}

AckClickCarnicalBox::AckClickCarnicalBox(const AckClickCarnicalBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClickCarnicalBox::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClickCarnicalBox::~AckClickCarnicalBox() {
  SharedDtor();
}

void AckClickCarnicalBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClickCarnicalBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClickCarnicalBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClickCarnicalBox_descriptor_;
}

const AckClickCarnicalBox& AckClickCarnicalBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carnival_2eproto();
  return *default_instance_;
}

AckClickCarnicalBox* AckClickCarnicalBox::default_instance_ = NULL;

AckClickCarnicalBox* AckClickCarnicalBox::New() const {
  return new AckClickCarnicalBox;
}

void AckClickCarnicalBox::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    price_ = 0u;
  }
  randitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClickCarnicalBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 randitem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_randitem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_randitem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_randitem;
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // required uint32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClickCarnicalBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 randitem = 1;
  for (int i = 0; i < this->randitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->randitem(i), output);
  }

  // required uint32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClickCarnicalBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 randitem = 1;
  for (int i = 0; i < this->randitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->randitem(i), target);
  }

  // required uint32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClickCarnicalBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  // repeated uint32 randitem = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->randitem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->randitem(i));
    }
    total_size += 1 * this->randitem_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClickCarnicalBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClickCarnicalBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClickCarnicalBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClickCarnicalBox::MergeFrom(const AckClickCarnicalBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  randitem_.MergeFrom(from.randitem_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClickCarnicalBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClickCarnicalBox::CopyFrom(const AckClickCarnicalBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClickCarnicalBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void AckClickCarnicalBox::Swap(AckClickCarnicalBox* other) {
  if (other != this) {
    randitem_.Swap(&other->randitem_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClickCarnicalBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClickCarnicalBox_descriptor_;
  metadata.reflection = AckClickCarnicalBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqBuyCarnicalBox::ReqBuyCarnicalBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuyCarnicalBox::InitAsDefaultInstance() {
}

ReqBuyCarnicalBox::ReqBuyCarnicalBox(const ReqBuyCarnicalBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuyCarnicalBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuyCarnicalBox::~ReqBuyCarnicalBox() {
  SharedDtor();
}

void ReqBuyCarnicalBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBuyCarnicalBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuyCarnicalBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuyCarnicalBox_descriptor_;
}

const ReqBuyCarnicalBox& ReqBuyCarnicalBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carnival_2eproto();
  return *default_instance_;
}

ReqBuyCarnicalBox* ReqBuyCarnicalBox::default_instance_ = NULL;

ReqBuyCarnicalBox* ReqBuyCarnicalBox::New() const {
  return new ReqBuyCarnicalBox;
}

void ReqBuyCarnicalBox::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuyCarnicalBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqBuyCarnicalBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuyCarnicalBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuyCarnicalBox::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuyCarnicalBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuyCarnicalBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuyCarnicalBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuyCarnicalBox::MergeFrom(const ReqBuyCarnicalBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuyCarnicalBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyCarnicalBox::CopyFrom(const ReqBuyCarnicalBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyCarnicalBox::IsInitialized() const {

  return true;
}

void ReqBuyCarnicalBox::Swap(ReqBuyCarnicalBox* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuyCarnicalBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuyCarnicalBox_descriptor_;
  metadata.reflection = ReqBuyCarnicalBox_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
