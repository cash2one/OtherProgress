// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* MemberRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqKickFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqKickFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckKickFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckKickFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRelationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRelationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRelationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRelationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendFansChangeLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendFansChangeLine_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RlationTypeServer_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RlationTypeClient_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAddFriendReSult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqKickFriendReSult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendLineState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_friend_2eproto() {
  protobuf_AddDesc_friend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friend.proto");
  GOOGLE_CHECK(file != NULL);
  MemberRelation_descriptor_ = file->message_type(0);
  static const int MemberRelation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRelation, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRelation, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRelation, typeralation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRelation, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRelation, loginouttimer_),
  };
  MemberRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberRelation_descriptor_,
      MemberRelation::default_instance_,
      MemberRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberRelation));
  ReqAddFriend_descriptor_ = file->message_type(1);
  static const int ReqAddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddFriend, playerid_),
  };
  ReqAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAddFriend_descriptor_,
      ReqAddFriend::default_instance_,
      ReqAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAddFriend));
  AckAddFriend_descriptor_ = file->message_type(2);
  static const int AckAddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAddFriend, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAddFriend, ackmember_),
  };
  AckAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckAddFriend_descriptor_,
      AckAddFriend::default_instance_,
      AckAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckAddFriend));
  ReqKickFriend_descriptor_ = file->message_type(3);
  static const int ReqKickFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickFriend, playerid_),
  };
  ReqKickFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqKickFriend_descriptor_,
      ReqKickFriend::default_instance_,
      ReqKickFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqKickFriend));
  AckKickFriend_descriptor_ = file->message_type(4);
  static const int AckKickFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKickFriend, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKickFriend, ackmember_),
  };
  AckKickFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckKickFriend_descriptor_,
      AckKickFriend::default_instance_,
      AckKickFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKickFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKickFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckKickFriend));
  ReqRelationList_descriptor_ = file->message_type(5);
  static const int ReqRelationList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRelationList, listtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRelationList, pagemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRelationList, pageno_),
  };
  ReqRelationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRelationList_descriptor_,
      ReqRelationList::default_instance_,
      ReqRelationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRelationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRelationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRelationList));
  AckRelationList_descriptor_ = file->message_type(6);
  static const int AckRelationList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRelationList, listtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRelationList, allpageno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRelationList, pageno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRelationList, pagemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRelationList, vecmember_),
  };
  AckRelationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRelationList_descriptor_,
      AckRelationList::default_instance_,
      AckRelationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRelationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRelationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRelationList));
  FriendFansChangeLine_descriptor_ = file->message_type(7);
  static const int FriendFansChangeLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendFansChangeLine, linestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendFansChangeLine, member_),
  };
  FriendFansChangeLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendFansChangeLine_descriptor_,
      FriendFansChangeLine::default_instance_,
      FriendFansChangeLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendFansChangeLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendFansChangeLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendFansChangeLine));
  RlationTypeServer_descriptor_ = file->enum_type(0);
  RlationTypeClient_descriptor_ = file->enum_type(1);
  ReqAddFriendReSult_descriptor_ = file->enum_type(2);
  ReqKickFriendReSult_descriptor_ = file->enum_type(3);
  ReqListType_descriptor_ = file->enum_type(4);
  FriendLineState_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberRelation_descriptor_, &MemberRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAddFriend_descriptor_, &ReqAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckAddFriend_descriptor_, &AckAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqKickFriend_descriptor_, &ReqKickFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckKickFriend_descriptor_, &AckKickFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRelationList_descriptor_, &ReqRelationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRelationList_descriptor_, &AckRelationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendFansChangeLine_descriptor_, &FriendFansChangeLine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friend_2eproto() {
  delete MemberRelation::default_instance_;
  delete MemberRelation_reflection_;
  delete ReqAddFriend::default_instance_;
  delete ReqAddFriend_reflection_;
  delete AckAddFriend::default_instance_;
  delete AckAddFriend_reflection_;
  delete ReqKickFriend::default_instance_;
  delete ReqKickFriend_reflection_;
  delete AckKickFriend::default_instance_;
  delete AckKickFriend_reflection_;
  delete ReqRelationList::default_instance_;
  delete ReqRelationList_reflection_;
  delete AckRelationList::default_instance_;
  delete AckRelationList_reflection_;
  delete FriendFansChangeLine::default_instance_;
  delete FriendFansChangeLine_reflection_;
}

void protobuf_AddDesc_friend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_common_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_event_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014friend.proto\022\021HelloKittyMsgData\032\014commo"
    "n.proto\032\013event.proto\"\270\001\n\016MemberRelation\022"
    "\020\n\010PlayerId\030\001 \002(\004\022\022\n\nPlayername\030\002 \002(\t\022:\n"
    "\014TypeRalation\030\003 \002(\0162$.HelloKittyMsgData."
    "RlationTypeClient\022-\n\005Event\030\004 \001(\0132\036.Hello"
    "KittyMsgData.PlayerEvent\022\025\n\rLoginOutTime"
    "r\030\005 \002(\r\" \n\014ReqAddFriend\022\020\n\010PlayerId\030\001 \002("
    "\004\"{\n\014AckAddFriend\0225\n\006ReSult\030\001 \002(\0162%.Hell"
    "oKittyMsgData.ReqAddFriendReSult\0224\n\tAckM"
    "ember\030\002 \002(\0132!.HelloKittyMsgData.MemberRe"
    "lation\"!\n\rReqKickFriend\022\020\n\010PlayerId\030\001 \002("
    "\004\"}\n\rAckKickFriend\0226\n\006ReSult\030\001 \002(\0162&.Hel"
    "loKittyMsgData.ReqKickFriendReSult\0224\n\tAc"
    "kMember\030\002 \002(\0132!.HelloKittyMsgData.Member"
    "Relation\"d\n\017ReqRelationList\0220\n\010ListType\030"
    "\001 \002(\0162\036.HelloKittyMsgData.ReqListType\022\017\n"
    "\007PageMax\030\002 \002(\r\022\016\n\006PageNo\030\003 \002(\r\"\255\001\n\017AckRe"
    "lationList\0220\n\010ListType\030\001 \002(\0162\036.HelloKitt"
    "yMsgData.ReqListType\022\021\n\tAllPageNo\030\002 \002(\r\022"
    "\016\n\006PageNo\030\003 \002(\r\022\017\n\007PageMax\030\004 \002(\r\0224\n\tvecM"
    "ember\030\005 \003(\0132!.HelloKittyMsgData.MemberRe"
    "lation\"\200\001\n\024FriendFansChangeLine\0225\n\tlines"
    "tate\030\001 \002(\0162\".HelloKittyMsgData.FriendLin"
    "eState\0221\n\006Member\030\002 \002(\0132!.HelloKittyMsgDa"
    "ta.MemberRelation*1\n\021RlationTypeServer\022\034"
    "\n\030RlationTypeServer_Friend\020\000*\216\001\n\021Rlation"
    "TypeClient\022\032\n\026RlationTypeClient_None\020\000\022\036"
    "\n\032RlationTypeClient_IsFriend\020\001\022\034\n\030Rlatio"
    "nTypeClient_IsFans\020\002\022\037\n\033RlationTypeClien"
    "t_IsFriend2\020\003*\264\001\n\022ReqAddFriendReSult\022\032\n\026"
    "ReqAddFriendReSult_Suc\020\000\022\037\n\033ReqAddFriend"
    "ReSult_NoPerson\020\001\022&\n\"ReqAddFriendReSult_"
    "IsFriendAlready\020\002\022\033\n\027ReqAddFriendReSult_"
    "Full\020\003\022\034\n\030ReqAddFriendReSult_Other\020\004*s\n\023"
    "ReqKickFriendReSult\022\033\n\027ReqKickFriendReSu"
    "lt_Suc\020\000\022 \n\034ReqKickFriendReSult_NoFriend"
    "\020\001\022\035\n\031ReqKickFriendReSult_Other\020\002*:\n\013Req"
    "ListType\022\016\n\nFriendList\020\000\022\014\n\010FansList\020\001\022\r"
    "\n\tRadomList\020\002*\312\001\n\017FriendLineState\022\032\n\026Fri"
    "endLineState_OnLine\020\000\022\033\n\027FriendLineState"
    "_OffLine\020\001\022\035\n\031FriendLineState_AddFriend\020"
    "\002\022\036\n\032FriendLineState_KickFriend\020\003\022\037\n\033Fri"
    "endLineState_EventHappen\020\004\022\036\n\032FriendLine"
    "State_EventClose\020\005", 1738);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend.proto", &protobuf_RegisterTypes);
  MemberRelation::default_instance_ = new MemberRelation();
  ReqAddFriend::default_instance_ = new ReqAddFriend();
  AckAddFriend::default_instance_ = new AckAddFriend();
  ReqKickFriend::default_instance_ = new ReqKickFriend();
  AckKickFriend::default_instance_ = new AckKickFriend();
  ReqRelationList::default_instance_ = new ReqRelationList();
  AckRelationList::default_instance_ = new AckRelationList();
  FriendFansChangeLine::default_instance_ = new FriendFansChangeLine();
  MemberRelation::default_instance_->InitAsDefaultInstance();
  ReqAddFriend::default_instance_->InitAsDefaultInstance();
  AckAddFriend::default_instance_->InitAsDefaultInstance();
  ReqKickFriend::default_instance_->InitAsDefaultInstance();
  AckKickFriend::default_instance_->InitAsDefaultInstance();
  ReqRelationList::default_instance_->InitAsDefaultInstance();
  AckRelationList::default_instance_->InitAsDefaultInstance();
  FriendFansChangeLine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friend_2eproto {
  StaticDescriptorInitializer_friend_2eproto() {
    protobuf_AddDesc_friend_2eproto();
  }
} static_descriptor_initializer_friend_2eproto_;
const ::google::protobuf::EnumDescriptor* RlationTypeServer_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RlationTypeServer_descriptor_;
}
bool RlationTypeServer_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RlationTypeClient_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RlationTypeClient_descriptor_;
}
bool RlationTypeClient_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReqAddFriendReSult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAddFriendReSult_descriptor_;
}
bool ReqAddFriendReSult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReqKickFriendReSult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqKickFriendReSult_descriptor_;
}
bool ReqKickFriendReSult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReqListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqListType_descriptor_;
}
bool ReqListType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendLineState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendLineState_descriptor_;
}
bool FriendLineState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MemberRelation::kPlayerIdFieldNumber;
const int MemberRelation::kPlayernameFieldNumber;
const int MemberRelation::kTypeRalationFieldNumber;
const int MemberRelation::kEventFieldNumber;
const int MemberRelation::kLoginOutTimerFieldNumber;
#endif  // !_MSC_VER

MemberRelation::MemberRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemberRelation::InitAsDefaultInstance() {
  event_ = const_cast< ::HelloKittyMsgData::PlayerEvent*>(&::HelloKittyMsgData::PlayerEvent::default_instance());
}

MemberRelation::MemberRelation(const MemberRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemberRelation::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  typeralation_ = 0;
  event_ = NULL;
  loginouttimer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberRelation::~MemberRelation() {
  SharedDtor();
}

void MemberRelation::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete event_;
  }
}

void MemberRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberRelation_descriptor_;
}

const MemberRelation& MemberRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

MemberRelation* MemberRelation::default_instance_ = NULL;

MemberRelation* MemberRelation::New() const {
  return new MemberRelation;
}

void MemberRelation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    typeralation_ = 0;
    if (has_event()) {
      if (event_ != NULL) event_->::HelloKittyMsgData::PlayerEvent::Clear();
    }
    loginouttimer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 PlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Playername;
        break;
      }

      // required string Playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TypeRalation;
        break;
      }

      // required .HelloKittyMsgData.RlationTypeClient TypeRalation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TypeRalation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::RlationTypeClient_IsValid(value)) {
            set_typeralation(static_cast< ::HelloKittyMsgData::RlationTypeClient >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Event;
        break;
      }

      // optional .HelloKittyMsgData.PlayerEvent Event = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LoginOutTimer;
        break;
      }

      // required uint32 LoginOutTimer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginOutTimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loginouttimer_)));
          set_has_loginouttimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 PlayerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required string Playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // required .HelloKittyMsgData.RlationTypeClient TypeRalation = 3;
  if (has_typeralation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->typeralation(), output);
  }

  // optional .HelloKittyMsgData.PlayerEvent Event = 4;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->event(), output);
  }

  // required uint32 LoginOutTimer = 5;
  if (has_loginouttimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->loginouttimer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemberRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 PlayerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required string Playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // required .HelloKittyMsgData.RlationTypeClient TypeRalation = 3;
  if (has_typeralation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->typeralation(), target);
  }

  // optional .HelloKittyMsgData.PlayerEvent Event = 4;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->event(), target);
  }

  // required uint32 LoginOutTimer = 5;
  if (has_loginouttimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->loginouttimer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemberRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 PlayerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required string Playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required .HelloKittyMsgData.RlationTypeClient TypeRalation = 3;
    if (has_typeralation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->typeralation());
    }

    // optional .HelloKittyMsgData.PlayerEvent Event = 4;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }

    // required uint32 LoginOutTimer = 5;
    if (has_loginouttimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loginouttimer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberRelation::MergeFrom(const MemberRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_typeralation()) {
      set_typeralation(from.typeralation());
    }
    if (from.has_event()) {
      mutable_event()->::HelloKittyMsgData::PlayerEvent::MergeFrom(from.event());
    }
    if (from.has_loginouttimer()) {
      set_loginouttimer(from.loginouttimer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberRelation::CopyFrom(const MemberRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRelation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void MemberRelation::Swap(MemberRelation* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(typeralation_, other->typeralation_);
    std::swap(event_, other->event_);
    std::swap(loginouttimer_, other->loginouttimer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberRelation_descriptor_;
  metadata.reflection = MemberRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAddFriend::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

ReqAddFriend::ReqAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAddFriend::InitAsDefaultInstance() {
}

ReqAddFriend::ReqAddFriend(const ReqAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAddFriend::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAddFriend::~ReqAddFriend() {
  SharedDtor();
}

void ReqAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAddFriend_descriptor_;
}

const ReqAddFriend& ReqAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

ReqAddFriend* ReqAddFriend::default_instance_ = NULL;

ReqAddFriend* ReqAddFriend::New() const {
  return new ReqAddFriend;
}

void ReqAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 PlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 PlayerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 PlayerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 PlayerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAddFriend::MergeFrom(const ReqAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAddFriend::CopyFrom(const ReqAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAddFriend::Swap(ReqAddFriend* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAddFriend_descriptor_;
  metadata.reflection = ReqAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckAddFriend::kReSultFieldNumber;
const int AckAddFriend::kAckMemberFieldNumber;
#endif  // !_MSC_VER

AckAddFriend::AckAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckAddFriend::InitAsDefaultInstance() {
  ackmember_ = const_cast< ::HelloKittyMsgData::MemberRelation*>(&::HelloKittyMsgData::MemberRelation::default_instance());
}

AckAddFriend::AckAddFriend(const AckAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckAddFriend::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ackmember_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckAddFriend::~AckAddFriend() {
  SharedDtor();
}

void AckAddFriend::SharedDtor() {
  if (this != default_instance_) {
    delete ackmember_;
  }
}

void AckAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckAddFriend_descriptor_;
}

const AckAddFriend& AckAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

AckAddFriend* AckAddFriend::default_instance_ = NULL;

AckAddFriend* AckAddFriend::New() const {
  return new AckAddFriend;
}

void AckAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_ackmember()) {
      if (ackmember_ != NULL) ackmember_->::HelloKittyMsgData::MemberRelation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.ReqAddFriendReSult ReSult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::ReqAddFriendReSult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::ReqAddFriendReSult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AckMember;
        break;
      }

      // required .HelloKittyMsgData.MemberRelation AckMember = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AckMember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ackmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.ReqAddFriendReSult ReSult = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required .HelloKittyMsgData.MemberRelation AckMember = 2;
  if (has_ackmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ackmember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.ReqAddFriendReSult ReSult = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required .HelloKittyMsgData.MemberRelation AckMember = 2;
  if (has_ackmember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ackmember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.ReqAddFriendReSult ReSult = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required .HelloKittyMsgData.MemberRelation AckMember = 2;
    if (has_ackmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ackmember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckAddFriend::MergeFrom(const AckAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ackmember()) {
      mutable_ackmember()->::HelloKittyMsgData::MemberRelation::MergeFrom(from.ackmember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAddFriend::CopyFrom(const AckAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ackmember()) {
    if (!this->ackmember().IsInitialized()) return false;
  }
  return true;
}

void AckAddFriend::Swap(AckAddFriend* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ackmember_, other->ackmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckAddFriend_descriptor_;
  metadata.reflection = AckAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqKickFriend::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

ReqKickFriend::ReqKickFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqKickFriend::InitAsDefaultInstance() {
}

ReqKickFriend::ReqKickFriend(const ReqKickFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqKickFriend::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqKickFriend::~ReqKickFriend() {
  SharedDtor();
}

void ReqKickFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqKickFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqKickFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqKickFriend_descriptor_;
}

const ReqKickFriend& ReqKickFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

ReqKickFriend* ReqKickFriend::default_instance_ = NULL;

ReqKickFriend* ReqKickFriend::New() const {
  return new ReqKickFriend;
}

void ReqKickFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqKickFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 PlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqKickFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 PlayerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqKickFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 PlayerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqKickFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 PlayerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqKickFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqKickFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqKickFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqKickFriend::MergeFrom(const ReqKickFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqKickFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqKickFriend::CopyFrom(const ReqKickFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqKickFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqKickFriend::Swap(ReqKickFriend* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqKickFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqKickFriend_descriptor_;
  metadata.reflection = ReqKickFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckKickFriend::kReSultFieldNumber;
const int AckKickFriend::kAckMemberFieldNumber;
#endif  // !_MSC_VER

AckKickFriend::AckKickFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckKickFriend::InitAsDefaultInstance() {
  ackmember_ = const_cast< ::HelloKittyMsgData::MemberRelation*>(&::HelloKittyMsgData::MemberRelation::default_instance());
}

AckKickFriend::AckKickFriend(const AckKickFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckKickFriend::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ackmember_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckKickFriend::~AckKickFriend() {
  SharedDtor();
}

void AckKickFriend::SharedDtor() {
  if (this != default_instance_) {
    delete ackmember_;
  }
}

void AckKickFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckKickFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckKickFriend_descriptor_;
}

const AckKickFriend& AckKickFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

AckKickFriend* AckKickFriend::default_instance_ = NULL;

AckKickFriend* AckKickFriend::New() const {
  return new AckKickFriend;
}

void AckKickFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_ackmember()) {
      if (ackmember_ != NULL) ackmember_->::HelloKittyMsgData::MemberRelation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckKickFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.ReqKickFriendReSult ReSult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::ReqKickFriendReSult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::ReqKickFriendReSult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AckMember;
        break;
      }

      // required .HelloKittyMsgData.MemberRelation AckMember = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AckMember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ackmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckKickFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.ReqKickFriendReSult ReSult = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required .HelloKittyMsgData.MemberRelation AckMember = 2;
  if (has_ackmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ackmember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckKickFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.ReqKickFriendReSult ReSult = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required .HelloKittyMsgData.MemberRelation AckMember = 2;
  if (has_ackmember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ackmember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckKickFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.ReqKickFriendReSult ReSult = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required .HelloKittyMsgData.MemberRelation AckMember = 2;
    if (has_ackmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ackmember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckKickFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckKickFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckKickFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckKickFriend::MergeFrom(const AckKickFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ackmember()) {
      mutable_ackmember()->::HelloKittyMsgData::MemberRelation::MergeFrom(from.ackmember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckKickFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckKickFriend::CopyFrom(const AckKickFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckKickFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ackmember()) {
    if (!this->ackmember().IsInitialized()) return false;
  }
  return true;
}

void AckKickFriend::Swap(AckKickFriend* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ackmember_, other->ackmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckKickFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckKickFriend_descriptor_;
  metadata.reflection = AckKickFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRelationList::kListTypeFieldNumber;
const int ReqRelationList::kPageMaxFieldNumber;
const int ReqRelationList::kPageNoFieldNumber;
#endif  // !_MSC_VER

ReqRelationList::ReqRelationList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRelationList::InitAsDefaultInstance() {
}

ReqRelationList::ReqRelationList(const ReqRelationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRelationList::SharedCtor() {
  _cached_size_ = 0;
  listtype_ = 0;
  pagemax_ = 0u;
  pageno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRelationList::~ReqRelationList() {
  SharedDtor();
}

void ReqRelationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRelationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRelationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRelationList_descriptor_;
}

const ReqRelationList& ReqRelationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

ReqRelationList* ReqRelationList::default_instance_ = NULL;

ReqRelationList* ReqRelationList::New() const {
  return new ReqRelationList;
}

void ReqRelationList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    listtype_ = 0;
    pagemax_ = 0u;
    pageno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRelationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.ReqListType ListType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::ReqListType_IsValid(value)) {
            set_listtype(static_cast< ::HelloKittyMsgData::ReqListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PageMax;
        break;
      }

      // required uint32 PageMax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagemax_)));
          set_has_pagemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PageNo;
        break;
      }

      // required uint32 PageNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageno_)));
          set_has_pageno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRelationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.ReqListType ListType = 1;
  if (has_listtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->listtype(), output);
  }

  // required uint32 PageMax = 2;
  if (has_pagemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pagemax(), output);
  }

  // required uint32 PageNo = 3;
  if (has_pageno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pageno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRelationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.ReqListType ListType = 1;
  if (has_listtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->listtype(), target);
  }

  // required uint32 PageMax = 2;
  if (has_pagemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pagemax(), target);
  }

  // required uint32 PageNo = 3;
  if (has_pageno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pageno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRelationList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.ReqListType ListType = 1;
    if (has_listtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->listtype());
    }

    // required uint32 PageMax = 2;
    if (has_pagemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagemax());
    }

    // required uint32 PageNo = 3;
    if (has_pageno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRelationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRelationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRelationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRelationList::MergeFrom(const ReqRelationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listtype()) {
      set_listtype(from.listtype());
    }
    if (from.has_pagemax()) {
      set_pagemax(from.pagemax());
    }
    if (from.has_pageno()) {
      set_pageno(from.pageno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRelationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRelationList::CopyFrom(const ReqRelationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRelationList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqRelationList::Swap(ReqRelationList* other) {
  if (other != this) {
    std::swap(listtype_, other->listtype_);
    std::swap(pagemax_, other->pagemax_);
    std::swap(pageno_, other->pageno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRelationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRelationList_descriptor_;
  metadata.reflection = ReqRelationList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRelationList::kListTypeFieldNumber;
const int AckRelationList::kAllPageNoFieldNumber;
const int AckRelationList::kPageNoFieldNumber;
const int AckRelationList::kPageMaxFieldNumber;
const int AckRelationList::kVecMemberFieldNumber;
#endif  // !_MSC_VER

AckRelationList::AckRelationList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRelationList::InitAsDefaultInstance() {
}

AckRelationList::AckRelationList(const AckRelationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRelationList::SharedCtor() {
  _cached_size_ = 0;
  listtype_ = 0;
  allpageno_ = 0u;
  pageno_ = 0u;
  pagemax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRelationList::~AckRelationList() {
  SharedDtor();
}

void AckRelationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRelationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRelationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRelationList_descriptor_;
}

const AckRelationList& AckRelationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

AckRelationList* AckRelationList::default_instance_ = NULL;

AckRelationList* AckRelationList::New() const {
  return new AckRelationList;
}

void AckRelationList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    listtype_ = 0;
    allpageno_ = 0u;
    pageno_ = 0u;
    pagemax_ = 0u;
  }
  vecmember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRelationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.ReqListType ListType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::ReqListType_IsValid(value)) {
            set_listtype(static_cast< ::HelloKittyMsgData::ReqListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AllPageNo;
        break;
      }

      // required uint32 AllPageNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AllPageNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allpageno_)));
          set_has_allpageno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PageNo;
        break;
      }

      // required uint32 PageNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageno_)));
          set_has_pageno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PageMax;
        break;
      }

      // required uint32 PageMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagemax_)));
          set_has_pagemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vecMember;
        break;
      }

      // repeated .HelloKittyMsgData.MemberRelation vecMember = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecMember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vecMember;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRelationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.ReqListType ListType = 1;
  if (has_listtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->listtype(), output);
  }

  // required uint32 AllPageNo = 2;
  if (has_allpageno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allpageno(), output);
  }

  // required uint32 PageNo = 3;
  if (has_pageno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pageno(), output);
  }

  // required uint32 PageMax = 4;
  if (has_pagemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pagemax(), output);
  }

  // repeated .HelloKittyMsgData.MemberRelation vecMember = 5;
  for (int i = 0; i < this->vecmember_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vecmember(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRelationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.ReqListType ListType = 1;
  if (has_listtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->listtype(), target);
  }

  // required uint32 AllPageNo = 2;
  if (has_allpageno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allpageno(), target);
  }

  // required uint32 PageNo = 3;
  if (has_pageno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pageno(), target);
  }

  // required uint32 PageMax = 4;
  if (has_pagemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pagemax(), target);
  }

  // repeated .HelloKittyMsgData.MemberRelation vecMember = 5;
  for (int i = 0; i < this->vecmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vecmember(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRelationList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.ReqListType ListType = 1;
    if (has_listtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->listtype());
    }

    // required uint32 AllPageNo = 2;
    if (has_allpageno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allpageno());
    }

    // required uint32 PageNo = 3;
    if (has_pageno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageno());
    }

    // required uint32 PageMax = 4;
    if (has_pagemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagemax());
    }

  }
  // repeated .HelloKittyMsgData.MemberRelation vecMember = 5;
  total_size += 1 * this->vecmember_size();
  for (int i = 0; i < this->vecmember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecmember(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRelationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRelationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRelationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRelationList::MergeFrom(const AckRelationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecmember_.MergeFrom(from.vecmember_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listtype()) {
      set_listtype(from.listtype());
    }
    if (from.has_allpageno()) {
      set_allpageno(from.allpageno());
    }
    if (from.has_pageno()) {
      set_pageno(from.pageno());
    }
    if (from.has_pagemax()) {
      set_pagemax(from.pagemax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRelationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRelationList::CopyFrom(const AckRelationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRelationList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < vecmember_size(); i++) {
    if (!this->vecmember(i).IsInitialized()) return false;
  }
  return true;
}

void AckRelationList::Swap(AckRelationList* other) {
  if (other != this) {
    std::swap(listtype_, other->listtype_);
    std::swap(allpageno_, other->allpageno_);
    std::swap(pageno_, other->pageno_);
    std::swap(pagemax_, other->pagemax_);
    vecmember_.Swap(&other->vecmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRelationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRelationList_descriptor_;
  metadata.reflection = AckRelationList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendFansChangeLine::kLinestateFieldNumber;
const int FriendFansChangeLine::kMemberFieldNumber;
#endif  // !_MSC_VER

FriendFansChangeLine::FriendFansChangeLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendFansChangeLine::InitAsDefaultInstance() {
  member_ = const_cast< ::HelloKittyMsgData::MemberRelation*>(&::HelloKittyMsgData::MemberRelation::default_instance());
}

FriendFansChangeLine::FriendFansChangeLine(const FriendFansChangeLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendFansChangeLine::SharedCtor() {
  _cached_size_ = 0;
  linestate_ = 0;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendFansChangeLine::~FriendFansChangeLine() {
  SharedDtor();
}

void FriendFansChangeLine::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void FriendFansChangeLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendFansChangeLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendFansChangeLine_descriptor_;
}

const FriendFansChangeLine& FriendFansChangeLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

FriendFansChangeLine* FriendFansChangeLine::default_instance_ = NULL;

FriendFansChangeLine* FriendFansChangeLine::New() const {
  return new FriendFansChangeLine;
}

void FriendFansChangeLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    linestate_ = 0;
    if (has_member()) {
      if (member_ != NULL) member_->::HelloKittyMsgData::MemberRelation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendFansChangeLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.FriendLineState linestate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FriendLineState_IsValid(value)) {
            set_linestate(static_cast< ::HelloKittyMsgData::FriendLineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Member;
        break;
      }

      // required .HelloKittyMsgData.MemberRelation Member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendFansChangeLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.FriendLineState linestate = 1;
  if (has_linestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->linestate(), output);
  }

  // required .HelloKittyMsgData.MemberRelation Member = 2;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendFansChangeLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.FriendLineState linestate = 1;
  if (has_linestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->linestate(), target);
  }

  // required .HelloKittyMsgData.MemberRelation Member = 2;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendFansChangeLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.FriendLineState linestate = 1;
    if (has_linestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->linestate());
    }

    // required .HelloKittyMsgData.MemberRelation Member = 2;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendFansChangeLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendFansChangeLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendFansChangeLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendFansChangeLine::MergeFrom(const FriendFansChangeLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linestate()) {
      set_linestate(from.linestate());
    }
    if (from.has_member()) {
      mutable_member()->::HelloKittyMsgData::MemberRelation::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendFansChangeLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendFansChangeLine::CopyFrom(const FriendFansChangeLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendFansChangeLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  return true;
}

void FriendFansChangeLine::Swap(FriendFansChangeLine* other) {
  if (other != this) {
    std::swap(linestate_, other->linestate_);
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendFansChangeLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendFansChangeLine_descriptor_;
  metadata.reflection = FriendFansChangeLine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
