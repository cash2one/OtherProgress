// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kittygarden.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kittygarden.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* AreaGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AreaGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* KittyGarden_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KittyGarden_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqKittyGarden_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqKittyGarden_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckKittyGarden_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckKittyGarden_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpenArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpenArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFlushArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFlushArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGardenOpSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGardenOpSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGardenOpFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGardenOpFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GardenSuccessCodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GardenFailCodeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_kittygarden_2eproto() {
  protobuf_AddDesc_kittygarden_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kittygarden.proto");
  GOOGLE_CHECK(file != NULL);
  AreaGrid_descriptor_ = file->message_type(0);
  static const int AreaGrid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaGrid, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaGrid, isopen_),
  };
  AreaGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AreaGrid_descriptor_,
      AreaGrid::default_instance_,
      AreaGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AreaGrid));
  GateGrid_descriptor_ = file->message_type(1);
  static const int GateGrid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGrid, point_),
  };
  GateGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateGrid_descriptor_,
      GateGrid::default_instance_,
      GateGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateGrid));
  KittyGarden_descriptor_ = file->message_type(2);
  static const int KittyGarden_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KittyGarden, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KittyGarden, mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KittyGarden, areagrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KittyGarden, gategrid_),
  };
  KittyGarden_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KittyGarden_descriptor_,
      KittyGarden::default_instance_,
      KittyGarden_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KittyGarden, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KittyGarden, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KittyGarden));
  ReqKittyGarden_descriptor_ = file->message_type(3);
  static const int ReqKittyGarden_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKittyGarden, charid_),
  };
  ReqKittyGarden_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqKittyGarden_descriptor_,
      ReqKittyGarden::default_instance_,
      ReqKittyGarden_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKittyGarden, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKittyGarden, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqKittyGarden));
  AckKittyGarden_descriptor_ = file->message_type(4);
  static const int AckKittyGarden_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKittyGarden, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKittyGarden, kittygarden_),
  };
  AckKittyGarden_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckKittyGarden_descriptor_,
      AckKittyGarden::default_instance_,
      AckKittyGarden_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKittyGarden, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKittyGarden, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckKittyGarden));
  ReqOpenArea_descriptor_ = file->message_type(5);
  static const int ReqOpenArea_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenArea, point_),
  };
  ReqOpenArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpenArea_descriptor_,
      ReqOpenArea::default_instance_,
      ReqOpenArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpenArea));
  AckFlushArea_descriptor_ = file->message_type(6);
  static const int AckFlushArea_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushArea, areagrid_),
  };
  AckFlushArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFlushArea_descriptor_,
      AckFlushArea::default_instance_,
      AckFlushArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFlushArea));
  AckGardenOpSuccess_descriptor_ = file->message_type(7);
  static const int AckGardenOpSuccess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGardenOpSuccess, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGardenOpSuccess, areagrid_),
  };
  AckGardenOpSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGardenOpSuccess_descriptor_,
      AckGardenOpSuccess::default_instance_,
      AckGardenOpSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGardenOpSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGardenOpSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGardenOpSuccess));
  AckGardenOpFail_descriptor_ = file->message_type(8);
  static const int AckGardenOpFail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGardenOpFail, commoncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGardenOpFail, code_),
  };
  AckGardenOpFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGardenOpFail_descriptor_,
      AckGardenOpFail::default_instance_,
      AckGardenOpFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGardenOpFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGardenOpFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGardenOpFail));
  GardenSuccessCodeType_descriptor_ = file->enum_type(0);
  GardenFailCodeType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kittygarden_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AreaGrid_descriptor_, &AreaGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateGrid_descriptor_, &GateGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KittyGarden_descriptor_, &KittyGarden::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqKittyGarden_descriptor_, &ReqKittyGarden::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckKittyGarden_descriptor_, &AckKittyGarden::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpenArea_descriptor_, &ReqOpenArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFlushArea_descriptor_, &AckFlushArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGardenOpSuccess_descriptor_, &AckGardenOpSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGardenOpFail_descriptor_, &AckGardenOpFail::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kittygarden_2eproto() {
  delete AreaGrid::default_instance_;
  delete AreaGrid_reflection_;
  delete GateGrid::default_instance_;
  delete GateGrid_reflection_;
  delete KittyGarden::default_instance_;
  delete KittyGarden_reflection_;
  delete ReqKittyGarden::default_instance_;
  delete ReqKittyGarden_reflection_;
  delete AckKittyGarden::default_instance_;
  delete AckKittyGarden_reflection_;
  delete ReqOpenArea::default_instance_;
  delete ReqOpenArea_reflection_;
  delete AckFlushArea::default_instance_;
  delete AckFlushArea_reflection_;
  delete AckGardenOpSuccess::default_instance_;
  delete AckGardenOpSuccess_reflection_;
  delete AckGardenOpFail::default_instance_;
  delete AckGardenOpFail_reflection_;
}

void protobuf_AddDesc_kittygarden_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_build_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021kittygarden.proto\022\021HelloKittyMsgData\032\013"
    "build.proto\032\014common.proto\"C\n\010AreaGrid\022\'\n"
    "\005point\030\001 \002(\0132\030.HelloKittyMsgData.Point\022\016"
    "\n\006isopen\030\002 \002(\010\"3\n\010GateGrid\022\'\n\005point\030\001 \002("
    "\0132\030.HelloKittyMsgData.Point\"\213\001\n\013KittyGar"
    "den\022\r\n\005mapid\030\001 \002(\004\022\017\n\007mapname\030\002 \002(\t\022-\n\010a"
    "reagrid\030\003 \003(\0132\033.HelloKittyMsgData.AreaGr"
    "id\022-\n\010gategrid\030\004 \003(\0132\033.HelloKittyMsgData"
    ".GateGrid\" \n\016ReqKittyGarden\022\016\n\006charid\030\001 "
    "\002(\004\"U\n\016AckKittyGarden\022\016\n\006charid\030\001 \002(\004\0223\n"
    "\013kittygarden\030\002 \002(\0132\036.HelloKittyMsgData.K"
    "ittyGarden\"6\n\013ReqOpenArea\022\'\n\005point\030\001 \002(\013"
    "2\030.HelloKittyMsgData.Point\"=\n\014AckFlushAr"
    "ea\022-\n\010areagrid\030\001 \002(\0132\033.HelloKittyMsgData"
    ".AreaGrid\"{\n\022AckGardenOpSuccess\0226\n\004code\030"
    "\001 \002(\0162(.HelloKittyMsgData.GardenSuccessC"
    "odeType\022-\n\010areagrid\030\002 \002(\0132\033.HelloKittyMs"
    "gData.AreaGrid\"|\n\017AckGardenOpFail\0224\n\ncom"
    "moncode\030\001 \002(\0162 .HelloKittyMsgData.ErrorC"
    "odeType\0223\n\004code\030\002 \002(\0162%.HelloKittyMsgDat"
    "a.GardenFailCodeType*-\n\025GardenSuccessCod"
    "eType\022\024\n\020Garden_Open_Area\020\000*\252\001\n\022GardenFa"
    "ilCodeType\022\021\n\rGarden_Occupy\020\000\022\025\n\021Garden_"
    "Area_Close\020\001\022\030\n\024Garden_Point_Barrier\020\003\022\026"
    "\n\022Garden_Area_Illeag\020\004\022\034\n\030Garden_Area_Ar"
    "ound_Close\020\005\022\032\n\026Garden_Area_Open_Again\020\006", 1040);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kittygarden.proto", &protobuf_RegisterTypes);
  AreaGrid::default_instance_ = new AreaGrid();
  GateGrid::default_instance_ = new GateGrid();
  KittyGarden::default_instance_ = new KittyGarden();
  ReqKittyGarden::default_instance_ = new ReqKittyGarden();
  AckKittyGarden::default_instance_ = new AckKittyGarden();
  ReqOpenArea::default_instance_ = new ReqOpenArea();
  AckFlushArea::default_instance_ = new AckFlushArea();
  AckGardenOpSuccess::default_instance_ = new AckGardenOpSuccess();
  AckGardenOpFail::default_instance_ = new AckGardenOpFail();
  AreaGrid::default_instance_->InitAsDefaultInstance();
  GateGrid::default_instance_->InitAsDefaultInstance();
  KittyGarden::default_instance_->InitAsDefaultInstance();
  ReqKittyGarden::default_instance_->InitAsDefaultInstance();
  AckKittyGarden::default_instance_->InitAsDefaultInstance();
  ReqOpenArea::default_instance_->InitAsDefaultInstance();
  AckFlushArea::default_instance_->InitAsDefaultInstance();
  AckGardenOpSuccess::default_instance_->InitAsDefaultInstance();
  AckGardenOpFail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kittygarden_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kittygarden_2eproto {
  StaticDescriptorInitializer_kittygarden_2eproto() {
    protobuf_AddDesc_kittygarden_2eproto();
  }
} static_descriptor_initializer_kittygarden_2eproto_;
const ::google::protobuf::EnumDescriptor* GardenSuccessCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GardenSuccessCodeType_descriptor_;
}
bool GardenSuccessCodeType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GardenFailCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GardenFailCodeType_descriptor_;
}
bool GardenFailCodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AreaGrid::kPointFieldNumber;
const int AreaGrid::kIsopenFieldNumber;
#endif  // !_MSC_VER

AreaGrid::AreaGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AreaGrid::InitAsDefaultInstance() {
  point_ = const_cast< ::HelloKittyMsgData::Point*>(&::HelloKittyMsgData::Point::default_instance());
}

AreaGrid::AreaGrid(const AreaGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AreaGrid::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AreaGrid::~AreaGrid() {
  SharedDtor();
}

void AreaGrid::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void AreaGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreaGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreaGrid_descriptor_;
}

const AreaGrid& AreaGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kittygarden_2eproto();
  return *default_instance_;
}

AreaGrid* AreaGrid::default_instance_ = NULL;

AreaGrid* AreaGrid::New() const {
  return new AreaGrid;
}

void AreaGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_point()) {
      if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
    }
    isopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AreaGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.Point point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isopen;
        break;
      }

      // required bool isopen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AreaGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.Point point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(), output);
  }

  // required bool isopen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AreaGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.Point point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(), target);
  }

  // required bool isopen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AreaGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.Point point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // required bool isopen = 2;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreaGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AreaGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AreaGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AreaGrid::MergeFrom(const AreaGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::HelloKittyMsgData::Point::MergeFrom(from.point());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AreaGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreaGrid::CopyFrom(const AreaGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void AreaGrid::Swap(AreaGrid* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AreaGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AreaGrid_descriptor_;
  metadata.reflection = AreaGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateGrid::kPointFieldNumber;
#endif  // !_MSC_VER

GateGrid::GateGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateGrid::InitAsDefaultInstance() {
  point_ = const_cast< ::HelloKittyMsgData::Point*>(&::HelloKittyMsgData::Point::default_instance());
}

GateGrid::GateGrid(const GateGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateGrid::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateGrid::~GateGrid() {
  SharedDtor();
}

void GateGrid::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void GateGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateGrid_descriptor_;
}

const GateGrid& GateGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kittygarden_2eproto();
  return *default_instance_;
}

GateGrid* GateGrid::default_instance_ = NULL;

GateGrid* GateGrid::New() const {
  return new GateGrid;
}

void GateGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_point()) {
      if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.Point point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.Point point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.Point point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.Point point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateGrid::MergeFrom(const GateGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::HelloKittyMsgData::Point::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateGrid::CopyFrom(const GateGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void GateGrid::Swap(GateGrid* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateGrid_descriptor_;
  metadata.reflection = GateGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KittyGarden::kMapidFieldNumber;
const int KittyGarden::kMapnameFieldNumber;
const int KittyGarden::kAreagridFieldNumber;
const int KittyGarden::kGategridFieldNumber;
#endif  // !_MSC_VER

KittyGarden::KittyGarden()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KittyGarden::InitAsDefaultInstance() {
}

KittyGarden::KittyGarden(const KittyGarden& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KittyGarden::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KittyGarden::~KittyGarden() {
  SharedDtor();
}

void KittyGarden::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::kEmptyString) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

void KittyGarden::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KittyGarden::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KittyGarden_descriptor_;
}

const KittyGarden& KittyGarden::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kittygarden_2eproto();
  return *default_instance_;
}

KittyGarden* KittyGarden::default_instance_ = NULL;

KittyGarden* KittyGarden::New() const {
  return new KittyGarden;
}

void KittyGarden::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = GOOGLE_ULONGLONG(0);
    if (has_mapname()) {
      if (mapname_ != &::google::protobuf::internal::kEmptyString) {
        mapname_->clear();
      }
    }
  }
  areagrid_.Clear();
  gategrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KittyGarden::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mapname;
        break;
      }

      // required string mapname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_areagrid;
        break;
      }

      // repeated .HelloKittyMsgData.AreaGrid areagrid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areagrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areagrid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_areagrid;
        if (input->ExpectTag(34)) goto parse_gategrid;
        break;
      }

      // repeated .HelloKittyMsgData.GateGrid gategrid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gategrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gategrid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gategrid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KittyGarden::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // required string mapname = 2;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mapname(), output);
  }

  // repeated .HelloKittyMsgData.AreaGrid areagrid = 3;
  for (int i = 0; i < this->areagrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->areagrid(i), output);
  }

  // repeated .HelloKittyMsgData.GateGrid gategrid = 4;
  for (int i = 0; i < this->gategrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gategrid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KittyGarden::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // required string mapname = 2;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mapname(), target);
  }

  // repeated .HelloKittyMsgData.AreaGrid areagrid = 3;
  for (int i = 0; i < this->areagrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->areagrid(i), target);
  }

  // repeated .HelloKittyMsgData.GateGrid gategrid = 4;
  for (int i = 0; i < this->gategrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gategrid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KittyGarden::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // required string mapname = 2;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

  }
  // repeated .HelloKittyMsgData.AreaGrid areagrid = 3;
  total_size += 1 * this->areagrid_size();
  for (int i = 0; i < this->areagrid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areagrid(i));
  }

  // repeated .HelloKittyMsgData.GateGrid gategrid = 4;
  total_size += 1 * this->gategrid_size();
  for (int i = 0; i < this->gategrid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gategrid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KittyGarden::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KittyGarden* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KittyGarden*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KittyGarden::MergeFrom(const KittyGarden& from) {
  GOOGLE_CHECK_NE(&from, this);
  areagrid_.MergeFrom(from.areagrid_);
  gategrid_.MergeFrom(from.gategrid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KittyGarden::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KittyGarden::CopyFrom(const KittyGarden& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KittyGarden::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < areagrid_size(); i++) {
    if (!this->areagrid(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gategrid_size(); i++) {
    if (!this->gategrid(i).IsInitialized()) return false;
  }
  return true;
}

void KittyGarden::Swap(KittyGarden* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(mapname_, other->mapname_);
    areagrid_.Swap(&other->areagrid_);
    gategrid_.Swap(&other->gategrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KittyGarden::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KittyGarden_descriptor_;
  metadata.reflection = KittyGarden_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqKittyGarden::kCharidFieldNumber;
#endif  // !_MSC_VER

ReqKittyGarden::ReqKittyGarden()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqKittyGarden::InitAsDefaultInstance() {
}

ReqKittyGarden::ReqKittyGarden(const ReqKittyGarden& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqKittyGarden::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqKittyGarden::~ReqKittyGarden() {
  SharedDtor();
}

void ReqKittyGarden::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqKittyGarden::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqKittyGarden::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqKittyGarden_descriptor_;
}

const ReqKittyGarden& ReqKittyGarden::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kittygarden_2eproto();
  return *default_instance_;
}

ReqKittyGarden* ReqKittyGarden::default_instance_ = NULL;

ReqKittyGarden* ReqKittyGarden::New() const {
  return new ReqKittyGarden;
}

void ReqKittyGarden::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqKittyGarden::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqKittyGarden::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqKittyGarden::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqKittyGarden::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqKittyGarden::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqKittyGarden* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqKittyGarden*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqKittyGarden::MergeFrom(const ReqKittyGarden& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqKittyGarden::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqKittyGarden::CopyFrom(const ReqKittyGarden& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqKittyGarden::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqKittyGarden::Swap(ReqKittyGarden* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqKittyGarden::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqKittyGarden_descriptor_;
  metadata.reflection = ReqKittyGarden_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckKittyGarden::kCharidFieldNumber;
const int AckKittyGarden::kKittygardenFieldNumber;
#endif  // !_MSC_VER

AckKittyGarden::AckKittyGarden()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckKittyGarden::InitAsDefaultInstance() {
  kittygarden_ = const_cast< ::HelloKittyMsgData::KittyGarden*>(&::HelloKittyMsgData::KittyGarden::default_instance());
}

AckKittyGarden::AckKittyGarden(const AckKittyGarden& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckKittyGarden::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  kittygarden_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckKittyGarden::~AckKittyGarden() {
  SharedDtor();
}

void AckKittyGarden::SharedDtor() {
  if (this != default_instance_) {
    delete kittygarden_;
  }
}

void AckKittyGarden::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckKittyGarden::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckKittyGarden_descriptor_;
}

const AckKittyGarden& AckKittyGarden::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kittygarden_2eproto();
  return *default_instance_;
}

AckKittyGarden* AckKittyGarden::default_instance_ = NULL;

AckKittyGarden* AckKittyGarden::New() const {
  return new AckKittyGarden;
}

void AckKittyGarden::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_kittygarden()) {
      if (kittygarden_ != NULL) kittygarden_->::HelloKittyMsgData::KittyGarden::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckKittyGarden::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kittygarden;
        break;
      }

      // required .HelloKittyMsgData.KittyGarden kittygarden = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kittygarden:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kittygarden()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckKittyGarden::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required .HelloKittyMsgData.KittyGarden kittygarden = 2;
  if (has_kittygarden()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kittygarden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckKittyGarden::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required .HelloKittyMsgData.KittyGarden kittygarden = 2;
  if (has_kittygarden()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kittygarden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckKittyGarden::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required .HelloKittyMsgData.KittyGarden kittygarden = 2;
    if (has_kittygarden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kittygarden());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckKittyGarden::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckKittyGarden* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckKittyGarden*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckKittyGarden::MergeFrom(const AckKittyGarden& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_kittygarden()) {
      mutable_kittygarden()->::HelloKittyMsgData::KittyGarden::MergeFrom(from.kittygarden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckKittyGarden::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckKittyGarden::CopyFrom(const AckKittyGarden& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckKittyGarden::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_kittygarden()) {
    if (!this->kittygarden().IsInitialized()) return false;
  }
  return true;
}

void AckKittyGarden::Swap(AckKittyGarden* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(kittygarden_, other->kittygarden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckKittyGarden::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckKittyGarden_descriptor_;
  metadata.reflection = AckKittyGarden_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpenArea::kPointFieldNumber;
#endif  // !_MSC_VER

ReqOpenArea::ReqOpenArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpenArea::InitAsDefaultInstance() {
  point_ = const_cast< ::HelloKittyMsgData::Point*>(&::HelloKittyMsgData::Point::default_instance());
}

ReqOpenArea::ReqOpenArea(const ReqOpenArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpenArea::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpenArea::~ReqOpenArea() {
  SharedDtor();
}

void ReqOpenArea::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void ReqOpenArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpenArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpenArea_descriptor_;
}

const ReqOpenArea& ReqOpenArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kittygarden_2eproto();
  return *default_instance_;
}

ReqOpenArea* ReqOpenArea::default_instance_ = NULL;

ReqOpenArea* ReqOpenArea::New() const {
  return new ReqOpenArea;
}

void ReqOpenArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_point()) {
      if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpenArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.Point point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpenArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.Point point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpenArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.Point point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpenArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.Point point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpenArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpenArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpenArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpenArea::MergeFrom(const ReqOpenArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::HelloKittyMsgData::Point::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpenArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpenArea::CopyFrom(const ReqOpenArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpenArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void ReqOpenArea::Swap(ReqOpenArea* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpenArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpenArea_descriptor_;
  metadata.reflection = ReqOpenArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFlushArea::kAreagridFieldNumber;
#endif  // !_MSC_VER

AckFlushArea::AckFlushArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFlushArea::InitAsDefaultInstance() {
  areagrid_ = const_cast< ::HelloKittyMsgData::AreaGrid*>(&::HelloKittyMsgData::AreaGrid::default_instance());
}

AckFlushArea::AckFlushArea(const AckFlushArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFlushArea::SharedCtor() {
  _cached_size_ = 0;
  areagrid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFlushArea::~AckFlushArea() {
  SharedDtor();
}

void AckFlushArea::SharedDtor() {
  if (this != default_instance_) {
    delete areagrid_;
  }
}

void AckFlushArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFlushArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFlushArea_descriptor_;
}

const AckFlushArea& AckFlushArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kittygarden_2eproto();
  return *default_instance_;
}

AckFlushArea* AckFlushArea::default_instance_ = NULL;

AckFlushArea* AckFlushArea::New() const {
  return new AckFlushArea;
}

void AckFlushArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_areagrid()) {
      if (areagrid_ != NULL) areagrid_->::HelloKittyMsgData::AreaGrid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFlushArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.AreaGrid areagrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_areagrid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFlushArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.AreaGrid areagrid = 1;
  if (has_areagrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->areagrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFlushArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.AreaGrid areagrid = 1;
  if (has_areagrid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->areagrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFlushArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.AreaGrid areagrid = 1;
    if (has_areagrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->areagrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFlushArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFlushArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFlushArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFlushArea::MergeFrom(const AckFlushArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areagrid()) {
      mutable_areagrid()->::HelloKittyMsgData::AreaGrid::MergeFrom(from.areagrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFlushArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFlushArea::CopyFrom(const AckFlushArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFlushArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_areagrid()) {
    if (!this->areagrid().IsInitialized()) return false;
  }
  return true;
}

void AckFlushArea::Swap(AckFlushArea* other) {
  if (other != this) {
    std::swap(areagrid_, other->areagrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFlushArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFlushArea_descriptor_;
  metadata.reflection = AckFlushArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGardenOpSuccess::kCodeFieldNumber;
const int AckGardenOpSuccess::kAreagridFieldNumber;
#endif  // !_MSC_VER

AckGardenOpSuccess::AckGardenOpSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGardenOpSuccess::InitAsDefaultInstance() {
  areagrid_ = const_cast< ::HelloKittyMsgData::AreaGrid*>(&::HelloKittyMsgData::AreaGrid::default_instance());
}

AckGardenOpSuccess::AckGardenOpSuccess(const AckGardenOpSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGardenOpSuccess::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  areagrid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGardenOpSuccess::~AckGardenOpSuccess() {
  SharedDtor();
}

void AckGardenOpSuccess::SharedDtor() {
  if (this != default_instance_) {
    delete areagrid_;
  }
}

void AckGardenOpSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGardenOpSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGardenOpSuccess_descriptor_;
}

const AckGardenOpSuccess& AckGardenOpSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kittygarden_2eproto();
  return *default_instance_;
}

AckGardenOpSuccess* AckGardenOpSuccess::default_instance_ = NULL;

AckGardenOpSuccess* AckGardenOpSuccess::New() const {
  return new AckGardenOpSuccess;
}

void AckGardenOpSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_areagrid()) {
      if (areagrid_ != NULL) areagrid_->::HelloKittyMsgData::AreaGrid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGardenOpSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.GardenSuccessCodeType code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::GardenSuccessCodeType_IsValid(value)) {
            set_code(static_cast< ::HelloKittyMsgData::GardenSuccessCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_areagrid;
        break;
      }

      // required .HelloKittyMsgData.AreaGrid areagrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areagrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_areagrid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGardenOpSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.GardenSuccessCodeType code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // required .HelloKittyMsgData.AreaGrid areagrid = 2;
  if (has_areagrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->areagrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGardenOpSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.GardenSuccessCodeType code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // required .HelloKittyMsgData.AreaGrid areagrid = 2;
  if (has_areagrid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->areagrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGardenOpSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.GardenSuccessCodeType code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // required .HelloKittyMsgData.AreaGrid areagrid = 2;
    if (has_areagrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->areagrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGardenOpSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGardenOpSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGardenOpSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGardenOpSuccess::MergeFrom(const AckGardenOpSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_areagrid()) {
      mutable_areagrid()->::HelloKittyMsgData::AreaGrid::MergeFrom(from.areagrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGardenOpSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGardenOpSuccess::CopyFrom(const AckGardenOpSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGardenOpSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_areagrid()) {
    if (!this->areagrid().IsInitialized()) return false;
  }
  return true;
}

void AckGardenOpSuccess::Swap(AckGardenOpSuccess* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(areagrid_, other->areagrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGardenOpSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGardenOpSuccess_descriptor_;
  metadata.reflection = AckGardenOpSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGardenOpFail::kCommoncodeFieldNumber;
const int AckGardenOpFail::kCodeFieldNumber;
#endif  // !_MSC_VER

AckGardenOpFail::AckGardenOpFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGardenOpFail::InitAsDefaultInstance() {
}

AckGardenOpFail::AckGardenOpFail(const AckGardenOpFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGardenOpFail::SharedCtor() {
  _cached_size_ = 0;
  commoncode_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGardenOpFail::~AckGardenOpFail() {
  SharedDtor();
}

void AckGardenOpFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGardenOpFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGardenOpFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGardenOpFail_descriptor_;
}

const AckGardenOpFail& AckGardenOpFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kittygarden_2eproto();
  return *default_instance_;
}

AckGardenOpFail* AckGardenOpFail::default_instance_ = NULL;

AckGardenOpFail* AckGardenOpFail::New() const {
  return new AckGardenOpFail;
}

void AckGardenOpFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commoncode_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGardenOpFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::ErrorCodeType_IsValid(value)) {
            set_commoncode(static_cast< ::HelloKittyMsgData::ErrorCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required .HelloKittyMsgData.GardenFailCodeType code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::GardenFailCodeType_IsValid(value)) {
            set_code(static_cast< ::HelloKittyMsgData::GardenFailCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGardenOpFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
  if (has_commoncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->commoncode(), output);
  }

  // required .HelloKittyMsgData.GardenFailCodeType code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGardenOpFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
  if (has_commoncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->commoncode(), target);
  }

  // required .HelloKittyMsgData.GardenFailCodeType code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGardenOpFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
    if (has_commoncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commoncode());
    }

    // required .HelloKittyMsgData.GardenFailCodeType code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGardenOpFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGardenOpFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGardenOpFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGardenOpFail::MergeFrom(const AckGardenOpFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commoncode()) {
      set_commoncode(from.commoncode());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGardenOpFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGardenOpFail::CopyFrom(const AckGardenOpFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGardenOpFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckGardenOpFail::Swap(AckGardenOpFail* other) {
  if (other != this) {
    std::swap(commoncode_, other->commoncode_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGardenOpFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGardenOpFail_descriptor_;
  metadata.reflection = AckGardenOpFail_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
