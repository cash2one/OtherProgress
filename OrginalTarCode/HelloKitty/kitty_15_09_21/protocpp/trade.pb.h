// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#ifndef PROTOBUF_trade_2eproto__INCLUDED
#define PROTOBUF_trade_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_trade_2eproto();
void protobuf_AssignDesc_trade_2eproto();
void protobuf_ShutdownFile_trade_2eproto();

class PbStoreItem;
class PbSaleCell;
class AckPbSaleCeilFlush;
class PbSaleBooth;
class AckFlushSaleBooth;
class ReqSallPutItem;
class ReqOpCell;
class ReqSellPaper;
class SellPaperCell;
class AckSellPaper;
class SellPaper;
class AckTradeOpFail;
class ReqAdvertise;
class ReqSallSystem;
class ReqPurchase;

enum SaleCellStatusType {
  Sale_Status_Empty = 0,
  Sale_Status_For_Sale = 1,
  Sale_Status_Sale_End = 2,
  Sale_Status_Close = 3
};
bool SaleCellStatusType_IsValid(int value);
const SaleCellStatusType SaleCellStatusType_MIN = Sale_Status_Empty;
const SaleCellStatusType SaleCellStatusType_MAX = Sale_Status_Close;
const int SaleCellStatusType_ARRAYSIZE = SaleCellStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SaleCellStatusType_descriptor();
inline const ::std::string& SaleCellStatusType_Name(SaleCellStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SaleCellStatusType_descriptor(), value);
}
inline bool SaleCellStatusType_Parse(
    const ::std::string& name, SaleCellStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SaleCellStatusType>(
    SaleCellStatusType_descriptor(), name, value);
}
enum OpCellType {
  Op_Type_Open_Cell = 0,
  Op_Type_Down_Item = 1,
  Op_Type_Get_Money = 2
};
bool OpCellType_IsValid(int value);
const OpCellType OpCellType_MIN = Op_Type_Open_Cell;
const OpCellType OpCellType_MAX = Op_Type_Get_Money;
const int OpCellType_ARRAYSIZE = OpCellType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpCellType_descriptor();
inline const ::std::string& OpCellType_Name(OpCellType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpCellType_descriptor(), value);
}
inline bool OpCellType_Parse(
    const ::std::string& name, OpCellType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpCellType>(
    OpCellType_descriptor(), name, value);
}
enum RandPaperType {
  Rand_Passer_By = 0,
  Rand_Friend = 1
};
bool RandPaperType_IsValid(int value);
const RandPaperType RandPaperType_MIN = Rand_Passer_By;
const RandPaperType RandPaperType_MAX = Rand_Friend;
const int RandPaperType_ARRAYSIZE = RandPaperType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RandPaperType_descriptor();
inline const ::std::string& RandPaperType_Name(RandPaperType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RandPaperType_descriptor(), value);
}
inline bool RandPaperType_Parse(
    const ::std::string& name, RandPaperType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RandPaperType>(
    RandPaperType_descriptor(), name, value);
}
enum TradeFailCodeType {
  Trade_Occupy = 0,
  Trade_Op_Close = 1,
  Trade_Op_Not_Empty = 2,
  Trade_Op_Item_Not_Enough = 3,
  Trade_Op_Empty = 4,
  Trade_Op_Full = 5,
  Trade_Op_Open = 6,
  Trade_Advertise_Again = 7
};
bool TradeFailCodeType_IsValid(int value);
const TradeFailCodeType TradeFailCodeType_MIN = Trade_Occupy;
const TradeFailCodeType TradeFailCodeType_MAX = Trade_Advertise_Again;
const int TradeFailCodeType_ARRAYSIZE = TradeFailCodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TradeFailCodeType_descriptor();
inline const ::std::string& TradeFailCodeType_Name(TradeFailCodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TradeFailCodeType_descriptor(), value);
}
inline bool TradeFailCodeType_Parse(
    const ::std::string& name, TradeFailCodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradeFailCodeType>(
    TradeFailCodeType_descriptor(), name, value);
}
// ===================================================================

class PbStoreItem : public ::google::protobuf::Message {
 public:
  PbStoreItem();
  virtual ~PbStoreItem();

  PbStoreItem(const PbStoreItem& from);

  inline PbStoreItem& operator=(const PbStoreItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbStoreItem& default_instance();

  void Swap(PbStoreItem* other);

  // implements Message ----------------------------------------------

  PbStoreItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbStoreItem& from);
  void MergeFrom(const PbStoreItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required uint32 itemCount = 2;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::uint32 itemcount() const;
  inline void set_itemcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.PbStoreItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static PbStoreItem* default_instance_;
};
// -------------------------------------------------------------------

class PbSaleCell : public ::google::protobuf::Message {
 public:
  PbSaleCell();
  virtual ~PbSaleCell();

  PbSaleCell(const PbSaleCell& from);

  inline PbSaleCell& operator=(const PbSaleCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbSaleCell& default_instance();

  void Swap(PbSaleCell* other);

  // implements Message ----------------------------------------------

  PbSaleCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbSaleCell& from);
  void MergeFrom(const PbSaleCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cellId = 1 [default = 0];
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cellid() const;
  inline void set_cellid(::google::protobuf::uint32 value);

  // required uint32 itemId = 2 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required uint32 itemCount = 3 [default = 0];
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 3;
  inline ::google::protobuf::uint32 itemcount() const;
  inline void set_itemcount(::google::protobuf::uint32 value);

  // required uint32 price = 4 [default = 0];
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // required .HelloKittyMsgData.SaleCellStatusType status = 5 [default = Sale_Status_Empty];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::HelloKittyMsgData::SaleCellStatusType status() const;
  inline void set_status(::HelloKittyMsgData::SaleCellStatusType value);

  // required string nickName = 6 [default = ""];
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 6;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required bool advertise = 7 [default = false];
  inline bool has_advertise() const;
  inline void clear_advertise();
  static const int kAdvertiseFieldNumber = 7;
  inline bool advertise() const;
  inline void set_advertise(bool value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.PbSaleCell)
 private:
  inline void set_has_cellid();
  inline void clear_has_cellid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_advertise();
  inline void clear_has_advertise();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cellid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemcount_;
  ::google::protobuf::uint32 price_;
  ::std::string* nickname_;
  int status_;
  bool advertise_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static PbSaleCell* default_instance_;
};
// -------------------------------------------------------------------

class AckPbSaleCeilFlush : public ::google::protobuf::Message {
 public:
  AckPbSaleCeilFlush();
  virtual ~AckPbSaleCeilFlush();

  AckPbSaleCeilFlush(const AckPbSaleCeilFlush& from);

  inline AckPbSaleCeilFlush& operator=(const AckPbSaleCeilFlush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPbSaleCeilFlush& default_instance();

  void Swap(AckPbSaleCeilFlush* other);

  // implements Message ----------------------------------------------

  AckPbSaleCeilFlush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPbSaleCeilFlush& from);
  void MergeFrom(const AckPbSaleCeilFlush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required .HelloKittyMsgData.PbSaleCell saleCell = 2;
  inline bool has_salecell() const;
  inline void clear_salecell();
  static const int kSaleCellFieldNumber = 2;
  inline const ::HelloKittyMsgData::PbSaleCell& salecell() const;
  inline ::HelloKittyMsgData::PbSaleCell* mutable_salecell();
  inline ::HelloKittyMsgData::PbSaleCell* release_salecell();
  inline void set_allocated_salecell(::HelloKittyMsgData::PbSaleCell* salecell);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckPbSaleCeilFlush)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_salecell();
  inline void clear_has_salecell();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::HelloKittyMsgData::PbSaleCell* salecell_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static AckPbSaleCeilFlush* default_instance_;
};
// -------------------------------------------------------------------

class PbSaleBooth : public ::google::protobuf::Message {
 public:
  PbSaleBooth();
  virtual ~PbSaleBooth();

  PbSaleBooth(const PbSaleBooth& from);

  inline PbSaleBooth& operator=(const PbSaleBooth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbSaleBooth& default_instance();

  void Swap(PbSaleBooth* other);

  // implements Message ----------------------------------------------

  PbSaleBooth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbSaleBooth& from);
  void MergeFrom(const PbSaleBooth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HelloKittyMsgData.PbSaleCell saleCell = 1;
  inline int salecell_size() const;
  inline void clear_salecell();
  static const int kSaleCellFieldNumber = 1;
  inline const ::HelloKittyMsgData::PbSaleCell& salecell(int index) const;
  inline ::HelloKittyMsgData::PbSaleCell* mutable_salecell(int index);
  inline ::HelloKittyMsgData::PbSaleCell* add_salecell();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbSaleCell >&
      salecell() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbSaleCell >*
      mutable_salecell();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.PbSaleBooth)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbSaleCell > salecell_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static PbSaleBooth* default_instance_;
};
// -------------------------------------------------------------------

class AckFlushSaleBooth : public ::google::protobuf::Message {
 public:
  AckFlushSaleBooth();
  virtual ~AckFlushSaleBooth();

  AckFlushSaleBooth(const AckFlushSaleBooth& from);

  inline AckFlushSaleBooth& operator=(const AckFlushSaleBooth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckFlushSaleBooth& default_instance();

  void Swap(AckFlushSaleBooth* other);

  // implements Message ----------------------------------------------

  AckFlushSaleBooth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckFlushSaleBooth& from);
  void MergeFrom(const AckFlushSaleBooth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 2;
  inline bool has_salebooth() const;
  inline void clear_salebooth();
  static const int kSaleBoothFieldNumber = 2;
  inline const ::HelloKittyMsgData::PbSaleBooth& salebooth() const;
  inline ::HelloKittyMsgData::PbSaleBooth* mutable_salebooth();
  inline ::HelloKittyMsgData::PbSaleBooth* release_salebooth();
  inline void set_allocated_salebooth(::HelloKittyMsgData::PbSaleBooth* salebooth);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckFlushSaleBooth)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_salebooth();
  inline void clear_has_salebooth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::HelloKittyMsgData::PbSaleBooth* salebooth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static AckFlushSaleBooth* default_instance_;
};
// -------------------------------------------------------------------

class ReqSallPutItem : public ::google::protobuf::Message {
 public:
  ReqSallPutItem();
  virtual ~ReqSallPutItem();

  ReqSallPutItem(const ReqSallPutItem& from);

  inline ReqSallPutItem& operator=(const ReqSallPutItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSallPutItem& default_instance();

  void Swap(ReqSallPutItem* other);

  // implements Message ----------------------------------------------

  ReqSallPutItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSallPutItem& from);
  void MergeFrom(const ReqSallPutItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cellId = 1;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cellid() const;
  inline void set_cellid(::google::protobuf::uint32 value);

  // required uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required uint32 itemCount = 3;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 3;
  inline ::google::protobuf::uint32 itemcount() const;
  inline void set_itemcount(::google::protobuf::uint32 value);

  // required uint32 price = 4;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // required bool advertise = 5;
  inline bool has_advertise() const;
  inline void clear_advertise();
  static const int kAdvertiseFieldNumber = 5;
  inline bool advertise() const;
  inline void set_advertise(bool value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqSallPutItem)
 private:
  inline void set_has_cellid();
  inline void clear_has_cellid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_advertise();
  inline void clear_has_advertise();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cellid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemcount_;
  ::google::protobuf::uint32 price_;
  bool advertise_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static ReqSallPutItem* default_instance_;
};
// -------------------------------------------------------------------

class ReqOpCell : public ::google::protobuf::Message {
 public:
  ReqOpCell();
  virtual ~ReqOpCell();

  ReqOpCell(const ReqOpCell& from);

  inline ReqOpCell& operator=(const ReqOpCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOpCell& default_instance();

  void Swap(ReqOpCell* other);

  // implements Message ----------------------------------------------

  ReqOpCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOpCell& from);
  void MergeFrom(const ReqOpCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cellId = 1;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cellid() const;
  inline void set_cellid(::google::protobuf::uint32 value);

  // required .HelloKittyMsgData.OpCellType optype = 2;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 2;
  inline ::HelloKittyMsgData::OpCellType optype() const;
  inline void set_optype(::HelloKittyMsgData::OpCellType value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqOpCell)
 private:
  inline void set_has_cellid();
  inline void clear_has_cellid();
  inline void set_has_optype();
  inline void clear_has_optype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cellid_;
  int optype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static ReqOpCell* default_instance_;
};
// -------------------------------------------------------------------

class ReqSellPaper : public ::google::protobuf::Message {
 public:
  ReqSellPaper();
  virtual ~ReqSellPaper();

  ReqSellPaper(const ReqSellPaper& from);

  inline ReqSellPaper& operator=(const ReqSellPaper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSellPaper& default_instance();

  void Swap(ReqSellPaper* other);

  // implements Message ----------------------------------------------

  ReqSellPaper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSellPaper& from);
  void MergeFrom(const ReqSellPaper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.RandPaperType randtype = 1;
  inline bool has_randtype() const;
  inline void clear_randtype();
  static const int kRandtypeFieldNumber = 1;
  inline ::HelloKittyMsgData::RandPaperType randtype() const;
  inline void set_randtype(::HelloKittyMsgData::RandPaperType value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqSellPaper)
 private:
  inline void set_has_randtype();
  inline void clear_has_randtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int randtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static ReqSellPaper* default_instance_;
};
// -------------------------------------------------------------------

class SellPaperCell : public ::google::protobuf::Message {
 public:
  SellPaperCell();
  virtual ~SellPaperCell();

  SellPaperCell(const SellPaperCell& from);

  inline SellPaperCell& operator=(const SellPaperCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SellPaperCell& default_instance();

  void Swap(SellPaperCell* other);

  // implements Message ----------------------------------------------

  SellPaperCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SellPaperCell& from);
  void MergeFrom(const SellPaperCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required .HelloKittyMsgData.PbSaleCell salecell = 3;
  inline bool has_salecell() const;
  inline void clear_salecell();
  static const int kSalecellFieldNumber = 3;
  inline const ::HelloKittyMsgData::PbSaleCell& salecell() const;
  inline ::HelloKittyMsgData::PbSaleCell* mutable_salecell();
  inline ::HelloKittyMsgData::PbSaleCell* release_salecell();
  inline void set_allocated_salecell(::HelloKittyMsgData::PbSaleCell* salecell);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.SellPaperCell)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_salecell();
  inline void clear_has_salecell();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::std::string* nickname_;
  ::HelloKittyMsgData::PbSaleCell* salecell_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static SellPaperCell* default_instance_;
};
// -------------------------------------------------------------------

class AckSellPaper : public ::google::protobuf::Message {
 public:
  AckSellPaper();
  virtual ~AckSellPaper();

  AckSellPaper(const AckSellPaper& from);

  inline AckSellPaper& operator=(const AckSellPaper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSellPaper& default_instance();

  void Swap(AckSellPaper* other);

  // implements Message ----------------------------------------------

  AckSellPaper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckSellPaper& from);
  void MergeFrom(const AckSellPaper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.SellPaper sellpaper = 1;
  inline bool has_sellpaper() const;
  inline void clear_sellpaper();
  static const int kSellpaperFieldNumber = 1;
  inline const ::HelloKittyMsgData::SellPaper& sellpaper() const;
  inline ::HelloKittyMsgData::SellPaper* mutable_sellpaper();
  inline ::HelloKittyMsgData::SellPaper* release_sellpaper();
  inline void set_allocated_sellpaper(::HelloKittyMsgData::SellPaper* sellpaper);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckSellPaper)
 private:
  inline void set_has_sellpaper();
  inline void clear_has_sellpaper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::SellPaper* sellpaper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static AckSellPaper* default_instance_;
};
// -------------------------------------------------------------------

class SellPaper : public ::google::protobuf::Message {
 public:
  SellPaper();
  virtual ~SellPaper();

  SellPaper(const SellPaper& from);

  inline SellPaper& operator=(const SellPaper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SellPaper& default_instance();

  void Swap(SellPaper* other);

  // implements Message ----------------------------------------------

  SellPaper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SellPaper& from);
  void MergeFrom(const SellPaper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.RandPaperType randtype = 1;
  inline bool has_randtype() const;
  inline void clear_randtype();
  static const int kRandtypeFieldNumber = 1;
  inline ::HelloKittyMsgData::RandPaperType randtype() const;
  inline void set_randtype(::HelloKittyMsgData::RandPaperType value);

  // required uint32 createTime = 2;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // repeated .HelloKittyMsgData.SellPaperCell paperCell = 3;
  inline int papercell_size() const;
  inline void clear_papercell();
  static const int kPaperCellFieldNumber = 3;
  inline const ::HelloKittyMsgData::SellPaperCell& papercell(int index) const;
  inline ::HelloKittyMsgData::SellPaperCell* mutable_papercell(int index);
  inline ::HelloKittyMsgData::SellPaperCell* add_papercell();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::SellPaperCell >&
      papercell() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::SellPaperCell >*
      mutable_papercell();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.SellPaper)
 private:
  inline void set_has_randtype();
  inline void clear_has_randtype();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int randtype_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::SellPaperCell > papercell_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static SellPaper* default_instance_;
};
// -------------------------------------------------------------------

class AckTradeOpFail : public ::google::protobuf::Message {
 public:
  AckTradeOpFail();
  virtual ~AckTradeOpFail();

  AckTradeOpFail(const AckTradeOpFail& from);

  inline AckTradeOpFail& operator=(const AckTradeOpFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckTradeOpFail& default_instance();

  void Swap(AckTradeOpFail* other);

  // implements Message ----------------------------------------------

  AckTradeOpFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckTradeOpFail& from);
  void MergeFrom(const AckTradeOpFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
  inline bool has_commoncode() const;
  inline void clear_commoncode();
  static const int kCommoncodeFieldNumber = 1;
  inline ::HelloKittyMsgData::ErrorCodeType commoncode() const;
  inline void set_commoncode(::HelloKittyMsgData::ErrorCodeType value);

  // required .HelloKittyMsgData.TradeFailCodeType code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::HelloKittyMsgData::TradeFailCodeType code() const;
  inline void set_code(::HelloKittyMsgData::TradeFailCodeType value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckTradeOpFail)
 private:
  inline void set_has_commoncode();
  inline void clear_has_commoncode();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int commoncode_;
  int code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static AckTradeOpFail* default_instance_;
};
// -------------------------------------------------------------------

class ReqAdvertise : public ::google::protobuf::Message {
 public:
  ReqAdvertise();
  virtual ~ReqAdvertise();

  ReqAdvertise(const ReqAdvertise& from);

  inline ReqAdvertise& operator=(const ReqAdvertise& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAdvertise& default_instance();

  void Swap(ReqAdvertise* other);

  // implements Message ----------------------------------------------

  ReqAdvertise* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAdvertise& from);
  void MergeFrom(const ReqAdvertise& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cellId = 1;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cellid() const;
  inline void set_cellid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqAdvertise)
 private:
  inline void set_has_cellid();
  inline void clear_has_cellid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cellid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static ReqAdvertise* default_instance_;
};
// -------------------------------------------------------------------

class ReqSallSystem : public ::google::protobuf::Message {
 public:
  ReqSallSystem();
  virtual ~ReqSallSystem();

  ReqSallSystem(const ReqSallSystem& from);

  inline ReqSallSystem& operator=(const ReqSallSystem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSallSystem& default_instance();

  void Swap(ReqSallSystem* other);

  // implements Message ----------------------------------------------

  ReqSallSystem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSallSystem& from);
  void MergeFrom(const ReqSallSystem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required uint32 itemCount = 2 [default = 0];
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::uint32 itemcount() const;
  inline void set_itemcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqSallSystem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static ReqSallSystem* default_instance_;
};
// -------------------------------------------------------------------

class ReqPurchase : public ::google::protobuf::Message {
 public:
  ReqPurchase();
  virtual ~ReqPurchase();

  ReqPurchase(const ReqPurchase& from);

  inline ReqPurchase& operator=(const ReqPurchase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPurchase& default_instance();

  void Swap(ReqPurchase* other);

  // implements Message ----------------------------------------------

  ReqPurchase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPurchase& from);
  void MergeFrom(const ReqPurchase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required uint32 cellid = 2;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellidFieldNumber = 2;
  inline ::google::protobuf::uint32 cellid() const;
  inline void set_cellid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqPurchase)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_cellid();
  inline void clear_has_cellid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 cellid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_trade_2eproto();
  friend void protobuf_AssignDesc_trade_2eproto();
  friend void protobuf_ShutdownFile_trade_2eproto();

  void InitAsDefaultInstance();
  static ReqPurchase* default_instance_;
};
// ===================================================================


// ===================================================================

// PbStoreItem

// required uint32 itemId = 1;
inline bool PbStoreItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbStoreItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbStoreItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbStoreItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 PbStoreItem::itemid() const {
  return itemid_;
}
inline void PbStoreItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required uint32 itemCount = 2;
inline bool PbStoreItem::has_itemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbStoreItem::set_has_itemcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbStoreItem::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbStoreItem::clear_itemcount() {
  itemcount_ = 0u;
  clear_has_itemcount();
}
inline ::google::protobuf::uint32 PbStoreItem::itemcount() const {
  return itemcount_;
}
inline void PbStoreItem::set_itemcount(::google::protobuf::uint32 value) {
  set_has_itemcount();
  itemcount_ = value;
}

// -------------------------------------------------------------------

// PbSaleCell

// required uint32 cellId = 1 [default = 0];
inline bool PbSaleCell::has_cellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbSaleCell::set_has_cellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbSaleCell::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbSaleCell::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 PbSaleCell::cellid() const {
  return cellid_;
}
inline void PbSaleCell::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
}

// required uint32 itemId = 2 [default = 0];
inline bool PbSaleCell::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbSaleCell::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbSaleCell::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbSaleCell::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 PbSaleCell::itemid() const {
  return itemid_;
}
inline void PbSaleCell::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required uint32 itemCount = 3 [default = 0];
inline bool PbSaleCell::has_itemcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbSaleCell::set_has_itemcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbSaleCell::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbSaleCell::clear_itemcount() {
  itemcount_ = 0u;
  clear_has_itemcount();
}
inline ::google::protobuf::uint32 PbSaleCell::itemcount() const {
  return itemcount_;
}
inline void PbSaleCell::set_itemcount(::google::protobuf::uint32 value) {
  set_has_itemcount();
  itemcount_ = value;
}

// required uint32 price = 4 [default = 0];
inline bool PbSaleCell::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbSaleCell::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbSaleCell::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbSaleCell::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 PbSaleCell::price() const {
  return price_;
}
inline void PbSaleCell::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// required .HelloKittyMsgData.SaleCellStatusType status = 5 [default = Sale_Status_Empty];
inline bool PbSaleCell::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbSaleCell::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbSaleCell::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbSaleCell::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::HelloKittyMsgData::SaleCellStatusType PbSaleCell::status() const {
  return static_cast< ::HelloKittyMsgData::SaleCellStatusType >(status_);
}
inline void PbSaleCell::set_status(::HelloKittyMsgData::SaleCellStatusType value) {
  assert(::HelloKittyMsgData::SaleCellStatusType_IsValid(value));
  set_has_status();
  status_ = value;
}

// required string nickName = 6 [default = ""];
inline bool PbSaleCell::has_nickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbSaleCell::set_has_nickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbSaleCell::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbSaleCell::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& PbSaleCell::nickname() const {
  return *nickname_;
}
inline void PbSaleCell::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PbSaleCell::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PbSaleCell::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbSaleCell::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* PbSaleCell::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbSaleCell::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool advertise = 7 [default = false];
inline bool PbSaleCell::has_advertise() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbSaleCell::set_has_advertise() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbSaleCell::clear_has_advertise() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbSaleCell::clear_advertise() {
  advertise_ = false;
  clear_has_advertise();
}
inline bool PbSaleCell::advertise() const {
  return advertise_;
}
inline void PbSaleCell::set_advertise(bool value) {
  set_has_advertise();
  advertise_ = value;
}

// -------------------------------------------------------------------

// AckPbSaleCeilFlush

// required uint64 charid = 1;
inline bool AckPbSaleCeilFlush::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckPbSaleCeilFlush::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckPbSaleCeilFlush::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckPbSaleCeilFlush::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 AckPbSaleCeilFlush::charid() const {
  return charid_;
}
inline void AckPbSaleCeilFlush::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// required .HelloKittyMsgData.PbSaleCell saleCell = 2;
inline bool AckPbSaleCeilFlush::has_salecell() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckPbSaleCeilFlush::set_has_salecell() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckPbSaleCeilFlush::clear_has_salecell() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckPbSaleCeilFlush::clear_salecell() {
  if (salecell_ != NULL) salecell_->::HelloKittyMsgData::PbSaleCell::Clear();
  clear_has_salecell();
}
inline const ::HelloKittyMsgData::PbSaleCell& AckPbSaleCeilFlush::salecell() const {
  return salecell_ != NULL ? *salecell_ : *default_instance_->salecell_;
}
inline ::HelloKittyMsgData::PbSaleCell* AckPbSaleCeilFlush::mutable_salecell() {
  set_has_salecell();
  if (salecell_ == NULL) salecell_ = new ::HelloKittyMsgData::PbSaleCell;
  return salecell_;
}
inline ::HelloKittyMsgData::PbSaleCell* AckPbSaleCeilFlush::release_salecell() {
  clear_has_salecell();
  ::HelloKittyMsgData::PbSaleCell* temp = salecell_;
  salecell_ = NULL;
  return temp;
}
inline void AckPbSaleCeilFlush::set_allocated_salecell(::HelloKittyMsgData::PbSaleCell* salecell) {
  delete salecell_;
  salecell_ = salecell;
  if (salecell) {
    set_has_salecell();
  } else {
    clear_has_salecell();
  }
}

// -------------------------------------------------------------------

// PbSaleBooth

// repeated .HelloKittyMsgData.PbSaleCell saleCell = 1;
inline int PbSaleBooth::salecell_size() const {
  return salecell_.size();
}
inline void PbSaleBooth::clear_salecell() {
  salecell_.Clear();
}
inline const ::HelloKittyMsgData::PbSaleCell& PbSaleBooth::salecell(int index) const {
  return salecell_.Get(index);
}
inline ::HelloKittyMsgData::PbSaleCell* PbSaleBooth::mutable_salecell(int index) {
  return salecell_.Mutable(index);
}
inline ::HelloKittyMsgData::PbSaleCell* PbSaleBooth::add_salecell() {
  return salecell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbSaleCell >&
PbSaleBooth::salecell() const {
  return salecell_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PbSaleCell >*
PbSaleBooth::mutable_salecell() {
  return &salecell_;
}

// -------------------------------------------------------------------

// AckFlushSaleBooth

// required uint64 charid = 1;
inline bool AckFlushSaleBooth::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckFlushSaleBooth::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckFlushSaleBooth::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckFlushSaleBooth::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 AckFlushSaleBooth::charid() const {
  return charid_;
}
inline void AckFlushSaleBooth::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional .HelloKittyMsgData.PbSaleBooth saleBooth = 2;
inline bool AckFlushSaleBooth::has_salebooth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckFlushSaleBooth::set_has_salebooth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckFlushSaleBooth::clear_has_salebooth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckFlushSaleBooth::clear_salebooth() {
  if (salebooth_ != NULL) salebooth_->::HelloKittyMsgData::PbSaleBooth::Clear();
  clear_has_salebooth();
}
inline const ::HelloKittyMsgData::PbSaleBooth& AckFlushSaleBooth::salebooth() const {
  return salebooth_ != NULL ? *salebooth_ : *default_instance_->salebooth_;
}
inline ::HelloKittyMsgData::PbSaleBooth* AckFlushSaleBooth::mutable_salebooth() {
  set_has_salebooth();
  if (salebooth_ == NULL) salebooth_ = new ::HelloKittyMsgData::PbSaleBooth;
  return salebooth_;
}
inline ::HelloKittyMsgData::PbSaleBooth* AckFlushSaleBooth::release_salebooth() {
  clear_has_salebooth();
  ::HelloKittyMsgData::PbSaleBooth* temp = salebooth_;
  salebooth_ = NULL;
  return temp;
}
inline void AckFlushSaleBooth::set_allocated_salebooth(::HelloKittyMsgData::PbSaleBooth* salebooth) {
  delete salebooth_;
  salebooth_ = salebooth;
  if (salebooth) {
    set_has_salebooth();
  } else {
    clear_has_salebooth();
  }
}

// -------------------------------------------------------------------

// ReqSallPutItem

// required uint32 cellId = 1;
inline bool ReqSallPutItem::has_cellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSallPutItem::set_has_cellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSallPutItem::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSallPutItem::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 ReqSallPutItem::cellid() const {
  return cellid_;
}
inline void ReqSallPutItem::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
}

// required uint32 itemId = 2;
inline bool ReqSallPutItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSallPutItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSallPutItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSallPutItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ReqSallPutItem::itemid() const {
  return itemid_;
}
inline void ReqSallPutItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required uint32 itemCount = 3;
inline bool ReqSallPutItem::has_itemcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSallPutItem::set_has_itemcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqSallPutItem::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqSallPutItem::clear_itemcount() {
  itemcount_ = 0u;
  clear_has_itemcount();
}
inline ::google::protobuf::uint32 ReqSallPutItem::itemcount() const {
  return itemcount_;
}
inline void ReqSallPutItem::set_itemcount(::google::protobuf::uint32 value) {
  set_has_itemcount();
  itemcount_ = value;
}

// required uint32 price = 4;
inline bool ReqSallPutItem::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqSallPutItem::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqSallPutItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqSallPutItem::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 ReqSallPutItem::price() const {
  return price_;
}
inline void ReqSallPutItem::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// required bool advertise = 5;
inline bool ReqSallPutItem::has_advertise() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqSallPutItem::set_has_advertise() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqSallPutItem::clear_has_advertise() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqSallPutItem::clear_advertise() {
  advertise_ = false;
  clear_has_advertise();
}
inline bool ReqSallPutItem::advertise() const {
  return advertise_;
}
inline void ReqSallPutItem::set_advertise(bool value) {
  set_has_advertise();
  advertise_ = value;
}

// -------------------------------------------------------------------

// ReqOpCell

// required uint32 cellId = 1;
inline bool ReqOpCell::has_cellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOpCell::set_has_cellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOpCell::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOpCell::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 ReqOpCell::cellid() const {
  return cellid_;
}
inline void ReqOpCell::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
}

// required .HelloKittyMsgData.OpCellType optype = 2;
inline bool ReqOpCell::has_optype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqOpCell::set_has_optype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqOpCell::clear_has_optype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqOpCell::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::HelloKittyMsgData::OpCellType ReqOpCell::optype() const {
  return static_cast< ::HelloKittyMsgData::OpCellType >(optype_);
}
inline void ReqOpCell::set_optype(::HelloKittyMsgData::OpCellType value) {
  assert(::HelloKittyMsgData::OpCellType_IsValid(value));
  set_has_optype();
  optype_ = value;
}

// -------------------------------------------------------------------

// ReqSellPaper

// required .HelloKittyMsgData.RandPaperType randtype = 1;
inline bool ReqSellPaper::has_randtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSellPaper::set_has_randtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSellPaper::clear_has_randtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSellPaper::clear_randtype() {
  randtype_ = 0;
  clear_has_randtype();
}
inline ::HelloKittyMsgData::RandPaperType ReqSellPaper::randtype() const {
  return static_cast< ::HelloKittyMsgData::RandPaperType >(randtype_);
}
inline void ReqSellPaper::set_randtype(::HelloKittyMsgData::RandPaperType value) {
  assert(::HelloKittyMsgData::RandPaperType_IsValid(value));
  set_has_randtype();
  randtype_ = value;
}

// -------------------------------------------------------------------

// SellPaperCell

// required uint64 charid = 1;
inline bool SellPaperCell::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SellPaperCell::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SellPaperCell::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SellPaperCell::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SellPaperCell::charid() const {
  return charid_;
}
inline void SellPaperCell::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// required string nickname = 2;
inline bool SellPaperCell::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SellPaperCell::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SellPaperCell::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SellPaperCell::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& SellPaperCell::nickname() const {
  return *nickname_;
}
inline void SellPaperCell::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SellPaperCell::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SellPaperCell::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SellPaperCell::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* SellPaperCell::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SellPaperCell::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .HelloKittyMsgData.PbSaleCell salecell = 3;
inline bool SellPaperCell::has_salecell() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SellPaperCell::set_has_salecell() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SellPaperCell::clear_has_salecell() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SellPaperCell::clear_salecell() {
  if (salecell_ != NULL) salecell_->::HelloKittyMsgData::PbSaleCell::Clear();
  clear_has_salecell();
}
inline const ::HelloKittyMsgData::PbSaleCell& SellPaperCell::salecell() const {
  return salecell_ != NULL ? *salecell_ : *default_instance_->salecell_;
}
inline ::HelloKittyMsgData::PbSaleCell* SellPaperCell::mutable_salecell() {
  set_has_salecell();
  if (salecell_ == NULL) salecell_ = new ::HelloKittyMsgData::PbSaleCell;
  return salecell_;
}
inline ::HelloKittyMsgData::PbSaleCell* SellPaperCell::release_salecell() {
  clear_has_salecell();
  ::HelloKittyMsgData::PbSaleCell* temp = salecell_;
  salecell_ = NULL;
  return temp;
}
inline void SellPaperCell::set_allocated_salecell(::HelloKittyMsgData::PbSaleCell* salecell) {
  delete salecell_;
  salecell_ = salecell;
  if (salecell) {
    set_has_salecell();
  } else {
    clear_has_salecell();
  }
}

// -------------------------------------------------------------------

// AckSellPaper

// required .HelloKittyMsgData.SellPaper sellpaper = 1;
inline bool AckSellPaper::has_sellpaper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckSellPaper::set_has_sellpaper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckSellPaper::clear_has_sellpaper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckSellPaper::clear_sellpaper() {
  if (sellpaper_ != NULL) sellpaper_->::HelloKittyMsgData::SellPaper::Clear();
  clear_has_sellpaper();
}
inline const ::HelloKittyMsgData::SellPaper& AckSellPaper::sellpaper() const {
  return sellpaper_ != NULL ? *sellpaper_ : *default_instance_->sellpaper_;
}
inline ::HelloKittyMsgData::SellPaper* AckSellPaper::mutable_sellpaper() {
  set_has_sellpaper();
  if (sellpaper_ == NULL) sellpaper_ = new ::HelloKittyMsgData::SellPaper;
  return sellpaper_;
}
inline ::HelloKittyMsgData::SellPaper* AckSellPaper::release_sellpaper() {
  clear_has_sellpaper();
  ::HelloKittyMsgData::SellPaper* temp = sellpaper_;
  sellpaper_ = NULL;
  return temp;
}
inline void AckSellPaper::set_allocated_sellpaper(::HelloKittyMsgData::SellPaper* sellpaper) {
  delete sellpaper_;
  sellpaper_ = sellpaper;
  if (sellpaper) {
    set_has_sellpaper();
  } else {
    clear_has_sellpaper();
  }
}

// -------------------------------------------------------------------

// SellPaper

// required .HelloKittyMsgData.RandPaperType randtype = 1;
inline bool SellPaper::has_randtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SellPaper::set_has_randtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SellPaper::clear_has_randtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SellPaper::clear_randtype() {
  randtype_ = 0;
  clear_has_randtype();
}
inline ::HelloKittyMsgData::RandPaperType SellPaper::randtype() const {
  return static_cast< ::HelloKittyMsgData::RandPaperType >(randtype_);
}
inline void SellPaper::set_randtype(::HelloKittyMsgData::RandPaperType value) {
  assert(::HelloKittyMsgData::RandPaperType_IsValid(value));
  set_has_randtype();
  randtype_ = value;
}

// required uint32 createTime = 2;
inline bool SellPaper::has_createtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SellPaper::set_has_createtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SellPaper::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SellPaper::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 SellPaper::createtime() const {
  return createtime_;
}
inline void SellPaper::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// repeated .HelloKittyMsgData.SellPaperCell paperCell = 3;
inline int SellPaper::papercell_size() const {
  return papercell_.size();
}
inline void SellPaper::clear_papercell() {
  papercell_.Clear();
}
inline const ::HelloKittyMsgData::SellPaperCell& SellPaper::papercell(int index) const {
  return papercell_.Get(index);
}
inline ::HelloKittyMsgData::SellPaperCell* SellPaper::mutable_papercell(int index) {
  return papercell_.Mutable(index);
}
inline ::HelloKittyMsgData::SellPaperCell* SellPaper::add_papercell() {
  return papercell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::SellPaperCell >&
SellPaper::papercell() const {
  return papercell_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::SellPaperCell >*
SellPaper::mutable_papercell() {
  return &papercell_;
}

// -------------------------------------------------------------------

// AckTradeOpFail

// required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
inline bool AckTradeOpFail::has_commoncode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckTradeOpFail::set_has_commoncode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckTradeOpFail::clear_has_commoncode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckTradeOpFail::clear_commoncode() {
  commoncode_ = 0;
  clear_has_commoncode();
}
inline ::HelloKittyMsgData::ErrorCodeType AckTradeOpFail::commoncode() const {
  return static_cast< ::HelloKittyMsgData::ErrorCodeType >(commoncode_);
}
inline void AckTradeOpFail::set_commoncode(::HelloKittyMsgData::ErrorCodeType value) {
  assert(::HelloKittyMsgData::ErrorCodeType_IsValid(value));
  set_has_commoncode();
  commoncode_ = value;
}

// required .HelloKittyMsgData.TradeFailCodeType code = 2;
inline bool AckTradeOpFail::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckTradeOpFail::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckTradeOpFail::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckTradeOpFail::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::HelloKittyMsgData::TradeFailCodeType AckTradeOpFail::code() const {
  return static_cast< ::HelloKittyMsgData::TradeFailCodeType >(code_);
}
inline void AckTradeOpFail::set_code(::HelloKittyMsgData::TradeFailCodeType value) {
  assert(::HelloKittyMsgData::TradeFailCodeType_IsValid(value));
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// ReqAdvertise

// required uint32 cellId = 1;
inline bool ReqAdvertise::has_cellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAdvertise::set_has_cellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAdvertise::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAdvertise::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 ReqAdvertise::cellid() const {
  return cellid_;
}
inline void ReqAdvertise::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
}

// -------------------------------------------------------------------

// ReqSallSystem

// required uint32 itemid = 1;
inline bool ReqSallSystem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSallSystem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSallSystem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSallSystem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ReqSallSystem::itemid() const {
  return itemid_;
}
inline void ReqSallSystem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required uint32 itemCount = 2 [default = 0];
inline bool ReqSallSystem::has_itemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSallSystem::set_has_itemcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSallSystem::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSallSystem::clear_itemcount() {
  itemcount_ = 0u;
  clear_has_itemcount();
}
inline ::google::protobuf::uint32 ReqSallSystem::itemcount() const {
  return itemcount_;
}
inline void ReqSallSystem::set_itemcount(::google::protobuf::uint32 value) {
  set_has_itemcount();
  itemcount_ = value;
}

// -------------------------------------------------------------------

// ReqPurchase

// required uint64 charid = 1;
inline bool ReqPurchase::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPurchase::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPurchase::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPurchase::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ReqPurchase::charid() const {
  return charid_;
}
inline void ReqPurchase::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// required uint32 cellid = 2;
inline bool ReqPurchase::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPurchase::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPurchase::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPurchase::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 ReqPurchase::cellid() const {
  return cellid_;
}
inline void ReqPurchase::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::SaleCellStatusType>() {
  return ::HelloKittyMsgData::SaleCellStatusType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::OpCellType>() {
  return ::HelloKittyMsgData::OpCellType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::RandPaperType>() {
  return ::HelloKittyMsgData::RandPaperType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::TradeFailCodeType>() {
  return ::HelloKittyMsgData::TradeFailCodeType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trade_2eproto__INCLUDED
