// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usecardbuild.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "usecardbuild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* UseCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUserCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUserCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildCardOpType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_usecardbuild_2eproto() {
  protobuf_AddDesc_usecardbuild_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "usecardbuild.proto");
  GOOGLE_CHECK(file != NULL);
  UseCardInfo_descriptor_ = file->message_type(0);
  static const int UseCardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCardInfo, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCardInfo, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCardInfo, usecardtime_),
  };
  UseCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseCardInfo_descriptor_,
      UseCardInfo::default_instance_,
      UseCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseCardInfo));
  ReqOpCard_descriptor_ = file->message_type(1);
  static const int ReqOpCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpCard, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpCard, optype_),
  };
  ReqOpCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpCard_descriptor_,
      ReqOpCard::default_instance_,
      ReqOpCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpCard));
  AckUpdateCard_descriptor_ = file->message_type(2);
  static const int AckUpdateCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCard, cardinfo_),
  };
  AckUpdateCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateCard_descriptor_,
      AckUpdateCard::default_instance_,
      AckUpdateCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateCard));
  ReqUserCard_descriptor_ = file->message_type(3);
  static const int ReqUserCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserCard, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserCard, item_),
  };
  ReqUserCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUserCard_descriptor_,
      ReqUserCard::default_instance_,
      ReqUserCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUserCard));
  BuildCardOpType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_usecardbuild_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseCardInfo_descriptor_, &UseCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpCard_descriptor_, &ReqOpCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateCard_descriptor_, &AckUpdateCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUserCard_descriptor_, &ReqUserCard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_usecardbuild_2eproto() {
  delete UseCardInfo::default_instance_;
  delete UseCardInfo_reflection_;
  delete ReqOpCard::default_instance_;
  delete ReqOpCard_reflection_;
  delete AckUpdateCard::default_instance_;
  delete AckUpdateCard_reflection_;
  delete ReqUserCard::default_instance_;
  delete ReqUserCard_reflection_;
}

void protobuf_AddDesc_usecardbuild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022usecardbuild.proto\022\021HelloKittyMsgData\""
    "B\n\013UseCardInfo\022\016\n\006tempid\030\001 \002(\004\022\016\n\006cardid"
    "\030\002 \002(\r\022\023\n\013usecardtime\030\003 \002(\r\"O\n\tReqOpCard"
    "\022\016\n\006tempid\030\001 \002(\004\0222\n\006optype\030\002 \002(\0162\".Hello"
    "KittyMsgData.BuildCardOpType\"A\n\rAckUpdat"
    "eCard\0220\n\010cardinfo\030\001 \002(\0132\036.HelloKittyMsgD"
    "ata.UseCardInfo\"+\n\013ReqUserCard\022\016\n\006tempid"
    "\030\001 \002(\004\022\014\n\004item\030\002 \002(\r*+\n\017BuildCardOpType\022"
    "\013\n\007BCO_Req\020\000\022\013\n\007BCO_Del\020\001", 345);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "usecardbuild.proto", &protobuf_RegisterTypes);
  UseCardInfo::default_instance_ = new UseCardInfo();
  ReqOpCard::default_instance_ = new ReqOpCard();
  AckUpdateCard::default_instance_ = new AckUpdateCard();
  ReqUserCard::default_instance_ = new ReqUserCard();
  UseCardInfo::default_instance_->InitAsDefaultInstance();
  ReqOpCard::default_instance_->InitAsDefaultInstance();
  AckUpdateCard::default_instance_->InitAsDefaultInstance();
  ReqUserCard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_usecardbuild_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_usecardbuild_2eproto {
  StaticDescriptorInitializer_usecardbuild_2eproto() {
    protobuf_AddDesc_usecardbuild_2eproto();
  }
} static_descriptor_initializer_usecardbuild_2eproto_;
const ::google::protobuf::EnumDescriptor* BuildCardOpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildCardOpType_descriptor_;
}
bool BuildCardOpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UseCardInfo::kTempidFieldNumber;
const int UseCardInfo::kCardidFieldNumber;
const int UseCardInfo::kUsecardtimeFieldNumber;
#endif  // !_MSC_VER

UseCardInfo::UseCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseCardInfo::InitAsDefaultInstance() {
}

UseCardInfo::UseCardInfo(const UseCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseCardInfo::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  cardid_ = 0u;
  usecardtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseCardInfo::~UseCardInfo() {
  SharedDtor();
}

void UseCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseCardInfo_descriptor_;
}

const UseCardInfo& UseCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usecardbuild_2eproto();
  return *default_instance_;
}

UseCardInfo* UseCardInfo::default_instance_ = NULL;

UseCardInfo* UseCardInfo::New() const {
  return new UseCardInfo;
}

void UseCardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    cardid_ = 0u;
    usecardtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardid;
        break;
      }

      // required uint32 cardid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usecardtime;
        break;
      }

      // required uint32 usecardtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usecardtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usecardtime_)));
          set_has_usecardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required uint32 cardid = 2;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cardid(), output);
  }

  // required uint32 usecardtime = 3;
  if (has_usecardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usecardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required uint32 cardid = 2;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cardid(), target);
  }

  // required uint32 usecardtime = 3;
  if (has_usecardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usecardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required uint32 cardid = 2;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }

    // required uint32 usecardtime = 3;
    if (has_usecardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usecardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseCardInfo::MergeFrom(const UseCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_usecardtime()) {
      set_usecardtime(from.usecardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseCardInfo::CopyFrom(const UseCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseCardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UseCardInfo::Swap(UseCardInfo* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(cardid_, other->cardid_);
    std::swap(usecardtime_, other->usecardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseCardInfo_descriptor_;
  metadata.reflection = UseCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpCard::kTempidFieldNumber;
const int ReqOpCard::kOptypeFieldNumber;
#endif  // !_MSC_VER

ReqOpCard::ReqOpCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpCard::InitAsDefaultInstance() {
}

ReqOpCard::ReqOpCard(const ReqOpCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpCard::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpCard::~ReqOpCard() {
  SharedDtor();
}

void ReqOpCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpCard_descriptor_;
}

const ReqOpCard& ReqOpCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usecardbuild_2eproto();
  return *default_instance_;
}

ReqOpCard* ReqOpCard::default_instance_ = NULL;

ReqOpCard* ReqOpCard::New() const {
  return new ReqOpCard;
}

void ReqOpCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    optype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_optype;
        break;
      }

      // required .HelloKittyMsgData.BuildCardOpType optype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::BuildCardOpType_IsValid(value)) {
            set_optype(static_cast< ::HelloKittyMsgData::BuildCardOpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required .HelloKittyMsgData.BuildCardOpType optype = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required .HelloKittyMsgData.BuildCardOpType optype = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.BuildCardOpType optype = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpCard::MergeFrom(const ReqOpCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpCard::CopyFrom(const ReqOpCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqOpCard::Swap(ReqOpCard* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpCard_descriptor_;
  metadata.reflection = ReqOpCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateCard::kCardinfoFieldNumber;
#endif  // !_MSC_VER

AckUpdateCard::AckUpdateCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateCard::InitAsDefaultInstance() {
  cardinfo_ = const_cast< ::HelloKittyMsgData::UseCardInfo*>(&::HelloKittyMsgData::UseCardInfo::default_instance());
}

AckUpdateCard::AckUpdateCard(const AckUpdateCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateCard::SharedCtor() {
  _cached_size_ = 0;
  cardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateCard::~AckUpdateCard() {
  SharedDtor();
}

void AckUpdateCard::SharedDtor() {
  if (this != default_instance_) {
    delete cardinfo_;
  }
}

void AckUpdateCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateCard_descriptor_;
}

const AckUpdateCard& AckUpdateCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usecardbuild_2eproto();
  return *default_instance_;
}

AckUpdateCard* AckUpdateCard::default_instance_ = NULL;

AckUpdateCard* AckUpdateCard::New() const {
  return new AckUpdateCard;
}

void AckUpdateCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cardinfo()) {
      if (cardinfo_ != NULL) cardinfo_->::HelloKittyMsgData::UseCardInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.UseCardInfo cardinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.UseCardInfo cardinfo = 1;
  if (has_cardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.UseCardInfo cardinfo = 1;
  if (has_cardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.UseCardInfo cardinfo = 1;
    if (has_cardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateCard::MergeFrom(const AckUpdateCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardinfo()) {
      mutable_cardinfo()->::HelloKittyMsgData::UseCardInfo::MergeFrom(from.cardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateCard::CopyFrom(const AckUpdateCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cardinfo()) {
    if (!this->cardinfo().IsInitialized()) return false;
  }
  return true;
}

void AckUpdateCard::Swap(AckUpdateCard* other) {
  if (other != this) {
    std::swap(cardinfo_, other->cardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateCard_descriptor_;
  metadata.reflection = AckUpdateCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUserCard::kTempidFieldNumber;
const int ReqUserCard::kItemFieldNumber;
#endif  // !_MSC_VER

ReqUserCard::ReqUserCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqUserCard::InitAsDefaultInstance() {
}

ReqUserCard::ReqUserCard(const ReqUserCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqUserCard::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  item_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUserCard::~ReqUserCard() {
  SharedDtor();
}

void ReqUserCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqUserCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUserCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUserCard_descriptor_;
}

const ReqUserCard& ReqUserCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usecardbuild_2eproto();
  return *default_instance_;
}

ReqUserCard* ReqUserCard::default_instance_ = NULL;

ReqUserCard* ReqUserCard::New() const {
  return new ReqUserCard;
}

void ReqUserCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    item_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUserCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // required uint32 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqUserCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required uint32 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqUserCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required uint32 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqUserCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required uint32 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUserCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUserCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUserCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUserCard::MergeFrom(const ReqUserCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUserCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUserCard::CopyFrom(const ReqUserCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUserCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqUserCard::Swap(ReqUserCard* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUserCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUserCard_descriptor_;
  metadata.reflection = ReqUserCard_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
