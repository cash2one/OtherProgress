// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAllTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAllTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckAllTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckAllTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSubmitTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSubmitTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, total_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  ReqAllTask_descriptor_ = file->message_type(1);
  static const int ReqAllTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAllTask, tasktype_),
  };
  ReqAllTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAllTask_descriptor_,
      ReqAllTask::default_instance_,
      ReqAllTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAllTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAllTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAllTask));
  AckAllTask_descriptor_ = file->message_type(2);
  static const int AckAllTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllTask, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllTask, task_),
  };
  AckAllTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckAllTask_descriptor_,
      AckAllTask::default_instance_,
      AckAllTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckAllTask));
  ReqSubmitTask_descriptor_ = file->message_type(3);
  static const int ReqSubmitTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitTask, id_),
  };
  ReqSubmitTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSubmitTask_descriptor_,
      ReqSubmitTask::default_instance_,
      ReqSubmitTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSubmitTask));
  AckUpdateTask_descriptor_ = file->message_type(4);
  static const int AckUpdateTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTask, task_),
  };
  AckUpdateTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateTask_descriptor_,
      AckUpdateTask::default_instance_,
      AckUpdateTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateTask));
  TaskStatus_descriptor_ = file->enum_type(0);
  TaskType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAllTask_descriptor_, &ReqAllTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckAllTask_descriptor_, &AckAllTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSubmitTask_descriptor_, &ReqSubmitTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateTask_descriptor_, &AckUpdateTask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
  delete ReqAllTask::default_instance_;
  delete ReqAllTask_reflection_;
  delete AckAllTask::default_instance_;
  delete AckAllTask_reflection_;
  delete ReqSubmitTask::default_instance_;
  delete ReqSubmitTask_reflection_;
  delete AckUpdateTask::default_instance_;
  delete AckUpdateTask_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\021HelloKittyMsgData\"a\n\004Task\022"
    "\n\n\002id\030\001 \002(\004\022-\n\006status\030\002 \002(\0162\035.HelloKitty"
    "MsgData.TaskStatus\022\017\n\007current\030\003 \002(\r\022\r\n\005t"
    "otal\030\004 \002(\r\"N\n\nReqAllTask\022@\n\010tasktype\030\001 \001"
    "(\0162\033.HelloKittyMsgData.TaskType:\021Task_Ty"
    "pe_Default\"u\n\nAckAllTask\022@\n\010tasktype\030\001 \001"
    "(\0162\033.HelloKittyMsgData.TaskType:\021Task_Ty"
    "pe_Default\022%\n\004task\030\002 \003(\0132\027.HelloKittyMsg"
    "Data.Task\"\033\n\rReqSubmitTask\022\n\n\002id\030\001 \002(\004\"6"
    "\n\rAckUpdateTask\022%\n\004task\030\001 \002(\0132\027.HelloKit"
    "tyMsgData.Task*>\n\nTaskStatus\022\017\n\013Task_Acc"
    "ept\020\000\022\017\n\013Task_Finish\020\001\022\016\n\nTask_Award\020\002*H"
    "\n\010TaskType\022\025\n\021Task_Type_Default\020\000\022\022\n\016Tas"
    "k_Type_Main\020\001\022\021\n\rTask_Type_Day\020\002", 552);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  ReqAllTask::default_instance_ = new ReqAllTask();
  AckAllTask::default_instance_ = new AckAllTask();
  ReqSubmitTask::default_instance_ = new ReqSubmitTask();
  AckUpdateTask::default_instance_ = new AckUpdateTask();
  Task::default_instance_->InitAsDefaultInstance();
  ReqAllTask::default_instance_->InitAsDefaultInstance();
  AckAllTask::default_instance_->InitAsDefaultInstance();
  ReqSubmitTask::default_instance_->InitAsDefaultInstance();
  AckUpdateTask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;
const ::google::protobuf::EnumDescriptor* TaskStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_descriptor_;
}
bool TaskStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskType_descriptor_;
}
bool TaskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Task::kIdFieldNumber;
const int Task::kStatusFieldNumber;
const int Task::kCurrentFieldNumber;
const int Task::kTotalFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  current_ = 0u;
  total_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    status_ = 0;
    current_ = 0u;
    total_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .HelloKittyMsgData.TaskStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::TaskStatus_IsValid(value)) {
            set_status(static_cast< ::HelloKittyMsgData::TaskStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current;
        break;
      }

      // required uint32 current = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }

      // required uint32 total = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required .HelloKittyMsgData.TaskStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required uint32 current = 3;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current(), output);
  }

  // required uint32 total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required .HelloKittyMsgData.TaskStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required uint32 current = 3;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current(), target);
  }

  // required uint32 total = 4;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required .HelloKittyMsgData.TaskStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 current = 3;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current());
    }

    // required uint32 total = 4;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(current_, other->current_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAllTask::kTasktypeFieldNumber;
#endif  // !_MSC_VER

ReqAllTask::ReqAllTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAllTask::InitAsDefaultInstance() {
}

ReqAllTask::ReqAllTask(const ReqAllTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAllTask::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAllTask::~ReqAllTask() {
  SharedDtor();
}

void ReqAllTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAllTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAllTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAllTask_descriptor_;
}

const ReqAllTask& ReqAllTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ReqAllTask* ReqAllTask::default_instance_ = NULL;

ReqAllTask* ReqAllTask::New() const {
  return new ReqAllTask;
}

void ReqAllTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tasktype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAllTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::TaskType_IsValid(value)) {
            set_tasktype(static_cast< ::HelloKittyMsgData::TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAllTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tasktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAllTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tasktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAllTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tasktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAllTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAllTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAllTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAllTask::MergeFrom(const ReqAllTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAllTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAllTask::CopyFrom(const ReqAllTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAllTask::IsInitialized() const {

  return true;
}

void ReqAllTask::Swap(ReqAllTask* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAllTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAllTask_descriptor_;
  metadata.reflection = ReqAllTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckAllTask::kTasktypeFieldNumber;
const int AckAllTask::kTaskFieldNumber;
#endif  // !_MSC_VER

AckAllTask::AckAllTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckAllTask::InitAsDefaultInstance() {
}

AckAllTask::AckAllTask(const AckAllTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckAllTask::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckAllTask::~AckAllTask() {
  SharedDtor();
}

void AckAllTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckAllTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckAllTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckAllTask_descriptor_;
}

const AckAllTask& AckAllTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

AckAllTask* AckAllTask::default_instance_ = NULL;

AckAllTask* AckAllTask::New() const {
  return new AckAllTask;
}

void AckAllTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tasktype_ = 0;
  }
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckAllTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::TaskType_IsValid(value)) {
            set_tasktype(static_cast< ::HelloKittyMsgData::TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        break;
      }

      // repeated .HelloKittyMsgData.Task task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckAllTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tasktype(), output);
  }

  // repeated .HelloKittyMsgData.Task task = 2;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckAllTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tasktype(), target);
  }

  // repeated .HelloKittyMsgData.Task task = 2;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckAllTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tasktype());
    }

  }
  // repeated .HelloKittyMsgData.Task task = 2;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckAllTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckAllTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckAllTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckAllTask::MergeFrom(const AckAllTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckAllTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAllTask::CopyFrom(const AckAllTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAllTask::IsInitialized() const {

  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  return true;
}

void AckAllTask::Swap(AckAllTask* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckAllTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckAllTask_descriptor_;
  metadata.reflection = AckAllTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSubmitTask::kIdFieldNumber;
#endif  // !_MSC_VER

ReqSubmitTask::ReqSubmitTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSubmitTask::InitAsDefaultInstance() {
}

ReqSubmitTask::ReqSubmitTask(const ReqSubmitTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSubmitTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSubmitTask::~ReqSubmitTask() {
  SharedDtor();
}

void ReqSubmitTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSubmitTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSubmitTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSubmitTask_descriptor_;
}

const ReqSubmitTask& ReqSubmitTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ReqSubmitTask* ReqSubmitTask::default_instance_ = NULL;

ReqSubmitTask* ReqSubmitTask::New() const {
  return new ReqSubmitTask;
}

void ReqSubmitTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSubmitTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSubmitTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSubmitTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSubmitTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSubmitTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSubmitTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSubmitTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSubmitTask::MergeFrom(const ReqSubmitTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSubmitTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubmitTask::CopyFrom(const ReqSubmitTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubmitTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqSubmitTask::Swap(ReqSubmitTask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSubmitTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSubmitTask_descriptor_;
  metadata.reflection = ReqSubmitTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateTask::kTaskFieldNumber;
#endif  // !_MSC_VER

AckUpdateTask::AckUpdateTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateTask::InitAsDefaultInstance() {
  task_ = const_cast< ::HelloKittyMsgData::Task*>(&::HelloKittyMsgData::Task::default_instance());
}

AckUpdateTask::AckUpdateTask(const AckUpdateTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateTask::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateTask::~AckUpdateTask() {
  SharedDtor();
}

void AckUpdateTask::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void AckUpdateTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateTask_descriptor_;
}

const AckUpdateTask& AckUpdateTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

AckUpdateTask* AckUpdateTask::default_instance_ = NULL;

AckUpdateTask* AckUpdateTask::New() const {
  return new AckUpdateTask;
}

void AckUpdateTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::HelloKittyMsgData::Task::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.Task task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.Task task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.Task task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.Task task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateTask::MergeFrom(const AckUpdateTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::HelloKittyMsgData::Task::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateTask::CopyFrom(const AckUpdateTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void AckUpdateTask::Swap(AckUpdateTask* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateTask_descriptor_;
  metadata.reflection = AckUpdateTask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
