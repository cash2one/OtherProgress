// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialize.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serialize.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* HappyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HappyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharBin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharBin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Serialize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Serialize_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_serialize_2eproto() {
  protobuf_AddDesc_serialize_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serialize.proto");
  GOOGLE_CHECK(file != NULL);
  HappyData_descriptor_ = file->message_type(0);
  static const int HappyData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HappyData, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HappyData, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HappyData, time_),
  };
  HappyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HappyData_descriptor_,
      HappyData::default_instance_,
      HappyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HappyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HappyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HappyData));
  DailyData_descriptor_ = file->message_type(1);
  static const int DailyData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, dailydatatime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, addgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, addgem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, addexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, addhappy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, addfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, vistorother_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, addatlas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, finishburstevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, buildorlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, randtoy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, divine_),
  };
  DailyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyData_descriptor_,
      DailyData::default_instance_,
      DailyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyData));
  CharBin_descriptor_ = file->message_type(2);
  static const int CharBin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBin, happy_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBin, happy_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBin, happy_hight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBin, dailydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBin, dress_),
  };
  CharBin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharBin_descriptor_,
      CharBin::default_instance_,
      CharBin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharBin));
  Serialize_descriptor_ = file->message_type(3);
  static const int Serialize_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, charbin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, store_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, salebooth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, sellpaper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, kittygarden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, buildbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, buildproduce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, functioncell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, usecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, warebuild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, worker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, atlas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, dress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, paper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, burstevent_),
  };
  Serialize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Serialize_descriptor_,
      Serialize::default_instance_,
      Serialize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serialize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Serialize));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serialize_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HappyData_descriptor_, &HappyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyData_descriptor_, &DailyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharBin_descriptor_, &CharBin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Serialize_descriptor_, &Serialize::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serialize_2eproto() {
  delete HappyData::default_instance_;
  delete HappyData_reflection_;
  delete DailyData::default_instance_;
  delete DailyData_reflection_;
  delete CharBin::default_instance_;
  delete CharBin_reflection_;
  delete Serialize::default_instance_;
  delete Serialize_reflection_;
}

void protobuf_AddDesc_serialize_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_item_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_trade_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_build_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_kittygarden_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_task_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_achievement_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_event_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_email_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_produceitem_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_usecardbuild_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_dress_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_divine_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_paper_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_burstevent_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017serialize.proto\022\021HelloKittyMsgData\032\nit"
    "em.proto\032\013trade.proto\032\013build.proto\032\021kitt"
    "ygarden.proto\032\ntask.proto\032\021achievement.p"
    "roto\032\013event.proto\032\013email.proto\032\021producei"
    "tem.proto\032\022usecardbuild.proto\032\013dress.pro"
    "to\032\014divine.proto\032\013paper.proto\032\020bursteven"
    "t.proto\"D\n\tHappyData\022\020\n\005grade\030\001 \002(\r:\0010\022\024"
    "\n\tfrequency\030\002 \002(\r:\0010\022\017\n\004time\030\003 \002(\r:\0010\"\217\002"
    "\n\tDailyData\022\025\n\rdailydatatime\030\001 \002(\r\022\017\n\007ad"
    "dgold\030\002 \002(\r\022\016\n\006addgem\030\003 \002(\r\022\016\n\006addexp\030\004 "
    "\002(\r\022\020\n\010addhappy\030\005 \002(\r\022\021\n\taddfriend\030\006 \002(\r"
    "\022\023\n\013vistorother\030\007 \002(\r\022\020\n\010addatlas\030\010 \002(\r\022"
    "\030\n\020finishburstevent\030\t \002(\r\022\024\n\014buildorleve"
    "l\030\n \002(\r\022\017\n\007randtoy\030\013 \002(\r\022-\n\006divine\030\014 \002(\013"
    "2\035.HelloKittyMsgData.DivineData\"\374\001\n\007Char"
    "Bin\022/\n\thappy_low\030\001 \002(\0132\034.HelloKittyMsgDa"
    "ta.HappyData\022/\n\thappy_mid\030\002 \002(\0132\034.HelloK"
    "ittyMsgData.HappyData\0221\n\013happy_hight\030\003 \002"
    "(\0132\034.HelloKittyMsgData.HappyData\022/\n\tdail"
    "ydata\030\004 \002(\0132\034.HelloKittyMsgData.DailyDat"
    "a\022+\n\005dress\030\005 \002(\0132\034.HelloKittyMsgData.Dre"
    "ssData\"\225\007\n\tSerialize\022+\n\007charbin\030\001 \002(\0132\032."
    "HelloKittyMsgData.CharBin\0223\n\013store_items"
    "\030\002 \003(\0132\036.HelloKittyMsgData.PbStoreItem\0221"
    "\n\tsaleBooth\030\003 \002(\0132\036.HelloKittyMsgData.Pb"
    "SaleBooth\022/\n\tsellpaper\030\004 \003(\0132\034.HelloKitt"
    "yMsgData.SellPaper\0223\n\013kittygarden\030\005 \002(\0132"
    "\036.HelloKittyMsgData.KittyGarden\022/\n\tbuild"
    "base\030\006 \003(\0132\034.HelloKittyMsgData.BuildBase"
    "\0225\n\014buildproduce\030\007 \003(\0132\037.HelloKittyMsgDa"
    "ta.BuildProduce\022:\n\014functioncell\030\010 \003(\0132$."
    "HelloKittyMsgData.StoreFunctionCell\022/\n\007u"
    "secard\030\t \003(\0132\036.HelloKittyMsgData.UseCard"
    "Info\0228\n\twarebuild\030\n \003(\0132%.HelloKittyMsgD"
    "ata.WareHouseBuildBase\022)\n\006worker\030\013 \003(\0132\031"
    ".HelloKittyMsgData.Worker\022%\n\004task\030\014 \003(\0132"
    "\027.HelloKittyMsgData.Task\022\r\n\005atlas\030\r \003(\r\022"
    "3\n\013achievement\030\016 \003(\0132\036.HelloKittyMsgData"
    ".AchieveMent\022.\n\005event\030\017 \003(\0132\037.HelloKitty"
    "MsgData.SaveForEvent\022+\n\005email\030\020 \003(\0132\034.He"
    "lloKittyMsgData.EmailInfo\022+\n\005dress\030\021 \003(\013"
    "2\034.HelloKittyMsgData.DressData\022+\n\005paper\030"
    "\022 \003(\0132\034.HelloKittyMsgData.PaperData\0221\n\nb"
    "urstevent\030\023 \003(\0132\035.HelloKittyMsgData.Burs"
    "tEvent", 1766);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serialize.proto", &protobuf_RegisterTypes);
  HappyData::default_instance_ = new HappyData();
  DailyData::default_instance_ = new DailyData();
  CharBin::default_instance_ = new CharBin();
  Serialize::default_instance_ = new Serialize();
  HappyData::default_instance_->InitAsDefaultInstance();
  DailyData::default_instance_->InitAsDefaultInstance();
  CharBin::default_instance_->InitAsDefaultInstance();
  Serialize::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serialize_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serialize_2eproto {
  StaticDescriptorInitializer_serialize_2eproto() {
    protobuf_AddDesc_serialize_2eproto();
  }
} static_descriptor_initializer_serialize_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HappyData::kGradeFieldNumber;
const int HappyData::kFrequencyFieldNumber;
const int HappyData::kTimeFieldNumber;
#endif  // !_MSC_VER

HappyData::HappyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HappyData::InitAsDefaultInstance() {
}

HappyData::HappyData(const HappyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HappyData::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0u;
  frequency_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HappyData::~HappyData() {
  SharedDtor();
}

void HappyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HappyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HappyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HappyData_descriptor_;
}

const HappyData& HappyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

HappyData* HappyData::default_instance_ = NULL;

HappyData* HappyData::New() const {
  return new HappyData;
}

void HappyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0u;
    frequency_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HappyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grade = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frequency;
        break;
      }

      // required uint32 frequency = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HappyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grade = 1 [default = 0];
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grade(), output);
  }

  // required uint32 frequency = 2 [default = 0];
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frequency(), output);
  }

  // required uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HappyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grade = 1 [default = 0];
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grade(), target);
  }

  // required uint32 frequency = 2 [default = 0];
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frequency(), target);
  }

  // required uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HappyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grade = 1 [default = 0];
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // required uint32 frequency = 2 [default = 0];
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency());
    }

    // required uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HappyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HappyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HappyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HappyData::MergeFrom(const HappyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HappyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HappyData::CopyFrom(const HappyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HappyData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HappyData::Swap(HappyData* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(frequency_, other->frequency_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HappyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HappyData_descriptor_;
  metadata.reflection = HappyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyData::kDailydatatimeFieldNumber;
const int DailyData::kAddgoldFieldNumber;
const int DailyData::kAddgemFieldNumber;
const int DailyData::kAddexpFieldNumber;
const int DailyData::kAddhappyFieldNumber;
const int DailyData::kAddfriendFieldNumber;
const int DailyData::kVistorotherFieldNumber;
const int DailyData::kAddatlasFieldNumber;
const int DailyData::kFinishbursteventFieldNumber;
const int DailyData::kBuildorlevelFieldNumber;
const int DailyData::kRandtoyFieldNumber;
const int DailyData::kDivineFieldNumber;
#endif  // !_MSC_VER

DailyData::DailyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyData::InitAsDefaultInstance() {
  divine_ = const_cast< ::HelloKittyMsgData::DivineData*>(&::HelloKittyMsgData::DivineData::default_instance());
}

DailyData::DailyData(const DailyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyData::SharedCtor() {
  _cached_size_ = 0;
  dailydatatime_ = 0u;
  addgold_ = 0u;
  addgem_ = 0u;
  addexp_ = 0u;
  addhappy_ = 0u;
  addfriend_ = 0u;
  vistorother_ = 0u;
  addatlas_ = 0u;
  finishburstevent_ = 0u;
  buildorlevel_ = 0u;
  randtoy_ = 0u;
  divine_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyData::~DailyData() {
  SharedDtor();
}

void DailyData::SharedDtor() {
  if (this != default_instance_) {
    delete divine_;
  }
}

void DailyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyData_descriptor_;
}

const DailyData& DailyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

DailyData* DailyData::default_instance_ = NULL;

DailyData* DailyData::New() const {
  return new DailyData;
}

void DailyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dailydatatime_ = 0u;
    addgold_ = 0u;
    addgem_ = 0u;
    addexp_ = 0u;
    addhappy_ = 0u;
    addfriend_ = 0u;
    vistorother_ = 0u;
    addatlas_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    finishburstevent_ = 0u;
    buildorlevel_ = 0u;
    randtoy_ = 0u;
    if (has_divine()) {
      if (divine_ != NULL) divine_->::HelloKittyMsgData::DivineData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dailydatatime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailydatatime_)));
          set_has_dailydatatime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addgold;
        break;
      }

      // required uint32 addgold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addgold_)));
          set_has_addgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addgem;
        break;
      }

      // required uint32 addgem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addgem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addgem_)));
          set_has_addgem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addexp;
        break;
      }

      // required uint32 addexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_addhappy;
        break;
      }

      // required uint32 addhappy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addhappy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addhappy_)));
          set_has_addhappy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_addfriend;
        break;
      }

      // required uint32 addfriend = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addfriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addfriend_)));
          set_has_addfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vistorother;
        break;
      }

      // required uint32 vistorother = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vistorother:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vistorother_)));
          set_has_vistorother();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_addatlas;
        break;
      }

      // required uint32 addatlas = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addatlas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addatlas_)));
          set_has_addatlas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_finishburstevent;
        break;
      }

      // required uint32 finishburstevent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishburstevent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishburstevent_)));
          set_has_finishburstevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buildorlevel;
        break;
      }

      // required uint32 buildorlevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildorlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildorlevel_)));
          set_has_buildorlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_randtoy;
        break;
      }

      // required uint32 randtoy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randtoy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randtoy_)));
          set_has_randtoy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_divine;
        break;
      }

      // required .HelloKittyMsgData.DivineData divine = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_divine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_divine()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dailydatatime = 1;
  if (has_dailydatatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dailydatatime(), output);
  }

  // required uint32 addgold = 2;
  if (has_addgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addgold(), output);
  }

  // required uint32 addgem = 3;
  if (has_addgem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addgem(), output);
  }

  // required uint32 addexp = 4;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->addexp(), output);
  }

  // required uint32 addhappy = 5;
  if (has_addhappy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addhappy(), output);
  }

  // required uint32 addfriend = 6;
  if (has_addfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->addfriend(), output);
  }

  // required uint32 vistorother = 7;
  if (has_vistorother()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->vistorother(), output);
  }

  // required uint32 addatlas = 8;
  if (has_addatlas()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->addatlas(), output);
  }

  // required uint32 finishburstevent = 9;
  if (has_finishburstevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->finishburstevent(), output);
  }

  // required uint32 buildorlevel = 10;
  if (has_buildorlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->buildorlevel(), output);
  }

  // required uint32 randtoy = 11;
  if (has_randtoy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->randtoy(), output);
  }

  // required .HelloKittyMsgData.DivineData divine = 12;
  if (has_divine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->divine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dailydatatime = 1;
  if (has_dailydatatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dailydatatime(), target);
  }

  // required uint32 addgold = 2;
  if (has_addgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addgold(), target);
  }

  // required uint32 addgem = 3;
  if (has_addgem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addgem(), target);
  }

  // required uint32 addexp = 4;
  if (has_addexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->addexp(), target);
  }

  // required uint32 addhappy = 5;
  if (has_addhappy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addhappy(), target);
  }

  // required uint32 addfriend = 6;
  if (has_addfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->addfriend(), target);
  }

  // required uint32 vistorother = 7;
  if (has_vistorother()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->vistorother(), target);
  }

  // required uint32 addatlas = 8;
  if (has_addatlas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->addatlas(), target);
  }

  // required uint32 finishburstevent = 9;
  if (has_finishburstevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->finishburstevent(), target);
  }

  // required uint32 buildorlevel = 10;
  if (has_buildorlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->buildorlevel(), target);
  }

  // required uint32 randtoy = 11;
  if (has_randtoy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->randtoy(), target);
  }

  // required .HelloKittyMsgData.DivineData divine = 12;
  if (has_divine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->divine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dailydatatime = 1;
    if (has_dailydatatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailydatatime());
    }

    // required uint32 addgold = 2;
    if (has_addgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addgold());
    }

    // required uint32 addgem = 3;
    if (has_addgem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addgem());
    }

    // required uint32 addexp = 4;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addexp());
    }

    // required uint32 addhappy = 5;
    if (has_addhappy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addhappy());
    }

    // required uint32 addfriend = 6;
    if (has_addfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addfriend());
    }

    // required uint32 vistorother = 7;
    if (has_vistorother()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vistorother());
    }

    // required uint32 addatlas = 8;
    if (has_addatlas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addatlas());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 finishburstevent = 9;
    if (has_finishburstevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishburstevent());
    }

    // required uint32 buildorlevel = 10;
    if (has_buildorlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildorlevel());
    }

    // required uint32 randtoy = 11;
    if (has_randtoy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randtoy());
    }

    // required .HelloKittyMsgData.DivineData divine = 12;
    if (has_divine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->divine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyData::MergeFrom(const DailyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dailydatatime()) {
      set_dailydatatime(from.dailydatatime());
    }
    if (from.has_addgold()) {
      set_addgold(from.addgold());
    }
    if (from.has_addgem()) {
      set_addgem(from.addgem());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
    if (from.has_addhappy()) {
      set_addhappy(from.addhappy());
    }
    if (from.has_addfriend()) {
      set_addfriend(from.addfriend());
    }
    if (from.has_vistorother()) {
      set_vistorother(from.vistorother());
    }
    if (from.has_addatlas()) {
      set_addatlas(from.addatlas());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_finishburstevent()) {
      set_finishburstevent(from.finishburstevent());
    }
    if (from.has_buildorlevel()) {
      set_buildorlevel(from.buildorlevel());
    }
    if (from.has_randtoy()) {
      set_randtoy(from.randtoy());
    }
    if (from.has_divine()) {
      mutable_divine()->::HelloKittyMsgData::DivineData::MergeFrom(from.divine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyData::CopyFrom(const DailyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  if (has_divine()) {
    if (!this->divine().IsInitialized()) return false;
  }
  return true;
}

void DailyData::Swap(DailyData* other) {
  if (other != this) {
    std::swap(dailydatatime_, other->dailydatatime_);
    std::swap(addgold_, other->addgold_);
    std::swap(addgem_, other->addgem_);
    std::swap(addexp_, other->addexp_);
    std::swap(addhappy_, other->addhappy_);
    std::swap(addfriend_, other->addfriend_);
    std::swap(vistorother_, other->vistorother_);
    std::swap(addatlas_, other->addatlas_);
    std::swap(finishburstevent_, other->finishburstevent_);
    std::swap(buildorlevel_, other->buildorlevel_);
    std::swap(randtoy_, other->randtoy_);
    std::swap(divine_, other->divine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyData_descriptor_;
  metadata.reflection = DailyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharBin::kHappyLowFieldNumber;
const int CharBin::kHappyMidFieldNumber;
const int CharBin::kHappyHightFieldNumber;
const int CharBin::kDailydataFieldNumber;
const int CharBin::kDressFieldNumber;
#endif  // !_MSC_VER

CharBin::CharBin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharBin::InitAsDefaultInstance() {
  happy_low_ = const_cast< ::HelloKittyMsgData::HappyData*>(&::HelloKittyMsgData::HappyData::default_instance());
  happy_mid_ = const_cast< ::HelloKittyMsgData::HappyData*>(&::HelloKittyMsgData::HappyData::default_instance());
  happy_hight_ = const_cast< ::HelloKittyMsgData::HappyData*>(&::HelloKittyMsgData::HappyData::default_instance());
  dailydata_ = const_cast< ::HelloKittyMsgData::DailyData*>(&::HelloKittyMsgData::DailyData::default_instance());
  dress_ = const_cast< ::HelloKittyMsgData::DressData*>(&::HelloKittyMsgData::DressData::default_instance());
}

CharBin::CharBin(const CharBin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharBin::SharedCtor() {
  _cached_size_ = 0;
  happy_low_ = NULL;
  happy_mid_ = NULL;
  happy_hight_ = NULL;
  dailydata_ = NULL;
  dress_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharBin::~CharBin() {
  SharedDtor();
}

void CharBin::SharedDtor() {
  if (this != default_instance_) {
    delete happy_low_;
    delete happy_mid_;
    delete happy_hight_;
    delete dailydata_;
    delete dress_;
  }
}

void CharBin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharBin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharBin_descriptor_;
}

const CharBin& CharBin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

CharBin* CharBin::default_instance_ = NULL;

CharBin* CharBin::New() const {
  return new CharBin;
}

void CharBin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_happy_low()) {
      if (happy_low_ != NULL) happy_low_->::HelloKittyMsgData::HappyData::Clear();
    }
    if (has_happy_mid()) {
      if (happy_mid_ != NULL) happy_mid_->::HelloKittyMsgData::HappyData::Clear();
    }
    if (has_happy_hight()) {
      if (happy_hight_ != NULL) happy_hight_->::HelloKittyMsgData::HappyData::Clear();
    }
    if (has_dailydata()) {
      if (dailydata_ != NULL) dailydata_->::HelloKittyMsgData::DailyData::Clear();
    }
    if (has_dress()) {
      if (dress_ != NULL) dress_->::HelloKittyMsgData::DressData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharBin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.HappyData happy_low = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_happy_low()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_happy_mid;
        break;
      }

      // required .HelloKittyMsgData.HappyData happy_mid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_happy_mid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_happy_mid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_happy_hight;
        break;
      }

      // required .HelloKittyMsgData.HappyData happy_hight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_happy_hight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_happy_hight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dailydata;
        break;
      }

      // required .HelloKittyMsgData.DailyData dailydata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailydata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dress;
        break;
      }

      // required .HelloKittyMsgData.DressData dress = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharBin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.HappyData happy_low = 1;
  if (has_happy_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->happy_low(), output);
  }

  // required .HelloKittyMsgData.HappyData happy_mid = 2;
  if (has_happy_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->happy_mid(), output);
  }

  // required .HelloKittyMsgData.HappyData happy_hight = 3;
  if (has_happy_hight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->happy_hight(), output);
  }

  // required .HelloKittyMsgData.DailyData dailydata = 4;
  if (has_dailydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dailydata(), output);
  }

  // required .HelloKittyMsgData.DressData dress = 5;
  if (has_dress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharBin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.HappyData happy_low = 1;
  if (has_happy_low()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->happy_low(), target);
  }

  // required .HelloKittyMsgData.HappyData happy_mid = 2;
  if (has_happy_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->happy_mid(), target);
  }

  // required .HelloKittyMsgData.HappyData happy_hight = 3;
  if (has_happy_hight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->happy_hight(), target);
  }

  // required .HelloKittyMsgData.DailyData dailydata = 4;
  if (has_dailydata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dailydata(), target);
  }

  // required .HelloKittyMsgData.DressData dress = 5;
  if (has_dress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharBin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.HappyData happy_low = 1;
    if (has_happy_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->happy_low());
    }

    // required .HelloKittyMsgData.HappyData happy_mid = 2;
    if (has_happy_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->happy_mid());
    }

    // required .HelloKittyMsgData.HappyData happy_hight = 3;
    if (has_happy_hight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->happy_hight());
    }

    // required .HelloKittyMsgData.DailyData dailydata = 4;
    if (has_dailydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailydata());
    }

    // required .HelloKittyMsgData.DressData dress = 5;
    if (has_dress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharBin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharBin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharBin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharBin::MergeFrom(const CharBin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_happy_low()) {
      mutable_happy_low()->::HelloKittyMsgData::HappyData::MergeFrom(from.happy_low());
    }
    if (from.has_happy_mid()) {
      mutable_happy_mid()->::HelloKittyMsgData::HappyData::MergeFrom(from.happy_mid());
    }
    if (from.has_happy_hight()) {
      mutable_happy_hight()->::HelloKittyMsgData::HappyData::MergeFrom(from.happy_hight());
    }
    if (from.has_dailydata()) {
      mutable_dailydata()->::HelloKittyMsgData::DailyData::MergeFrom(from.dailydata());
    }
    if (from.has_dress()) {
      mutable_dress()->::HelloKittyMsgData::DressData::MergeFrom(from.dress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharBin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharBin::CopyFrom(const CharBin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharBin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_happy_low()) {
    if (!this->happy_low().IsInitialized()) return false;
  }
  if (has_happy_mid()) {
    if (!this->happy_mid().IsInitialized()) return false;
  }
  if (has_happy_hight()) {
    if (!this->happy_hight().IsInitialized()) return false;
  }
  if (has_dailydata()) {
    if (!this->dailydata().IsInitialized()) return false;
  }
  if (has_dress()) {
    if (!this->dress().IsInitialized()) return false;
  }
  return true;
}

void CharBin::Swap(CharBin* other) {
  if (other != this) {
    std::swap(happy_low_, other->happy_low_);
    std::swap(happy_mid_, other->happy_mid_);
    std::swap(happy_hight_, other->happy_hight_);
    std::swap(dailydata_, other->dailydata_);
    std::swap(dress_, other->dress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharBin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharBin_descriptor_;
  metadata.reflection = CharBin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Serialize::kCharbinFieldNumber;
const int Serialize::kStoreItemsFieldNumber;
const int Serialize::kSaleBoothFieldNumber;
const int Serialize::kSellpaperFieldNumber;
const int Serialize::kKittygardenFieldNumber;
const int Serialize::kBuildbaseFieldNumber;
const int Serialize::kBuildproduceFieldNumber;
const int Serialize::kFunctioncellFieldNumber;
const int Serialize::kUsecardFieldNumber;
const int Serialize::kWarebuildFieldNumber;
const int Serialize::kWorkerFieldNumber;
const int Serialize::kTaskFieldNumber;
const int Serialize::kAtlasFieldNumber;
const int Serialize::kAchievementFieldNumber;
const int Serialize::kEventFieldNumber;
const int Serialize::kEmailFieldNumber;
const int Serialize::kDressFieldNumber;
const int Serialize::kPaperFieldNumber;
const int Serialize::kBursteventFieldNumber;
#endif  // !_MSC_VER

Serialize::Serialize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Serialize::InitAsDefaultInstance() {
  charbin_ = const_cast< ::HelloKittyMsgData::CharBin*>(&::HelloKittyMsgData::CharBin::default_instance());
  salebooth_ = const_cast< ::HelloKittyMsgData::PbSaleBooth*>(&::HelloKittyMsgData::PbSaleBooth::default_instance());
  kittygarden_ = const_cast< ::HelloKittyMsgData::KittyGarden*>(&::HelloKittyMsgData::KittyGarden::default_instance());
}

Serialize::Serialize(const Serialize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Serialize::SharedCtor() {
  _cached_size_ = 0;
  charbin_ = NULL;
  salebooth_ = NULL;
  kittygarden_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Serialize::~Serialize() {
  SharedDtor();
}

void Serialize::SharedDtor() {
  if (this != default_instance_) {
    delete charbin_;
    delete salebooth_;
    delete kittygarden_;
  }
}

void Serialize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Serialize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Serialize_descriptor_;
}

const Serialize& Serialize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

Serialize* Serialize::default_instance_ = NULL;

Serialize* Serialize::New() const {
  return new Serialize;
}

void Serialize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charbin()) {
      if (charbin_ != NULL) charbin_->::HelloKittyMsgData::CharBin::Clear();
    }
    if (has_salebooth()) {
      if (salebooth_ != NULL) salebooth_->::HelloKittyMsgData::PbSaleBooth::Clear();
    }
    if (has_kittygarden()) {
      if (kittygarden_ != NULL) kittygarden_->::HelloKittyMsgData::KittyGarden::Clear();
    }
  }
  store_items_.Clear();
  sellpaper_.Clear();
  buildbase_.Clear();
  buildproduce_.Clear();
  functioncell_.Clear();
  usecard_.Clear();
  warebuild_.Clear();
  worker_.Clear();
  task_.Clear();
  atlas_.Clear();
  achievement_.Clear();
  event_.Clear();
  email_.Clear();
  dress_.Clear();
  paper_.Clear();
  burstevent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Serialize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.CharBin charbin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charbin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_items;
        break;
      }

      // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_items;
        if (input->ExpectTag(26)) goto parse_saleBooth;
        break;
      }

      // required .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saleBooth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salebooth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sellpaper;
        break;
      }

      // repeated .HelloKittyMsgData.SellPaper sellpaper = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sellpaper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sellpaper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sellpaper;
        if (input->ExpectTag(42)) goto parse_kittygarden;
        break;
      }

      // required .HelloKittyMsgData.KittyGarden kittygarden = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kittygarden:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kittygarden()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_buildbase;
        break;
      }

      // repeated .HelloKittyMsgData.BuildBase buildbase = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildbase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_buildbase;
        if (input->ExpectTag(58)) goto parse_buildproduce;
        break;
      }

      // repeated .HelloKittyMsgData.BuildProduce buildproduce = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildproduce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildproduce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_buildproduce;
        if (input->ExpectTag(66)) goto parse_functioncell;
        break;
      }

      // repeated .HelloKittyMsgData.StoreFunctionCell functioncell = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functioncell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functioncell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_functioncell;
        if (input->ExpectTag(74)) goto parse_usecard;
        break;
      }

      // repeated .HelloKittyMsgData.UseCardInfo usecard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usecard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_usecard;
        if (input->ExpectTag(82)) goto parse_warebuild;
        break;
      }

      // repeated .HelloKittyMsgData.WareHouseBuildBase warebuild = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warebuild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warebuild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_warebuild;
        if (input->ExpectTag(90)) goto parse_worker;
        break;
      }

      // repeated .HelloKittyMsgData.Worker worker = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_worker;
        if (input->ExpectTag(98)) goto parse_task;
        break;
      }

      // repeated .HelloKittyMsgData.Task task = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_task;
        if (input->ExpectTag(104)) goto parse_atlas;
        break;
      }

      // repeated uint32 atlas = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atlas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_atlas())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_atlas())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_atlas;
        if (input->ExpectTag(114)) goto parse_achievement;
        break;
      }

      // repeated .HelloKittyMsgData.AchieveMent achievement = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_achievement;
        if (input->ExpectTag(122)) goto parse_event;
        break;
      }

      // repeated .HelloKittyMsgData.SaveForEvent event = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_event;
        if (input->ExpectTag(130)) goto parse_email;
        break;
      }

      // repeated .HelloKittyMsgData.EmailInfo email = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_email;
        if (input->ExpectTag(138)) goto parse_dress;
        break;
      }

      // repeated .HelloKittyMsgData.DressData dress = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_dress;
        if (input->ExpectTag(146)) goto parse_paper;
        break;
      }

      // repeated .HelloKittyMsgData.PaperData paper = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_paper;
        if (input->ExpectTag(154)) goto parse_burstevent;
        break;
      }

      // repeated .HelloKittyMsgData.BurstEvent burstevent = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_burstevent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_burstevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_burstevent;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Serialize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.CharBin charbin = 1;
  if (has_charbin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charbin(), output);
  }

  // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
  for (int i = 0; i < this->store_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->store_items(i), output);
  }

  // required .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
  if (has_salebooth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->salebooth(), output);
  }

  // repeated .HelloKittyMsgData.SellPaper sellpaper = 4;
  for (int i = 0; i < this->sellpaper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sellpaper(i), output);
  }

  // required .HelloKittyMsgData.KittyGarden kittygarden = 5;
  if (has_kittygarden()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kittygarden(), output);
  }

  // repeated .HelloKittyMsgData.BuildBase buildbase = 6;
  for (int i = 0; i < this->buildbase_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->buildbase(i), output);
  }

  // repeated .HelloKittyMsgData.BuildProduce buildproduce = 7;
  for (int i = 0; i < this->buildproduce_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->buildproduce(i), output);
  }

  // repeated .HelloKittyMsgData.StoreFunctionCell functioncell = 8;
  for (int i = 0; i < this->functioncell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->functioncell(i), output);
  }

  // repeated .HelloKittyMsgData.UseCardInfo usecard = 9;
  for (int i = 0; i < this->usecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->usecard(i), output);
  }

  // repeated .HelloKittyMsgData.WareHouseBuildBase warebuild = 10;
  for (int i = 0; i < this->warebuild_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->warebuild(i), output);
  }

  // repeated .HelloKittyMsgData.Worker worker = 11;
  for (int i = 0; i < this->worker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->worker(i), output);
  }

  // repeated .HelloKittyMsgData.Task task = 12;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->task(i), output);
  }

  // repeated uint32 atlas = 13;
  for (int i = 0; i < this->atlas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->atlas(i), output);
  }

  // repeated .HelloKittyMsgData.AchieveMent achievement = 14;
  for (int i = 0; i < this->achievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->achievement(i), output);
  }

  // repeated .HelloKittyMsgData.SaveForEvent event = 15;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->event(i), output);
  }

  // repeated .HelloKittyMsgData.EmailInfo email = 16;
  for (int i = 0; i < this->email_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->email(i), output);
  }

  // repeated .HelloKittyMsgData.DressData dress = 17;
  for (int i = 0; i < this->dress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->dress(i), output);
  }

  // repeated .HelloKittyMsgData.PaperData paper = 18;
  for (int i = 0; i < this->paper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->paper(i), output);
  }

  // repeated .HelloKittyMsgData.BurstEvent burstevent = 19;
  for (int i = 0; i < this->burstevent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->burstevent(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Serialize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.CharBin charbin = 1;
  if (has_charbin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charbin(), target);
  }

  // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
  for (int i = 0; i < this->store_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->store_items(i), target);
  }

  // required .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
  if (has_salebooth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->salebooth(), target);
  }

  // repeated .HelloKittyMsgData.SellPaper sellpaper = 4;
  for (int i = 0; i < this->sellpaper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sellpaper(i), target);
  }

  // required .HelloKittyMsgData.KittyGarden kittygarden = 5;
  if (has_kittygarden()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->kittygarden(), target);
  }

  // repeated .HelloKittyMsgData.BuildBase buildbase = 6;
  for (int i = 0; i < this->buildbase_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->buildbase(i), target);
  }

  // repeated .HelloKittyMsgData.BuildProduce buildproduce = 7;
  for (int i = 0; i < this->buildproduce_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->buildproduce(i), target);
  }

  // repeated .HelloKittyMsgData.StoreFunctionCell functioncell = 8;
  for (int i = 0; i < this->functioncell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->functioncell(i), target);
  }

  // repeated .HelloKittyMsgData.UseCardInfo usecard = 9;
  for (int i = 0; i < this->usecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->usecard(i), target);
  }

  // repeated .HelloKittyMsgData.WareHouseBuildBase warebuild = 10;
  for (int i = 0; i < this->warebuild_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->warebuild(i), target);
  }

  // repeated .HelloKittyMsgData.Worker worker = 11;
  for (int i = 0; i < this->worker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->worker(i), target);
  }

  // repeated .HelloKittyMsgData.Task task = 12;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->task(i), target);
  }

  // repeated uint32 atlas = 13;
  for (int i = 0; i < this->atlas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->atlas(i), target);
  }

  // repeated .HelloKittyMsgData.AchieveMent achievement = 14;
  for (int i = 0; i < this->achievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->achievement(i), target);
  }

  // repeated .HelloKittyMsgData.SaveForEvent event = 15;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->event(i), target);
  }

  // repeated .HelloKittyMsgData.EmailInfo email = 16;
  for (int i = 0; i < this->email_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->email(i), target);
  }

  // repeated .HelloKittyMsgData.DressData dress = 17;
  for (int i = 0; i < this->dress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->dress(i), target);
  }

  // repeated .HelloKittyMsgData.PaperData paper = 18;
  for (int i = 0; i < this->paper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->paper(i), target);
  }

  // repeated .HelloKittyMsgData.BurstEvent burstevent = 19;
  for (int i = 0; i < this->burstevent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->burstevent(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Serialize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.CharBin charbin = 1;
    if (has_charbin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charbin());
    }

    // required .HelloKittyMsgData.PbSaleBooth saleBooth = 3;
    if (has_salebooth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salebooth());
    }

    // required .HelloKittyMsgData.KittyGarden kittygarden = 5;
    if (has_kittygarden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kittygarden());
    }

  }
  // repeated .HelloKittyMsgData.PbStoreItem store_items = 2;
  total_size += 1 * this->store_items_size();
  for (int i = 0; i < this->store_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store_items(i));
  }

  // repeated .HelloKittyMsgData.SellPaper sellpaper = 4;
  total_size += 1 * this->sellpaper_size();
  for (int i = 0; i < this->sellpaper_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sellpaper(i));
  }

  // repeated .HelloKittyMsgData.BuildBase buildbase = 6;
  total_size += 1 * this->buildbase_size();
  for (int i = 0; i < this->buildbase_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildbase(i));
  }

  // repeated .HelloKittyMsgData.BuildProduce buildproduce = 7;
  total_size += 1 * this->buildproduce_size();
  for (int i = 0; i < this->buildproduce_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildproduce(i));
  }

  // repeated .HelloKittyMsgData.StoreFunctionCell functioncell = 8;
  total_size += 1 * this->functioncell_size();
  for (int i = 0; i < this->functioncell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functioncell(i));
  }

  // repeated .HelloKittyMsgData.UseCardInfo usecard = 9;
  total_size += 1 * this->usecard_size();
  for (int i = 0; i < this->usecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usecard(i));
  }

  // repeated .HelloKittyMsgData.WareHouseBuildBase warebuild = 10;
  total_size += 1 * this->warebuild_size();
  for (int i = 0; i < this->warebuild_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warebuild(i));
  }

  // repeated .HelloKittyMsgData.Worker worker = 11;
  total_size += 1 * this->worker_size();
  for (int i = 0; i < this->worker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worker(i));
  }

  // repeated .HelloKittyMsgData.Task task = 12;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  // repeated uint32 atlas = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->atlas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->atlas(i));
    }
    total_size += 1 * this->atlas_size() + data_size;
  }

  // repeated .HelloKittyMsgData.AchieveMent achievement = 14;
  total_size += 1 * this->achievement_size();
  for (int i = 0; i < this->achievement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement(i));
  }

  // repeated .HelloKittyMsgData.SaveForEvent event = 15;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  // repeated .HelloKittyMsgData.EmailInfo email = 16;
  total_size += 2 * this->email_size();
  for (int i = 0; i < this->email_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->email(i));
  }

  // repeated .HelloKittyMsgData.DressData dress = 17;
  total_size += 2 * this->dress_size();
  for (int i = 0; i < this->dress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dress(i));
  }

  // repeated .HelloKittyMsgData.PaperData paper = 18;
  total_size += 2 * this->paper_size();
  for (int i = 0; i < this->paper_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paper(i));
  }

  // repeated .HelloKittyMsgData.BurstEvent burstevent = 19;
  total_size += 2 * this->burstevent_size();
  for (int i = 0; i < this->burstevent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->burstevent(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Serialize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Serialize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Serialize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Serialize::MergeFrom(const Serialize& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_items_.MergeFrom(from.store_items_);
  sellpaper_.MergeFrom(from.sellpaper_);
  buildbase_.MergeFrom(from.buildbase_);
  buildproduce_.MergeFrom(from.buildproduce_);
  functioncell_.MergeFrom(from.functioncell_);
  usecard_.MergeFrom(from.usecard_);
  warebuild_.MergeFrom(from.warebuild_);
  worker_.MergeFrom(from.worker_);
  task_.MergeFrom(from.task_);
  atlas_.MergeFrom(from.atlas_);
  achievement_.MergeFrom(from.achievement_);
  event_.MergeFrom(from.event_);
  email_.MergeFrom(from.email_);
  dress_.MergeFrom(from.dress_);
  paper_.MergeFrom(from.paper_);
  burstevent_.MergeFrom(from.burstevent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charbin()) {
      mutable_charbin()->::HelloKittyMsgData::CharBin::MergeFrom(from.charbin());
    }
    if (from.has_salebooth()) {
      mutable_salebooth()->::HelloKittyMsgData::PbSaleBooth::MergeFrom(from.salebooth());
    }
    if (from.has_kittygarden()) {
      mutable_kittygarden()->::HelloKittyMsgData::KittyGarden::MergeFrom(from.kittygarden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Serialize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Serialize::CopyFrom(const Serialize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Serialize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000015) != 0x00000015) return false;

  if (has_charbin()) {
    if (!this->charbin().IsInitialized()) return false;
  }
  for (int i = 0; i < store_items_size(); i++) {
    if (!this->store_items(i).IsInitialized()) return false;
  }
  if (has_salebooth()) {
    if (!this->salebooth().IsInitialized()) return false;
  }
  for (int i = 0; i < sellpaper_size(); i++) {
    if (!this->sellpaper(i).IsInitialized()) return false;
  }
  if (has_kittygarden()) {
    if (!this->kittygarden().IsInitialized()) return false;
  }
  for (int i = 0; i < buildbase_size(); i++) {
    if (!this->buildbase(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buildproduce_size(); i++) {
    if (!this->buildproduce(i).IsInitialized()) return false;
  }
  for (int i = 0; i < functioncell_size(); i++) {
    if (!this->functioncell(i).IsInitialized()) return false;
  }
  for (int i = 0; i < usecard_size(); i++) {
    if (!this->usecard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < warebuild_size(); i++) {
    if (!this->warebuild(i).IsInitialized()) return false;
  }
  for (int i = 0; i < worker_size(); i++) {
    if (!this->worker(i).IsInitialized()) return false;
  }
  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  for (int i = 0; i < achievement_size(); i++) {
    if (!this->achievement(i).IsInitialized()) return false;
  }
  for (int i = 0; i < event_size(); i++) {
    if (!this->event(i).IsInitialized()) return false;
  }
  for (int i = 0; i < email_size(); i++) {
    if (!this->email(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dress_size(); i++) {
    if (!this->dress(i).IsInitialized()) return false;
  }
  for (int i = 0; i < paper_size(); i++) {
    if (!this->paper(i).IsInitialized()) return false;
  }
  for (int i = 0; i < burstevent_size(); i++) {
    if (!this->burstevent(i).IsInitialized()) return false;
  }
  return true;
}

void Serialize::Swap(Serialize* other) {
  if (other != this) {
    std::swap(charbin_, other->charbin_);
    store_items_.Swap(&other->store_items_);
    std::swap(salebooth_, other->salebooth_);
    sellpaper_.Swap(&other->sellpaper_);
    std::swap(kittygarden_, other->kittygarden_);
    buildbase_.Swap(&other->buildbase_);
    buildproduce_.Swap(&other->buildproduce_);
    functioncell_.Swap(&other->functioncell_);
    usecard_.Swap(&other->usecard_);
    warebuild_.Swap(&other->warebuild_);
    worker_.Swap(&other->worker_);
    task_.Swap(&other->task_);
    atlas_.Swap(&other->atlas_);
    achievement_.Swap(&other->achievement_);
    event_.Swap(&other->event_);
    email_.Swap(&other->email_);
    dress_.Swap(&other->dress_);
    paper_.Swap(&other->paper_);
    burstevent_.Swap(&other->burstevent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Serialize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Serialize_descriptor_;
  metadata.reflection = Serialize_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
