// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: achievement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "achievement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* AchieveMent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveMent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAllAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAllAchieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckAllAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckAllAchieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSubmitAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSubmitAchieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateAchieve_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_achievement_2eproto() {
  protobuf_AddDesc_achievement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "achievement.proto");
  GOOGLE_CHECK(file != NULL);
  AchieveMent_descriptor_ = file->message_type(0);
  static const int AchieveMent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveMent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveMent, stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveMent, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveMent, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveMent, total_),
  };
  AchieveMent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveMent_descriptor_,
      AchieveMent::default_instance_,
      AchieveMent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveMent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveMent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveMent));
  ReqAllAchieve_descriptor_ = file->message_type(1);
  static const int ReqAllAchieve_offsets_[1] = {
  };
  ReqAllAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAllAchieve_descriptor_,
      ReqAllAchieve::default_instance_,
      ReqAllAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAllAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAllAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAllAchieve));
  AckAllAchieve_descriptor_ = file->message_type(2);
  static const int AckAllAchieve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllAchieve, achieve_),
  };
  AckAllAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckAllAchieve_descriptor_,
      AckAllAchieve::default_instance_,
      AckAllAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckAllAchieve));
  ReqSubmitAchieve_descriptor_ = file->message_type(3);
  static const int ReqSubmitAchieve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitAchieve, id_),
  };
  ReqSubmitAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSubmitAchieve_descriptor_,
      ReqSubmitAchieve::default_instance_,
      ReqSubmitAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSubmitAchieve));
  AckUpdateAchieve_descriptor_ = file->message_type(4);
  static const int AckUpdateAchieve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAchieve, achieve_),
  };
  AckUpdateAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateAchieve_descriptor_,
      AckUpdateAchieve::default_instance_,
      AckUpdateAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateAchieve));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_achievement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveMent_descriptor_, &AchieveMent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAllAchieve_descriptor_, &ReqAllAchieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckAllAchieve_descriptor_, &AckAllAchieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSubmitAchieve_descriptor_, &ReqSubmitAchieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateAchieve_descriptor_, &AckUpdateAchieve::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_achievement_2eproto() {
  delete AchieveMent::default_instance_;
  delete AchieveMent_reflection_;
  delete ReqAllAchieve::default_instance_;
  delete ReqAllAchieve_reflection_;
  delete AckAllAchieve::default_instance_;
  delete AckAllAchieve_reflection_;
  delete ReqSubmitAchieve::default_instance_;
  delete ReqSubmitAchieve_reflection_;
  delete AckUpdateAchieve::default_instance_;
  delete AckUpdateAchieve_reflection_;
}

void protobuf_AddDesc_achievement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_task_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021achievement.proto\022\021HelloKittyMsgData\032\n"
    "task.proto\"w\n\013AchieveMent\022\n\n\002id\030\001 \002(\004\022\r\n"
    "\005stars\030\002 \002(\r\022-\n\006status\030\003 \002(\0162\035.HelloKitt"
    "yMsgData.TaskStatus\022\017\n\007current\030\004 \002(\r\022\r\n\005"
    "total\030\005 \002(\r\"\017\n\rReqAllAchieve\"@\n\rAckAllAc"
    "hieve\022/\n\007achieve\030\001 \003(\0132\036.HelloKittyMsgDa"
    "ta.AchieveMent\"\036\n\020ReqSubmitAchieve\022\n\n\002id"
    "\030\001 \002(\004\"C\n\020AckUpdateAchieve\022/\n\007achieve\030\001 "
    "\002(\0132\036.HelloKittyMsgData.AchieveMent", 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "achievement.proto", &protobuf_RegisterTypes);
  AchieveMent::default_instance_ = new AchieveMent();
  ReqAllAchieve::default_instance_ = new ReqAllAchieve();
  AckAllAchieve::default_instance_ = new AckAllAchieve();
  ReqSubmitAchieve::default_instance_ = new ReqSubmitAchieve();
  AckUpdateAchieve::default_instance_ = new AckUpdateAchieve();
  AchieveMent::default_instance_->InitAsDefaultInstance();
  ReqAllAchieve::default_instance_->InitAsDefaultInstance();
  AckAllAchieve::default_instance_->InitAsDefaultInstance();
  ReqSubmitAchieve::default_instance_->InitAsDefaultInstance();
  AckUpdateAchieve::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_achievement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_achievement_2eproto {
  StaticDescriptorInitializer_achievement_2eproto() {
    protobuf_AddDesc_achievement_2eproto();
  }
} static_descriptor_initializer_achievement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AchieveMent::kIdFieldNumber;
const int AchieveMent::kStarsFieldNumber;
const int AchieveMent::kStatusFieldNumber;
const int AchieveMent::kCurrentFieldNumber;
const int AchieveMent::kTotalFieldNumber;
#endif  // !_MSC_VER

AchieveMent::AchieveMent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AchieveMent::InitAsDefaultInstance() {
}

AchieveMent::AchieveMent(const AchieveMent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AchieveMent::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  stars_ = 0u;
  status_ = 0;
  current_ = 0u;
  total_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveMent::~AchieveMent() {
  SharedDtor();
}

void AchieveMent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchieveMent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveMent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveMent_descriptor_;
}

const AchieveMent& AchieveMent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievement_2eproto();
  return *default_instance_;
}

AchieveMent* AchieveMent::default_instance_ = NULL;

AchieveMent* AchieveMent::New() const {
  return new AchieveMent;
}

void AchieveMent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    stars_ = 0u;
    status_ = 0;
    current_ = 0u;
    total_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveMent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stars;
        break;
      }

      // required uint32 stars = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stars_)));
          set_has_stars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .HelloKittyMsgData.TaskStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::TaskStatus_IsValid(value)) {
            set_status(static_cast< ::HelloKittyMsgData::TaskStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current;
        break;
      }

      // required uint32 current = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total;
        break;
      }

      // required uint32 total = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchieveMent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint32 stars = 2;
  if (has_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stars(), output);
  }

  // required .HelloKittyMsgData.TaskStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // required uint32 current = 4;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current(), output);
  }

  // required uint32 total = 5;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AchieveMent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint32 stars = 2;
  if (has_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stars(), target);
  }

  // required .HelloKittyMsgData.TaskStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // required uint32 current = 4;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current(), target);
  }

  // required uint32 total = 5;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AchieveMent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required uint32 stars = 2;
    if (has_stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stars());
    }

    // required .HelloKittyMsgData.TaskStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 current = 4;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current());
    }

    // required uint32 total = 5;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveMent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveMent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveMent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveMent::MergeFrom(const AchieveMent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stars()) {
      set_stars(from.stars());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveMent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveMent::CopyFrom(const AchieveMent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveMent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AchieveMent::Swap(AchieveMent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stars_, other->stars_);
    std::swap(status_, other->status_);
    std::swap(current_, other->current_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveMent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveMent_descriptor_;
  metadata.reflection = AchieveMent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqAllAchieve::ReqAllAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAllAchieve::InitAsDefaultInstance() {
}

ReqAllAchieve::ReqAllAchieve(const ReqAllAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAllAchieve::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAllAchieve::~ReqAllAchieve() {
  SharedDtor();
}

void ReqAllAchieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAllAchieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAllAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAllAchieve_descriptor_;
}

const ReqAllAchieve& ReqAllAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievement_2eproto();
  return *default_instance_;
}

ReqAllAchieve* ReqAllAchieve::default_instance_ = NULL;

ReqAllAchieve* ReqAllAchieve::New() const {
  return new ReqAllAchieve;
}

void ReqAllAchieve::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAllAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqAllAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAllAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAllAchieve::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAllAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAllAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAllAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAllAchieve::MergeFrom(const ReqAllAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAllAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAllAchieve::CopyFrom(const ReqAllAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAllAchieve::IsInitialized() const {

  return true;
}

void ReqAllAchieve::Swap(ReqAllAchieve* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAllAchieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAllAchieve_descriptor_;
  metadata.reflection = ReqAllAchieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckAllAchieve::kAchieveFieldNumber;
#endif  // !_MSC_VER

AckAllAchieve::AckAllAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckAllAchieve::InitAsDefaultInstance() {
}

AckAllAchieve::AckAllAchieve(const AckAllAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckAllAchieve::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckAllAchieve::~AckAllAchieve() {
  SharedDtor();
}

void AckAllAchieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckAllAchieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckAllAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckAllAchieve_descriptor_;
}

const AckAllAchieve& AckAllAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievement_2eproto();
  return *default_instance_;
}

AckAllAchieve* AckAllAchieve::default_instance_ = NULL;

AckAllAchieve* AckAllAchieve::New() const {
  return new AckAllAchieve;
}

void AckAllAchieve::Clear() {
  achieve_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckAllAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.AchieveMent achieve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achieve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achieve;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckAllAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.AchieveMent achieve = 1;
  for (int i = 0; i < this->achieve_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achieve(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckAllAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.AchieveMent achieve = 1;
  for (int i = 0; i < this->achieve_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achieve(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckAllAchieve::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.AchieveMent achieve = 1;
  total_size += 1 * this->achieve_size();
  for (int i = 0; i < this->achieve_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achieve(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckAllAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckAllAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckAllAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckAllAchieve::MergeFrom(const AckAllAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieve_.MergeFrom(from.achieve_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckAllAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAllAchieve::CopyFrom(const AckAllAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAllAchieve::IsInitialized() const {

  for (int i = 0; i < achieve_size(); i++) {
    if (!this->achieve(i).IsInitialized()) return false;
  }
  return true;
}

void AckAllAchieve::Swap(AckAllAchieve* other) {
  if (other != this) {
    achieve_.Swap(&other->achieve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckAllAchieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckAllAchieve_descriptor_;
  metadata.reflection = AckAllAchieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSubmitAchieve::kIdFieldNumber;
#endif  // !_MSC_VER

ReqSubmitAchieve::ReqSubmitAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSubmitAchieve::InitAsDefaultInstance() {
}

ReqSubmitAchieve::ReqSubmitAchieve(const ReqSubmitAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSubmitAchieve::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSubmitAchieve::~ReqSubmitAchieve() {
  SharedDtor();
}

void ReqSubmitAchieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSubmitAchieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSubmitAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSubmitAchieve_descriptor_;
}

const ReqSubmitAchieve& ReqSubmitAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievement_2eproto();
  return *default_instance_;
}

ReqSubmitAchieve* ReqSubmitAchieve::default_instance_ = NULL;

ReqSubmitAchieve* ReqSubmitAchieve::New() const {
  return new ReqSubmitAchieve;
}

void ReqSubmitAchieve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSubmitAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSubmitAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSubmitAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSubmitAchieve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSubmitAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSubmitAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSubmitAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSubmitAchieve::MergeFrom(const ReqSubmitAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSubmitAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubmitAchieve::CopyFrom(const ReqSubmitAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubmitAchieve::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqSubmitAchieve::Swap(ReqSubmitAchieve* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSubmitAchieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSubmitAchieve_descriptor_;
  metadata.reflection = ReqSubmitAchieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateAchieve::kAchieveFieldNumber;
#endif  // !_MSC_VER

AckUpdateAchieve::AckUpdateAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateAchieve::InitAsDefaultInstance() {
  achieve_ = const_cast< ::HelloKittyMsgData::AchieveMent*>(&::HelloKittyMsgData::AchieveMent::default_instance());
}

AckUpdateAchieve::AckUpdateAchieve(const AckUpdateAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateAchieve::SharedCtor() {
  _cached_size_ = 0;
  achieve_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateAchieve::~AckUpdateAchieve() {
  SharedDtor();
}

void AckUpdateAchieve::SharedDtor() {
  if (this != default_instance_) {
    delete achieve_;
  }
}

void AckUpdateAchieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateAchieve_descriptor_;
}

const AckUpdateAchieve& AckUpdateAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievement_2eproto();
  return *default_instance_;
}

AckUpdateAchieve* AckUpdateAchieve::default_instance_ = NULL;

AckUpdateAchieve* AckUpdateAchieve::New() const {
  return new AckUpdateAchieve;
}

void AckUpdateAchieve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_achieve()) {
      if (achieve_ != NULL) achieve_->::HelloKittyMsgData::AchieveMent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.AchieveMent achieve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achieve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.AchieveMent achieve = 1;
  if (has_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achieve(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.AchieveMent achieve = 1;
  if (has_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achieve(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateAchieve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.AchieveMent achieve = 1;
    if (has_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achieve());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateAchieve::MergeFrom(const AckUpdateAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achieve()) {
      mutable_achieve()->::HelloKittyMsgData::AchieveMent::MergeFrom(from.achieve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateAchieve::CopyFrom(const AckUpdateAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateAchieve::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_achieve()) {
    if (!this->achieve().IsInitialized()) return false;
  }
  return true;
}

void AckUpdateAchieve::Swap(AckUpdateAchieve* other) {
  if (other != this) {
    std::swap(achieve_, other->achieve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateAchieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateAchieve_descriptor_;
  metadata.reflection = AckUpdateAchieve_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
