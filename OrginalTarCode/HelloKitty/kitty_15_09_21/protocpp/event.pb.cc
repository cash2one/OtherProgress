// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* PlayerEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* vecAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vecAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveForEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveForEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* opBuilding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opBuilding_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckopBuilding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckopBuilding_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqclearSweetBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqclearSweetBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckclearSweetBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckclearSweetBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* returnEventAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  returnEventAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventBuildNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventBuildNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Evententer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Evententer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerOpEventResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EventProcess_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_2eproto() {
  protobuf_AddDesc_event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerEvent_descriptor_ = file->message_type(0);
  static const int PlayerEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEvent, endtimer_),
  };
  PlayerEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEvent_descriptor_,
      PlayerEvent::default_instance_,
      PlayerEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEvent));
  Award_descriptor_ = file->message_type(1);
  static const int Award_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, awardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, awardval_),
  };
  Award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Award_descriptor_,
      Award::default_instance_,
      Award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Award));
  vecAward_descriptor_ = file->message_type(2);
  static const int vecAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vecAward, award_),
  };
  vecAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vecAward_descriptor_,
      vecAward::default_instance_,
      vecAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vecAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vecAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vecAward));
  SaveForEvent_descriptor_ = file->message_type(3);
  static const int SaveForEvent_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveForEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveForEvent, isrun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveForEvent, flushtimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveForEvent, endtimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveForEvent, buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveForEvent, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveForEvent, opplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveForEvent, optimer_),
  };
  SaveForEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveForEvent_descriptor_,
      SaveForEvent::default_instance_,
      SaveForEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveForEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveForEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveForEvent));
  opBuilding_descriptor_ = file->message_type(4);
  static const int opBuilding_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opBuilding, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opBuilding, buildid_),
  };
  opBuilding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opBuilding_descriptor_,
      opBuilding::default_instance_,
      opBuilding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opBuilding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opBuilding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opBuilding));
  AckopBuilding_descriptor_ = file->message_type(5);
  static const int AckopBuilding_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckopBuilding, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckopBuilding, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckopBuilding, buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckopBuilding, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckopBuilding, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckopBuilding, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckopBuilding, extraid_),
  };
  AckopBuilding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckopBuilding_descriptor_,
      AckopBuilding::default_instance_,
      AckopBuilding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckopBuilding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckopBuilding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckopBuilding));
  ReqclearSweetBox_descriptor_ = file->message_type(6);
  static const int ReqclearSweetBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqclearSweetBox, type_),
  };
  ReqclearSweetBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqclearSweetBox_descriptor_,
      ReqclearSweetBox::default_instance_,
      ReqclearSweetBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqclearSweetBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqclearSweetBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqclearSweetBox));
  AckclearSweetBox_descriptor_ = file->message_type(7);
  static const int AckclearSweetBox_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckclearSweetBox, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckclearSweetBox, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckclearSweetBox, award_),
  };
  AckclearSweetBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckclearSweetBox_descriptor_,
      AckclearSweetBox::default_instance_,
      AckclearSweetBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckclearSweetBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckclearSweetBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckclearSweetBox));
  returnEventAward_descriptor_ = file->message_type(8);
  static const int returnEventAward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(returnEventAward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(returnEventAward, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(returnEventAward, ismail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(returnEventAward, award_),
  };
  returnEventAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      returnEventAward_descriptor_,
      returnEventAward::default_instance_,
      returnEventAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(returnEventAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(returnEventAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(returnEventAward));
  EventBuildNotice_descriptor_ = file->message_type(9);
  static const int EventBuildNotice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuildNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuildNotice, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuildNotice, buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuildNotice, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuildNotice, timerover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuildNotice, lastoptimer_),
  };
  EventBuildNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventBuildNotice_descriptor_,
      EventBuildNotice::default_instance_,
      EventBuildNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuildNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuildNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventBuildNotice));
  EventNotice_descriptor_ = file->message_type(10);
  static const int EventNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNotice, eventid_),
  };
  EventNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventNotice_descriptor_,
      EventNotice::default_instance_,
      EventNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventNotice));
  Evententer_descriptor_ = file->message_type(11);
  static const int Evententer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evententer, eventbuild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evententer, eventinfo_),
  };
  Evententer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Evententer_descriptor_,
      Evententer::default_instance_,
      Evententer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evententer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evententer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Evententer));
  PlayerEventType_descriptor_ = file->enum_type(0);
  PlayerOpEventResult_descriptor_ = file->enum_type(1);
  EventProcess_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEvent_descriptor_, &PlayerEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Award_descriptor_, &Award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vecAward_descriptor_, &vecAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveForEvent_descriptor_, &SaveForEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opBuilding_descriptor_, &opBuilding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckopBuilding_descriptor_, &AckopBuilding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqclearSweetBox_descriptor_, &ReqclearSweetBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckclearSweetBox_descriptor_, &AckclearSweetBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    returnEventAward_descriptor_, &returnEventAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventBuildNotice_descriptor_, &EventBuildNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventNotice_descriptor_, &EventNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Evententer_descriptor_, &Evententer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_2eproto() {
  delete PlayerEvent::default_instance_;
  delete PlayerEvent_reflection_;
  delete Award::default_instance_;
  delete Award_reflection_;
  delete vecAward::default_instance_;
  delete vecAward_reflection_;
  delete SaveForEvent::default_instance_;
  delete SaveForEvent_reflection_;
  delete opBuilding::default_instance_;
  delete opBuilding_reflection_;
  delete AckopBuilding::default_instance_;
  delete AckopBuilding_reflection_;
  delete ReqclearSweetBox::default_instance_;
  delete ReqclearSweetBox_reflection_;
  delete AckclearSweetBox::default_instance_;
  delete AckclearSweetBox_reflection_;
  delete returnEventAward::default_instance_;
  delete returnEventAward_reflection_;
  delete EventBuildNotice::default_instance_;
  delete EventBuildNotice_reflection_;
  delete EventNotice::default_instance_;
  delete EventNotice_reflection_;
  delete Evententer::default_instance_;
  delete Evententer_reflection_;
}

void protobuf_AddDesc_event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013event.proto\022\021HelloKittyMsgData\032\014common"
    ".proto\"6\n\013PlayerEvent\022\022\n\007EventID\030\001 \001(\r:\001"
    "0\022\023\n\010EndTimer\030\002 \001(\r:\0010\"2\n\005Award\022\024\n\taward"
    "type\030\001 \001(\r:\0010\022\023\n\010awardval\030\002 \001(\r:\0010\"3\n\010ve"
    "cAward\022\'\n\005award\030\001 \003(\0132\030.HelloKittyMsgDat"
    "a.Award\"\240\001\n\014SaveForEvent\022\017\n\007EventID\030\001 \002("
    "\r\022\r\n\005IsRun\030\002 \002(\r\022\022\n\nFlushTimer\030\003 \002(\r\022\023\n\010"
    "EndTimer\030\004 \001(\r:\0010\022\022\n\007BuildID\030\005 \001(\r:\0010\022\020\n"
    "\005Value\030\006 \001(\r:\0010\022\020\n\010OpPlayer\030\007 \003(\004\022\017\n\007OpT"
    "imer\030\010 \003(\r\"-\n\nopBuilding\022\016\n\006charid\030\001 \002(\004"
    "\022\017\n\007buildid\030\002 \002(\004\"\375\001\n\rAckopBuilding\0226\n\006r"
    "esult\030\001 \002(\0162&.HelloKittyMsgData.PlayerOp"
    "EventResult\022\016\n\006charid\030\002 \002(\004\022\017\n\007buildid\030\003"
    " \002(\004\022\022\n\007eventid\030\004 \001(\r:\0010\022B\n\007process\030\005 \001("
    "\0162\037.HelloKittyMsgData.EventProcess:\020Even"
    "tProcess_run\022\'\n\005award\030\006 \003(\0132\030.HelloKitty"
    "MsgData.Award\022\022\n\007extraid\030\007 \001(\r:\0010\" \n\020Req"
    "clearSweetBox\022\014\n\004type\030\001 \002(\r\"\201\001\n\020Ackclear"
    "SweetBox\022\014\n\004type\030\001 \002(\r\0226\n\006result\030\002 \002(\0162&"
    ".HelloKittyMsgData.PlayerOpEventResult\022\'"
    "\n\005award\030\003 \003(\0132\030.HelloKittyMsgData.Award\""
    "o\n\020returnEventAward\022\016\n\006charid\030\001 \002(\004\022\017\n\007e"
    "ventid\030\002 \002(\r\022\021\n\006isMail\030\003 \001(\r:\0010\022\'\n\005award"
    "\030\004 \003(\0132\030.HelloKittyMsgData.Award\"\203\001\n\020Eve"
    "ntBuildNotice\022\016\n\006charid\030\001 \002(\004\022\017\n\007eventid"
    "\030\002 \002(\r\022\017\n\007BuildID\030\003 \002(\004\022\017\n\004data\030\004 \001(\r:\0010"
    "\022\024\n\ttimerover\030\005 \001(\r:\0010\022\026\n\013lastoptimer\030\006 "
    "\001(\r:\0010\".\n\013EventNotice\022\016\n\006charid\030\001 \002(\004\022\017\n"
    "\007eventid\030\002 \002(\r\"x\n\nEvententer\0227\n\neventbui"
    "ld\030\001 \003(\0132#.HelloKittyMsgData.EventBuildN"
    "otice\0221\n\teventinfo\030\002 \003(\0132\036.HelloKittyMsg"
    "Data.EventNotice*\213\001\n\017PlayerEventType\022\024\n\020"
    "PlayerEvent_None\020\000\022\027\n\023PlayerEvent_LoseBo"
    "y\020\001\022\030\n\024PlayerEvent_GoldHill\020\002\022\030\n\024PlayerE"
    "vent_FixBuild\020\003\022\025\n\021PlayerEvent_Plant\020\004*\314"
    "\002\n\023PlayerOpEventResult\022\033\n\027PlayerOpEventR"
    "esult_Suc\020\000\022#\n\037PlayerOpEventResult_CaseN"
    "oExist\020\001\022&\n\"PlayerOpEventResult_SelfPack"
    "etFull\020\002\022\037\n\033PlayerOpEventResult_BoxFull\020"
    "\003\022\037\n\033PlayerOpEventResult_NOVisit\020\004\022\"\n\036Pl"
    "ayerOpEventResult_BoxNotFull\020\005\022%\n!Player"
    "OpEventResult_BuildNotExsit\020\006\022\034\n\030PlayerO"
    "pEventResult_Cool\020\007\022 \n\034PlayerOpEventResu"
    "lt_OtherErr\020\010*<\n\014EventProcess\022\024\n\020EventPr"
    "ocess_run\020\000\022\026\n\022EventProcess_final\020\001", 1795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event.proto", &protobuf_RegisterTypes);
  PlayerEvent::default_instance_ = new PlayerEvent();
  Award::default_instance_ = new Award();
  vecAward::default_instance_ = new vecAward();
  SaveForEvent::default_instance_ = new SaveForEvent();
  opBuilding::default_instance_ = new opBuilding();
  AckopBuilding::default_instance_ = new AckopBuilding();
  ReqclearSweetBox::default_instance_ = new ReqclearSweetBox();
  AckclearSweetBox::default_instance_ = new AckclearSweetBox();
  returnEventAward::default_instance_ = new returnEventAward();
  EventBuildNotice::default_instance_ = new EventBuildNotice();
  EventNotice::default_instance_ = new EventNotice();
  Evententer::default_instance_ = new Evententer();
  PlayerEvent::default_instance_->InitAsDefaultInstance();
  Award::default_instance_->InitAsDefaultInstance();
  vecAward::default_instance_->InitAsDefaultInstance();
  SaveForEvent::default_instance_->InitAsDefaultInstance();
  opBuilding::default_instance_->InitAsDefaultInstance();
  AckopBuilding::default_instance_->InitAsDefaultInstance();
  ReqclearSweetBox::default_instance_->InitAsDefaultInstance();
  AckclearSweetBox::default_instance_->InitAsDefaultInstance();
  returnEventAward::default_instance_->InitAsDefaultInstance();
  EventBuildNotice::default_instance_->InitAsDefaultInstance();
  EventNotice::default_instance_->InitAsDefaultInstance();
  Evententer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_2eproto {
  StaticDescriptorInitializer_event_2eproto() {
    protobuf_AddDesc_event_2eproto();
  }
} static_descriptor_initializer_event_2eproto_;
const ::google::protobuf::EnumDescriptor* PlayerEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEventType_descriptor_;
}
bool PlayerEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerOpEventResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerOpEventResult_descriptor_;
}
bool PlayerOpEventResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventProcess_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventProcess_descriptor_;
}
bool EventProcess_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEvent::kEventIDFieldNumber;
const int PlayerEvent::kEndTimerFieldNumber;
#endif  // !_MSC_VER

PlayerEvent::PlayerEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEvent::InitAsDefaultInstance() {
}

PlayerEvent::PlayerEvent(const PlayerEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEvent::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  endtimer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEvent::~PlayerEvent() {
  SharedDtor();
}

void PlayerEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEvent_descriptor_;
}

const PlayerEvent& PlayerEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

PlayerEvent* PlayerEvent::default_instance_ = NULL;

PlayerEvent* PlayerEvent::New() const {
  return new PlayerEvent;
}

void PlayerEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
    endtimer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EventID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EndTimer;
        break;
      }

      // optional uint32 EndTimer = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtimer_)));
          set_has_endtimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 EventID = 1 [default = 0];
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  // optional uint32 EndTimer = 2 [default = 0];
  if (has_endtimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endtimer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EventID = 1 [default = 0];
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  // optional uint32 EndTimer = 2 [default = 0];
  if (has_endtimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endtimer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EventID = 1 [default = 0];
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional uint32 EndTimer = 2 [default = 0];
    if (has_endtimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtimer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEvent::MergeFrom(const PlayerEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_endtimer()) {
      set_endtimer(from.endtimer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEvent::CopyFrom(const PlayerEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEvent::IsInitialized() const {

  return true;
}

void PlayerEvent::Swap(PlayerEvent* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(endtimer_, other->endtimer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEvent_descriptor_;
  metadata.reflection = PlayerEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Award::kAwardtypeFieldNumber;
const int Award::kAwardvalFieldNumber;
#endif  // !_MSC_VER

Award::Award()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Award::InitAsDefaultInstance() {
}

Award::Award(const Award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Award::SharedCtor() {
  _cached_size_ = 0;
  awardtype_ = 0u;
  awardval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Award::~Award() {
  SharedDtor();
}

void Award::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Award_descriptor_;
}

const Award& Award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Award* Award::default_instance_ = NULL;

Award* Award::New() const {
  return new Award;
}

void Award::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardtype_ = 0u;
    awardval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 awardtype = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awardval;
        break;
      }

      // optional uint32 awardval = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardval_)));
          set_has_awardval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 awardtype = 1 [default = 0];
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->awardtype(), output);
  }

  // optional uint32 awardval = 2 [default = 0];
  if (has_awardval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->awardval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 awardtype = 1 [default = 0];
  if (has_awardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->awardtype(), target);
  }

  // optional uint32 awardval = 2 [default = 0];
  if (has_awardval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->awardval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Award::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 awardtype = 1 [default = 0];
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardtype());
    }

    // optional uint32 awardval = 2 [default = 0];
    if (has_awardval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Award::MergeFrom(const Award& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_awardval()) {
      set_awardval(from.awardval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Award::CopyFrom(const Award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Award::IsInitialized() const {

  return true;
}

void Award::Swap(Award* other) {
  if (other != this) {
    std::swap(awardtype_, other->awardtype_);
    std::swap(awardval_, other->awardval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Award_descriptor_;
  metadata.reflection = Award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vecAward::kAwardFieldNumber;
#endif  // !_MSC_VER

vecAward::vecAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vecAward::InitAsDefaultInstance() {
}

vecAward::vecAward(const vecAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vecAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vecAward::~vecAward() {
  SharedDtor();
}

void vecAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vecAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vecAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vecAward_descriptor_;
}

const vecAward& vecAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

vecAward* vecAward::default_instance_ = NULL;

vecAward* vecAward::New() const {
  return new vecAward;
}

void vecAward::Clear() {
  award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vecAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.Award award = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_award;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vecAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.Award award = 1;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->award(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vecAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.Award award = 1;
  for (int i = 0; i < this->award_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->award(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vecAward::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.Award award = 1;
  total_size += 1 * this->award_size();
  for (int i = 0; i < this->award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vecAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vecAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vecAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vecAward::MergeFrom(const vecAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vecAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vecAward::CopyFrom(const vecAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vecAward::IsInitialized() const {

  return true;
}

void vecAward::Swap(vecAward* other) {
  if (other != this) {
    award_.Swap(&other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vecAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vecAward_descriptor_;
  metadata.reflection = vecAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveForEvent::kEventIDFieldNumber;
const int SaveForEvent::kIsRunFieldNumber;
const int SaveForEvent::kFlushTimerFieldNumber;
const int SaveForEvent::kEndTimerFieldNumber;
const int SaveForEvent::kBuildIDFieldNumber;
const int SaveForEvent::kValueFieldNumber;
const int SaveForEvent::kOpPlayerFieldNumber;
const int SaveForEvent::kOpTimerFieldNumber;
#endif  // !_MSC_VER

SaveForEvent::SaveForEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveForEvent::InitAsDefaultInstance() {
}

SaveForEvent::SaveForEvent(const SaveForEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveForEvent::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  isrun_ = 0u;
  flushtimer_ = 0u;
  endtimer_ = 0u;
  buildid_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveForEvent::~SaveForEvent() {
  SharedDtor();
}

void SaveForEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveForEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveForEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveForEvent_descriptor_;
}

const SaveForEvent& SaveForEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

SaveForEvent* SaveForEvent::default_instance_ = NULL;

SaveForEvent* SaveForEvent::New() const {
  return new SaveForEvent;
}

void SaveForEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
    isrun_ = 0u;
    flushtimer_ = 0u;
    endtimer_ = 0u;
    buildid_ = 0u;
    value_ = 0u;
  }
  opplayer_.Clear();
  optimer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveForEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EventID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsRun;
        break;
      }

      // required uint32 IsRun = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsRun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isrun_)));
          set_has_isrun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FlushTimer;
        break;
      }

      // required uint32 FlushTimer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlushTimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flushtimer_)));
          set_has_flushtimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_EndTimer;
        break;
      }

      // optional uint32 EndTimer = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtimer_)));
          set_has_endtimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BuildID;
        break;
      }

      // optional uint32 BuildID = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Value;
        break;
      }

      // optional uint32 Value = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_OpPlayer;
        break;
      }

      // repeated uint64 OpPlayer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_opplayer())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_opplayer())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_OpPlayer;
        if (input->ExpectTag(64)) goto parse_OpTimer;
        break;
      }

      // repeated uint32 OpTimer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpTimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_optimer())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_optimer())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_OpTimer;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveForEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EventID = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  // required uint32 IsRun = 2;
  if (has_isrun()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isrun(), output);
  }

  // required uint32 FlushTimer = 3;
  if (has_flushtimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flushtimer(), output);
  }

  // optional uint32 EndTimer = 4 [default = 0];
  if (has_endtimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtimer(), output);
  }

  // optional uint32 BuildID = 5 [default = 0];
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buildid(), output);
  }

  // optional uint32 Value = 6 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->value(), output);
  }

  // repeated uint64 OpPlayer = 7;
  for (int i = 0; i < this->opplayer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->opplayer(i), output);
  }

  // repeated uint32 OpTimer = 8;
  for (int i = 0; i < this->optimer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->optimer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveForEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 EventID = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  // required uint32 IsRun = 2;
  if (has_isrun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isrun(), target);
  }

  // required uint32 FlushTimer = 3;
  if (has_flushtimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flushtimer(), target);
  }

  // optional uint32 EndTimer = 4 [default = 0];
  if (has_endtimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endtimer(), target);
  }

  // optional uint32 BuildID = 5 [default = 0];
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buildid(), target);
  }

  // optional uint32 Value = 6 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->value(), target);
  }

  // repeated uint64 OpPlayer = 7;
  for (int i = 0; i < this->opplayer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->opplayer(i), target);
  }

  // repeated uint32 OpTimer = 8;
  for (int i = 0; i < this->optimer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->optimer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveForEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EventID = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // required uint32 IsRun = 2;
    if (has_isrun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isrun());
    }

    // required uint32 FlushTimer = 3;
    if (has_flushtimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flushtimer());
    }

    // optional uint32 EndTimer = 4 [default = 0];
    if (has_endtimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtimer());
    }

    // optional uint32 BuildID = 5 [default = 0];
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildid());
    }

    // optional uint32 Value = 6 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  // repeated uint64 OpPlayer = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->opplayer_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->opplayer(i));
    }
    total_size += 1 * this->opplayer_size() + data_size;
  }

  // repeated uint32 OpTimer = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->optimer_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->optimer(i));
    }
    total_size += 1 * this->optimer_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveForEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveForEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveForEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveForEvent::MergeFrom(const SaveForEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  opplayer_.MergeFrom(from.opplayer_);
  optimer_.MergeFrom(from.optimer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_isrun()) {
      set_isrun(from.isrun());
    }
    if (from.has_flushtimer()) {
      set_flushtimer(from.flushtimer());
    }
    if (from.has_endtimer()) {
      set_endtimer(from.endtimer());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveForEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveForEvent::CopyFrom(const SaveForEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveForEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SaveForEvent::Swap(SaveForEvent* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(isrun_, other->isrun_);
    std::swap(flushtimer_, other->flushtimer_);
    std::swap(endtimer_, other->endtimer_);
    std::swap(buildid_, other->buildid_);
    std::swap(value_, other->value_);
    opplayer_.Swap(&other->opplayer_);
    optimer_.Swap(&other->optimer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveForEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveForEvent_descriptor_;
  metadata.reflection = SaveForEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opBuilding::kCharidFieldNumber;
const int opBuilding::kBuildidFieldNumber;
#endif  // !_MSC_VER

opBuilding::opBuilding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void opBuilding::InitAsDefaultInstance() {
}

opBuilding::opBuilding(const opBuilding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void opBuilding::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  buildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opBuilding::~opBuilding() {
  SharedDtor();
}

void opBuilding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void opBuilding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opBuilding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opBuilding_descriptor_;
}

const opBuilding& opBuilding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

opBuilding* opBuilding::default_instance_ = NULL;

opBuilding* opBuilding::New() const {
  return new opBuilding;
}

void opBuilding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    buildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buildid;
        break;
      }

      // required uint64 buildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void opBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint64 buildid = 2;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* opBuilding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint64 buildid = 2;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int opBuilding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint64 buildid = 2;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opBuilding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opBuilding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opBuilding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opBuilding::MergeFrom(const opBuilding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opBuilding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opBuilding::CopyFrom(const opBuilding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opBuilding::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void opBuilding::Swap(opBuilding* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(buildid_, other->buildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opBuilding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opBuilding_descriptor_;
  metadata.reflection = opBuilding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckopBuilding::kResultFieldNumber;
const int AckopBuilding::kCharidFieldNumber;
const int AckopBuilding::kBuildidFieldNumber;
const int AckopBuilding::kEventidFieldNumber;
const int AckopBuilding::kProcessFieldNumber;
const int AckopBuilding::kAwardFieldNumber;
const int AckopBuilding::kExtraidFieldNumber;
#endif  // !_MSC_VER

AckopBuilding::AckopBuilding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckopBuilding::InitAsDefaultInstance() {
}

AckopBuilding::AckopBuilding(const AckopBuilding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckopBuilding::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  buildid_ = GOOGLE_ULONGLONG(0);
  eventid_ = 0u;
  process_ = 0;
  extraid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckopBuilding::~AckopBuilding() {
  SharedDtor();
}

void AckopBuilding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckopBuilding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckopBuilding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckopBuilding_descriptor_;
}

const AckopBuilding& AckopBuilding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

AckopBuilding* AckopBuilding::default_instance_ = NULL;

AckopBuilding* AckopBuilding::New() const {
  return new AckopBuilding;
}

void AckopBuilding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
    buildid_ = GOOGLE_ULONGLONG(0);
    eventid_ = 0u;
    process_ = 0;
    extraid_ = 0u;
  }
  award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckopBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.PlayerOpEventResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::PlayerOpEventResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::PlayerOpEventResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buildid;
        break;
      }

      // required uint64 buildid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eventid;
        break;
      }

      // optional uint32 eventid = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_process;
        break;
      }

      // optional .HelloKittyMsgData.EventProcess process = 5 [default = EventProcess_run];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::EventProcess_IsValid(value)) {
            set_process(static_cast< ::HelloKittyMsgData::EventProcess >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_award;
        break;
      }

      // repeated .HelloKittyMsgData.Award award = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_award;
        if (input->ExpectTag(56)) goto parse_extraid;
        break;
      }

      // optional uint32 extraid = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraid_)));
          set_has_extraid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckopBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.PlayerOpEventResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint64 buildid = 3;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->buildid(), output);
  }

  // optional uint32 eventid = 4 [default = 0];
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eventid(), output);
  }

  // optional .HelloKittyMsgData.EventProcess process = 5 [default = EventProcess_run];
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->process(), output);
  }

  // repeated .HelloKittyMsgData.Award award = 6;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->award(i), output);
  }

  // optional uint32 extraid = 7 [default = 0];
  if (has_extraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->extraid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckopBuilding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.PlayerOpEventResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint64 buildid = 3;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->buildid(), target);
  }

  // optional uint32 eventid = 4 [default = 0];
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eventid(), target);
  }

  // optional .HelloKittyMsgData.EventProcess process = 5 [default = EventProcess_run];
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->process(), target);
  }

  // repeated .HelloKittyMsgData.Award award = 6;
  for (int i = 0; i < this->award_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->award(i), target);
  }

  // optional uint32 extraid = 7 [default = 0];
  if (has_extraid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->extraid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckopBuilding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.PlayerOpEventResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint64 buildid = 3;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buildid());
    }

    // optional uint32 eventid = 4 [default = 0];
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional .HelloKittyMsgData.EventProcess process = 5 [default = EventProcess_run];
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->process());
    }

    // optional uint32 extraid = 7 [default = 0];
    if (has_extraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraid());
    }

  }
  // repeated .HelloKittyMsgData.Award award = 6;
  total_size += 1 * this->award_size();
  for (int i = 0; i < this->award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckopBuilding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckopBuilding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckopBuilding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckopBuilding::MergeFrom(const AckopBuilding& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_extraid()) {
      set_extraid(from.extraid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckopBuilding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckopBuilding::CopyFrom(const AckopBuilding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckopBuilding::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckopBuilding::Swap(AckopBuilding* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(buildid_, other->buildid_);
    std::swap(eventid_, other->eventid_);
    std::swap(process_, other->process_);
    award_.Swap(&other->award_);
    std::swap(extraid_, other->extraid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckopBuilding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckopBuilding_descriptor_;
  metadata.reflection = AckopBuilding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqclearSweetBox::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqclearSweetBox::ReqclearSweetBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqclearSweetBox::InitAsDefaultInstance() {
}

ReqclearSweetBox::ReqclearSweetBox(const ReqclearSweetBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqclearSweetBox::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqclearSweetBox::~ReqclearSweetBox() {
  SharedDtor();
}

void ReqclearSweetBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqclearSweetBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqclearSweetBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqclearSweetBox_descriptor_;
}

const ReqclearSweetBox& ReqclearSweetBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

ReqclearSweetBox* ReqclearSweetBox::default_instance_ = NULL;

ReqclearSweetBox* ReqclearSweetBox::New() const {
  return new ReqclearSweetBox;
}

void ReqclearSweetBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqclearSweetBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqclearSweetBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqclearSweetBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqclearSweetBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqclearSweetBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqclearSweetBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqclearSweetBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqclearSweetBox::MergeFrom(const ReqclearSweetBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqclearSweetBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqclearSweetBox::CopyFrom(const ReqclearSweetBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqclearSweetBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqclearSweetBox::Swap(ReqclearSweetBox* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqclearSweetBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqclearSweetBox_descriptor_;
  metadata.reflection = ReqclearSweetBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckclearSweetBox::kTypeFieldNumber;
const int AckclearSweetBox::kResultFieldNumber;
const int AckclearSweetBox::kAwardFieldNumber;
#endif  // !_MSC_VER

AckclearSweetBox::AckclearSweetBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckclearSweetBox::InitAsDefaultInstance() {
}

AckclearSweetBox::AckclearSweetBox(const AckclearSweetBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckclearSweetBox::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckclearSweetBox::~AckclearSweetBox() {
  SharedDtor();
}

void AckclearSweetBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckclearSweetBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckclearSweetBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckclearSweetBox_descriptor_;
}

const AckclearSweetBox& AckclearSweetBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

AckclearSweetBox* AckclearSweetBox::default_instance_ = NULL;

AckclearSweetBox* AckclearSweetBox::New() const {
  return new AckclearSweetBox;
}

void AckclearSweetBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    result_ = 0;
  }
  award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckclearSweetBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .HelloKittyMsgData.PlayerOpEventResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::PlayerOpEventResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::PlayerOpEventResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_award;
        break;
      }

      // repeated .HelloKittyMsgData.Award award = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_award;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckclearSweetBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required .HelloKittyMsgData.PlayerOpEventResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // repeated .HelloKittyMsgData.Award award = 3;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->award(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckclearSweetBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required .HelloKittyMsgData.PlayerOpEventResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // repeated .HelloKittyMsgData.Award award = 3;
  for (int i = 0; i < this->award_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->award(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckclearSweetBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .HelloKittyMsgData.PlayerOpEventResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .HelloKittyMsgData.Award award = 3;
  total_size += 1 * this->award_size();
  for (int i = 0; i < this->award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckclearSweetBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckclearSweetBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckclearSweetBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckclearSweetBox::MergeFrom(const AckclearSweetBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckclearSweetBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckclearSweetBox::CopyFrom(const AckclearSweetBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckclearSweetBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckclearSweetBox::Swap(AckclearSweetBox* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    award_.Swap(&other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckclearSweetBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckclearSweetBox_descriptor_;
  metadata.reflection = AckclearSweetBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int returnEventAward::kCharidFieldNumber;
const int returnEventAward::kEventidFieldNumber;
const int returnEventAward::kIsMailFieldNumber;
const int returnEventAward::kAwardFieldNumber;
#endif  // !_MSC_VER

returnEventAward::returnEventAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void returnEventAward::InitAsDefaultInstance() {
}

returnEventAward::returnEventAward(const returnEventAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void returnEventAward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  eventid_ = 0u;
  ismail_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

returnEventAward::~returnEventAward() {
  SharedDtor();
}

void returnEventAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void returnEventAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* returnEventAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return returnEventAward_descriptor_;
}

const returnEventAward& returnEventAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

returnEventAward* returnEventAward::default_instance_ = NULL;

returnEventAward* returnEventAward::New() const {
  return new returnEventAward;
}

void returnEventAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    eventid_ = 0u;
    ismail_ = 0u;
  }
  award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool returnEventAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventid;
        break;
      }

      // required uint32 eventid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isMail;
        break;
      }

      // optional uint32 isMail = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismail_)));
          set_has_ismail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_award;
        break;
      }

      // repeated .HelloKittyMsgData.Award award = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_award;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void returnEventAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 eventid = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eventid(), output);
  }

  // optional uint32 isMail = 3 [default = 0];
  if (has_ismail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ismail(), output);
  }

  // repeated .HelloKittyMsgData.Award award = 4;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->award(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* returnEventAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 eventid = 2;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eventid(), target);
  }

  // optional uint32 isMail = 3 [default = 0];
  if (has_ismail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ismail(), target);
  }

  // repeated .HelloKittyMsgData.Award award = 4;
  for (int i = 0; i < this->award_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->award(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int returnEventAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 eventid = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional uint32 isMail = 3 [default = 0];
    if (has_ismail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ismail());
    }

  }
  // repeated .HelloKittyMsgData.Award award = 4;
  total_size += 1 * this->award_size();
  for (int i = 0; i < this->award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void returnEventAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const returnEventAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const returnEventAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void returnEventAward::MergeFrom(const returnEventAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_ismail()) {
      set_ismail(from.ismail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void returnEventAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void returnEventAward::CopyFrom(const returnEventAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool returnEventAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void returnEventAward::Swap(returnEventAward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(eventid_, other->eventid_);
    std::swap(ismail_, other->ismail_);
    award_.Swap(&other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata returnEventAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = returnEventAward_descriptor_;
  metadata.reflection = returnEventAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventBuildNotice::kCharidFieldNumber;
const int EventBuildNotice::kEventidFieldNumber;
const int EventBuildNotice::kBuildIDFieldNumber;
const int EventBuildNotice::kDataFieldNumber;
const int EventBuildNotice::kTimeroverFieldNumber;
const int EventBuildNotice::kLastoptimerFieldNumber;
#endif  // !_MSC_VER

EventBuildNotice::EventBuildNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventBuildNotice::InitAsDefaultInstance() {
}

EventBuildNotice::EventBuildNotice(const EventBuildNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventBuildNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  eventid_ = 0u;
  buildid_ = GOOGLE_ULONGLONG(0);
  data_ = 0u;
  timerover_ = 0u;
  lastoptimer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventBuildNotice::~EventBuildNotice() {
  SharedDtor();
}

void EventBuildNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventBuildNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventBuildNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventBuildNotice_descriptor_;
}

const EventBuildNotice& EventBuildNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

EventBuildNotice* EventBuildNotice::default_instance_ = NULL;

EventBuildNotice* EventBuildNotice::New() const {
  return new EventBuildNotice;
}

void EventBuildNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    eventid_ = 0u;
    buildid_ = GOOGLE_ULONGLONG(0);
    data_ = 0u;
    timerover_ = 0u;
    lastoptimer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventBuildNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventid;
        break;
      }

      // required uint32 eventid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BuildID;
        break;
      }

      // required uint64 BuildID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data;
        break;
      }

      // optional uint32 data = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timerover;
        break;
      }

      // optional uint32 timerover = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timerover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timerover_)));
          set_has_timerover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastoptimer;
        break;
      }

      // optional uint32 lastoptimer = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastoptimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastoptimer_)));
          set_has_lastoptimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventBuildNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 eventid = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eventid(), output);
  }

  // required uint64 BuildID = 3;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->buildid(), output);
  }

  // optional uint32 data = 4 [default = 0];
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->data(), output);
  }

  // optional uint32 timerover = 5 [default = 0];
  if (has_timerover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timerover(), output);
  }

  // optional uint32 lastoptimer = 6 [default = 0];
  if (has_lastoptimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lastoptimer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventBuildNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 eventid = 2;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eventid(), target);
  }

  // required uint64 BuildID = 3;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->buildid(), target);
  }

  // optional uint32 data = 4 [default = 0];
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->data(), target);
  }

  // optional uint32 timerover = 5 [default = 0];
  if (has_timerover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timerover(), target);
  }

  // optional uint32 lastoptimer = 6 [default = 0];
  if (has_lastoptimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lastoptimer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventBuildNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 eventid = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // required uint64 BuildID = 3;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buildid());
    }

    // optional uint32 data = 4 [default = 0];
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data());
    }

    // optional uint32 timerover = 5 [default = 0];
    if (has_timerover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timerover());
    }

    // optional uint32 lastoptimer = 6 [default = 0];
    if (has_lastoptimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastoptimer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventBuildNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventBuildNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventBuildNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventBuildNotice::MergeFrom(const EventBuildNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_timerover()) {
      set_timerover(from.timerover());
    }
    if (from.has_lastoptimer()) {
      set_lastoptimer(from.lastoptimer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventBuildNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventBuildNotice::CopyFrom(const EventBuildNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBuildNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EventBuildNotice::Swap(EventBuildNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(eventid_, other->eventid_);
    std::swap(buildid_, other->buildid_);
    std::swap(data_, other->data_);
    std::swap(timerover_, other->timerover_);
    std::swap(lastoptimer_, other->lastoptimer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventBuildNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventBuildNotice_descriptor_;
  metadata.reflection = EventBuildNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventNotice::kCharidFieldNumber;
const int EventNotice::kEventidFieldNumber;
#endif  // !_MSC_VER

EventNotice::EventNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventNotice::InitAsDefaultInstance() {
}

EventNotice::EventNotice(const EventNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  eventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventNotice::~EventNotice() {
  SharedDtor();
}

void EventNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventNotice_descriptor_;
}

const EventNotice& EventNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

EventNotice* EventNotice::default_instance_ = NULL;

EventNotice* EventNotice::New() const {
  return new EventNotice;
}

void EventNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    eventid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventid;
        break;
      }

      // required uint32 eventid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 eventid = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 eventid = 2;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 eventid = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventNotice::MergeFrom(const EventNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventNotice::CopyFrom(const EventNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EventNotice::Swap(EventNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventNotice_descriptor_;
  metadata.reflection = EventNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Evententer::kEventbuildFieldNumber;
const int Evententer::kEventinfoFieldNumber;
#endif  // !_MSC_VER

Evententer::Evententer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Evententer::InitAsDefaultInstance() {
}

Evententer::Evententer(const Evententer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Evententer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Evententer::~Evententer() {
  SharedDtor();
}

void Evententer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Evententer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Evententer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Evententer_descriptor_;
}

const Evententer& Evententer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Evententer* Evententer::default_instance_ = NULL;

Evententer* Evententer::New() const {
  return new Evententer;
}

void Evententer::Clear() {
  eventbuild_.Clear();
  eventinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Evententer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.EventBuildNotice eventbuild = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventbuild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventbuild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_eventbuild;
        if (input->ExpectTag(18)) goto parse_eventinfo;
        break;
      }

      // repeated .HelloKittyMsgData.EventNotice eventinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Evententer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.EventBuildNotice eventbuild = 1;
  for (int i = 0; i < this->eventbuild_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eventbuild(i), output);
  }

  // repeated .HelloKittyMsgData.EventNotice eventinfo = 2;
  for (int i = 0; i < this->eventinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eventinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Evententer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.EventBuildNotice eventbuild = 1;
  for (int i = 0; i < this->eventbuild_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->eventbuild(i), target);
  }

  // repeated .HelloKittyMsgData.EventNotice eventinfo = 2;
  for (int i = 0; i < this->eventinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eventinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Evententer::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.EventBuildNotice eventbuild = 1;
  total_size += 1 * this->eventbuild_size();
  for (int i = 0; i < this->eventbuild_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventbuild(i));
  }

  // repeated .HelloKittyMsgData.EventNotice eventinfo = 2;
  total_size += 1 * this->eventinfo_size();
  for (int i = 0; i < this->eventinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Evententer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Evententer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Evententer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Evententer::MergeFrom(const Evententer& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventbuild_.MergeFrom(from.eventbuild_);
  eventinfo_.MergeFrom(from.eventinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Evententer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Evententer::CopyFrom(const Evententer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Evententer::IsInitialized() const {

  for (int i = 0; i < eventbuild_size(); i++) {
    if (!this->eventbuild(i).IsInitialized()) return false;
  }
  for (int i = 0; i < eventinfo_size(); i++) {
    if (!this->eventinfo(i).IsInitialized()) return false;
  }
  return true;
}

void Evententer::Swap(Evententer* other) {
  if (other != this) {
    eventbuild_.Swap(&other->eventbuild_);
    eventinfo_.Swap(&other->eventinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Evententer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Evententer_descriptor_;
  metadata.reflection = Evententer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
