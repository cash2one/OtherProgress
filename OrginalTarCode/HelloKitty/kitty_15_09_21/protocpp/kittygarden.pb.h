// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kittygarden.proto

#ifndef PROTOBUF_kittygarden_2eproto__INCLUDED
#define PROTOBUF_kittygarden_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "build.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_kittygarden_2eproto();
void protobuf_AssignDesc_kittygarden_2eproto();
void protobuf_ShutdownFile_kittygarden_2eproto();

class AreaGrid;
class GateGrid;
class KittyGarden;
class ReqKittyGarden;
class AckKittyGarden;
class ReqOpenArea;
class AckFlushArea;
class AckGardenOpSuccess;
class AckGardenOpFail;

enum GardenSuccessCodeType {
  Garden_Open_Area = 0
};
bool GardenSuccessCodeType_IsValid(int value);
const GardenSuccessCodeType GardenSuccessCodeType_MIN = Garden_Open_Area;
const GardenSuccessCodeType GardenSuccessCodeType_MAX = Garden_Open_Area;
const int GardenSuccessCodeType_ARRAYSIZE = GardenSuccessCodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GardenSuccessCodeType_descriptor();
inline const ::std::string& GardenSuccessCodeType_Name(GardenSuccessCodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GardenSuccessCodeType_descriptor(), value);
}
inline bool GardenSuccessCodeType_Parse(
    const ::std::string& name, GardenSuccessCodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GardenSuccessCodeType>(
    GardenSuccessCodeType_descriptor(), name, value);
}
enum GardenFailCodeType {
  Garden_Occupy = 0,
  Garden_Area_Close = 1,
  Garden_Point_Barrier = 3,
  Garden_Area_Illeag = 4,
  Garden_Area_Around_Close = 5,
  Garden_Area_Open_Again = 6
};
bool GardenFailCodeType_IsValid(int value);
const GardenFailCodeType GardenFailCodeType_MIN = Garden_Occupy;
const GardenFailCodeType GardenFailCodeType_MAX = Garden_Area_Open_Again;
const int GardenFailCodeType_ARRAYSIZE = GardenFailCodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GardenFailCodeType_descriptor();
inline const ::std::string& GardenFailCodeType_Name(GardenFailCodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GardenFailCodeType_descriptor(), value);
}
inline bool GardenFailCodeType_Parse(
    const ::std::string& name, GardenFailCodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GardenFailCodeType>(
    GardenFailCodeType_descriptor(), name, value);
}
// ===================================================================

class AreaGrid : public ::google::protobuf::Message {
 public:
  AreaGrid();
  virtual ~AreaGrid();

  AreaGrid(const AreaGrid& from);

  inline AreaGrid& operator=(const AreaGrid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AreaGrid& default_instance();

  void Swap(AreaGrid* other);

  // implements Message ----------------------------------------------

  AreaGrid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AreaGrid& from);
  void MergeFrom(const AreaGrid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.Point point = 1;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::HelloKittyMsgData::Point& point() const;
  inline ::HelloKittyMsgData::Point* mutable_point();
  inline ::HelloKittyMsgData::Point* release_point();
  inline void set_allocated_point(::HelloKittyMsgData::Point* point);

  // required bool isopen = 2;
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsopenFieldNumber = 2;
  inline bool isopen() const;
  inline void set_isopen(bool value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AreaGrid)
 private:
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_isopen();
  inline void clear_has_isopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::Point* point_;
  bool isopen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_kittygarden_2eproto();
  friend void protobuf_AssignDesc_kittygarden_2eproto();
  friend void protobuf_ShutdownFile_kittygarden_2eproto();

  void InitAsDefaultInstance();
  static AreaGrid* default_instance_;
};
// -------------------------------------------------------------------

class GateGrid : public ::google::protobuf::Message {
 public:
  GateGrid();
  virtual ~GateGrid();

  GateGrid(const GateGrid& from);

  inline GateGrid& operator=(const GateGrid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateGrid& default_instance();

  void Swap(GateGrid* other);

  // implements Message ----------------------------------------------

  GateGrid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateGrid& from);
  void MergeFrom(const GateGrid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.Point point = 1;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::HelloKittyMsgData::Point& point() const;
  inline ::HelloKittyMsgData::Point* mutable_point();
  inline ::HelloKittyMsgData::Point* release_point();
  inline void set_allocated_point(::HelloKittyMsgData::Point* point);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.GateGrid)
 private:
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::Point* point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_kittygarden_2eproto();
  friend void protobuf_AssignDesc_kittygarden_2eproto();
  friend void protobuf_ShutdownFile_kittygarden_2eproto();

  void InitAsDefaultInstance();
  static GateGrid* default_instance_;
};
// -------------------------------------------------------------------

class KittyGarden : public ::google::protobuf::Message {
 public:
  KittyGarden();
  virtual ~KittyGarden();

  KittyGarden(const KittyGarden& from);

  inline KittyGarden& operator=(const KittyGarden& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KittyGarden& default_instance();

  void Swap(KittyGarden* other);

  // implements Message ----------------------------------------------

  KittyGarden* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KittyGarden& from);
  void MergeFrom(const KittyGarden& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint64 mapid() const;
  inline void set_mapid(::google::protobuf::uint64 value);

  // required string mapname = 2;
  inline bool has_mapname() const;
  inline void clear_mapname();
  static const int kMapnameFieldNumber = 2;
  inline const ::std::string& mapname() const;
  inline void set_mapname(const ::std::string& value);
  inline void set_mapname(const char* value);
  inline void set_mapname(const char* value, size_t size);
  inline ::std::string* mutable_mapname();
  inline ::std::string* release_mapname();
  inline void set_allocated_mapname(::std::string* mapname);

  // repeated .HelloKittyMsgData.AreaGrid areagrid = 3;
  inline int areagrid_size() const;
  inline void clear_areagrid();
  static const int kAreagridFieldNumber = 3;
  inline const ::HelloKittyMsgData::AreaGrid& areagrid(int index) const;
  inline ::HelloKittyMsgData::AreaGrid* mutable_areagrid(int index);
  inline ::HelloKittyMsgData::AreaGrid* add_areagrid();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::AreaGrid >&
      areagrid() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::AreaGrid >*
      mutable_areagrid();

  // repeated .HelloKittyMsgData.GateGrid gategrid = 4;
  inline int gategrid_size() const;
  inline void clear_gategrid();
  static const int kGategridFieldNumber = 4;
  inline const ::HelloKittyMsgData::GateGrid& gategrid(int index) const;
  inline ::HelloKittyMsgData::GateGrid* mutable_gategrid(int index);
  inline ::HelloKittyMsgData::GateGrid* add_gategrid();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::GateGrid >&
      gategrid() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::GateGrid >*
      mutable_gategrid();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.KittyGarden)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_mapname();
  inline void clear_has_mapname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mapid_;
  ::std::string* mapname_;
  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::AreaGrid > areagrid_;
  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::GateGrid > gategrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_kittygarden_2eproto();
  friend void protobuf_AssignDesc_kittygarden_2eproto();
  friend void protobuf_ShutdownFile_kittygarden_2eproto();

  void InitAsDefaultInstance();
  static KittyGarden* default_instance_;
};
// -------------------------------------------------------------------

class ReqKittyGarden : public ::google::protobuf::Message {
 public:
  ReqKittyGarden();
  virtual ~ReqKittyGarden();

  ReqKittyGarden(const ReqKittyGarden& from);

  inline ReqKittyGarden& operator=(const ReqKittyGarden& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqKittyGarden& default_instance();

  void Swap(ReqKittyGarden* other);

  // implements Message ----------------------------------------------

  ReqKittyGarden* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqKittyGarden& from);
  void MergeFrom(const ReqKittyGarden& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqKittyGarden)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_kittygarden_2eproto();
  friend void protobuf_AssignDesc_kittygarden_2eproto();
  friend void protobuf_ShutdownFile_kittygarden_2eproto();

  void InitAsDefaultInstance();
  static ReqKittyGarden* default_instance_;
};
// -------------------------------------------------------------------

class AckKittyGarden : public ::google::protobuf::Message {
 public:
  AckKittyGarden();
  virtual ~AckKittyGarden();

  AckKittyGarden(const AckKittyGarden& from);

  inline AckKittyGarden& operator=(const AckKittyGarden& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckKittyGarden& default_instance();

  void Swap(AckKittyGarden* other);

  // implements Message ----------------------------------------------

  AckKittyGarden* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckKittyGarden& from);
  void MergeFrom(const AckKittyGarden& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // required .HelloKittyMsgData.KittyGarden kittygarden = 2;
  inline bool has_kittygarden() const;
  inline void clear_kittygarden();
  static const int kKittygardenFieldNumber = 2;
  inline const ::HelloKittyMsgData::KittyGarden& kittygarden() const;
  inline ::HelloKittyMsgData::KittyGarden* mutable_kittygarden();
  inline ::HelloKittyMsgData::KittyGarden* release_kittygarden();
  inline void set_allocated_kittygarden(::HelloKittyMsgData::KittyGarden* kittygarden);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckKittyGarden)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_kittygarden();
  inline void clear_has_kittygarden();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::HelloKittyMsgData::KittyGarden* kittygarden_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_kittygarden_2eproto();
  friend void protobuf_AssignDesc_kittygarden_2eproto();
  friend void protobuf_ShutdownFile_kittygarden_2eproto();

  void InitAsDefaultInstance();
  static AckKittyGarden* default_instance_;
};
// -------------------------------------------------------------------

class ReqOpenArea : public ::google::protobuf::Message {
 public:
  ReqOpenArea();
  virtual ~ReqOpenArea();

  ReqOpenArea(const ReqOpenArea& from);

  inline ReqOpenArea& operator=(const ReqOpenArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOpenArea& default_instance();

  void Swap(ReqOpenArea* other);

  // implements Message ----------------------------------------------

  ReqOpenArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOpenArea& from);
  void MergeFrom(const ReqOpenArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.Point point = 1;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::HelloKittyMsgData::Point& point() const;
  inline ::HelloKittyMsgData::Point* mutable_point();
  inline ::HelloKittyMsgData::Point* release_point();
  inline void set_allocated_point(::HelloKittyMsgData::Point* point);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqOpenArea)
 private:
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::Point* point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_kittygarden_2eproto();
  friend void protobuf_AssignDesc_kittygarden_2eproto();
  friend void protobuf_ShutdownFile_kittygarden_2eproto();

  void InitAsDefaultInstance();
  static ReqOpenArea* default_instance_;
};
// -------------------------------------------------------------------

class AckFlushArea : public ::google::protobuf::Message {
 public:
  AckFlushArea();
  virtual ~AckFlushArea();

  AckFlushArea(const AckFlushArea& from);

  inline AckFlushArea& operator=(const AckFlushArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckFlushArea& default_instance();

  void Swap(AckFlushArea* other);

  // implements Message ----------------------------------------------

  AckFlushArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckFlushArea& from);
  void MergeFrom(const AckFlushArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.AreaGrid areagrid = 1;
  inline bool has_areagrid() const;
  inline void clear_areagrid();
  static const int kAreagridFieldNumber = 1;
  inline const ::HelloKittyMsgData::AreaGrid& areagrid() const;
  inline ::HelloKittyMsgData::AreaGrid* mutable_areagrid();
  inline ::HelloKittyMsgData::AreaGrid* release_areagrid();
  inline void set_allocated_areagrid(::HelloKittyMsgData::AreaGrid* areagrid);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckFlushArea)
 private:
  inline void set_has_areagrid();
  inline void clear_has_areagrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::AreaGrid* areagrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_kittygarden_2eproto();
  friend void protobuf_AssignDesc_kittygarden_2eproto();
  friend void protobuf_ShutdownFile_kittygarden_2eproto();

  void InitAsDefaultInstance();
  static AckFlushArea* default_instance_;
};
// -------------------------------------------------------------------

class AckGardenOpSuccess : public ::google::protobuf::Message {
 public:
  AckGardenOpSuccess();
  virtual ~AckGardenOpSuccess();

  AckGardenOpSuccess(const AckGardenOpSuccess& from);

  inline AckGardenOpSuccess& operator=(const AckGardenOpSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGardenOpSuccess& default_instance();

  void Swap(AckGardenOpSuccess* other);

  // implements Message ----------------------------------------------

  AckGardenOpSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGardenOpSuccess& from);
  void MergeFrom(const AckGardenOpSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.GardenSuccessCodeType code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::HelloKittyMsgData::GardenSuccessCodeType code() const;
  inline void set_code(::HelloKittyMsgData::GardenSuccessCodeType value);

  // required .HelloKittyMsgData.AreaGrid areagrid = 2;
  inline bool has_areagrid() const;
  inline void clear_areagrid();
  static const int kAreagridFieldNumber = 2;
  inline const ::HelloKittyMsgData::AreaGrid& areagrid() const;
  inline ::HelloKittyMsgData::AreaGrid* mutable_areagrid();
  inline ::HelloKittyMsgData::AreaGrid* release_areagrid();
  inline void set_allocated_areagrid(::HelloKittyMsgData::AreaGrid* areagrid);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckGardenOpSuccess)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_areagrid();
  inline void clear_has_areagrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::AreaGrid* areagrid_;
  int code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_kittygarden_2eproto();
  friend void protobuf_AssignDesc_kittygarden_2eproto();
  friend void protobuf_ShutdownFile_kittygarden_2eproto();

  void InitAsDefaultInstance();
  static AckGardenOpSuccess* default_instance_;
};
// -------------------------------------------------------------------

class AckGardenOpFail : public ::google::protobuf::Message {
 public:
  AckGardenOpFail();
  virtual ~AckGardenOpFail();

  AckGardenOpFail(const AckGardenOpFail& from);

  inline AckGardenOpFail& operator=(const AckGardenOpFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGardenOpFail& default_instance();

  void Swap(AckGardenOpFail* other);

  // implements Message ----------------------------------------------

  AckGardenOpFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGardenOpFail& from);
  void MergeFrom(const AckGardenOpFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
  inline bool has_commoncode() const;
  inline void clear_commoncode();
  static const int kCommoncodeFieldNumber = 1;
  inline ::HelloKittyMsgData::ErrorCodeType commoncode() const;
  inline void set_commoncode(::HelloKittyMsgData::ErrorCodeType value);

  // required .HelloKittyMsgData.GardenFailCodeType code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::HelloKittyMsgData::GardenFailCodeType code() const;
  inline void set_code(::HelloKittyMsgData::GardenFailCodeType value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckGardenOpFail)
 private:
  inline void set_has_commoncode();
  inline void clear_has_commoncode();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int commoncode_;
  int code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_kittygarden_2eproto();
  friend void protobuf_AssignDesc_kittygarden_2eproto();
  friend void protobuf_ShutdownFile_kittygarden_2eproto();

  void InitAsDefaultInstance();
  static AckGardenOpFail* default_instance_;
};
// ===================================================================


// ===================================================================

// AreaGrid

// required .HelloKittyMsgData.Point point = 1;
inline bool AreaGrid::has_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AreaGrid::set_has_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AreaGrid::clear_has_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AreaGrid::clear_point() {
  if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
  clear_has_point();
}
inline const ::HelloKittyMsgData::Point& AreaGrid::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::HelloKittyMsgData::Point* AreaGrid::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::HelloKittyMsgData::Point;
  return point_;
}
inline ::HelloKittyMsgData::Point* AreaGrid::release_point() {
  clear_has_point();
  ::HelloKittyMsgData::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline void AreaGrid::set_allocated_point(::HelloKittyMsgData::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
}

// required bool isopen = 2;
inline bool AreaGrid::has_isopen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AreaGrid::set_has_isopen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AreaGrid::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AreaGrid::clear_isopen() {
  isopen_ = false;
  clear_has_isopen();
}
inline bool AreaGrid::isopen() const {
  return isopen_;
}
inline void AreaGrid::set_isopen(bool value) {
  set_has_isopen();
  isopen_ = value;
}

// -------------------------------------------------------------------

// GateGrid

// required .HelloKittyMsgData.Point point = 1;
inline bool GateGrid::has_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateGrid::set_has_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateGrid::clear_has_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateGrid::clear_point() {
  if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
  clear_has_point();
}
inline const ::HelloKittyMsgData::Point& GateGrid::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::HelloKittyMsgData::Point* GateGrid::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::HelloKittyMsgData::Point;
  return point_;
}
inline ::HelloKittyMsgData::Point* GateGrid::release_point() {
  clear_has_point();
  ::HelloKittyMsgData::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline void GateGrid::set_allocated_point(::HelloKittyMsgData::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
}

// -------------------------------------------------------------------

// KittyGarden

// required uint64 mapid = 1;
inline bool KittyGarden::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KittyGarden::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KittyGarden::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KittyGarden::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::uint64 KittyGarden::mapid() const {
  return mapid_;
}
inline void KittyGarden::set_mapid(::google::protobuf::uint64 value) {
  set_has_mapid();
  mapid_ = value;
}

// required string mapname = 2;
inline bool KittyGarden::has_mapname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KittyGarden::set_has_mapname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KittyGarden::clear_has_mapname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KittyGarden::clear_mapname() {
  if (mapname_ != &::google::protobuf::internal::kEmptyString) {
    mapname_->clear();
  }
  clear_has_mapname();
}
inline const ::std::string& KittyGarden::mapname() const {
  return *mapname_;
}
inline void KittyGarden::set_mapname(const ::std::string& value) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(value);
}
inline void KittyGarden::set_mapname(const char* value) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(value);
}
inline void KittyGarden::set_mapname(const char* value, size_t size) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KittyGarden::mutable_mapname() {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    mapname_ = new ::std::string;
  }
  return mapname_;
}
inline ::std::string* KittyGarden::release_mapname() {
  clear_has_mapname();
  if (mapname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mapname_;
    mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KittyGarden::set_allocated_mapname(::std::string* mapname) {
  if (mapname_ != &::google::protobuf::internal::kEmptyString) {
    delete mapname_;
  }
  if (mapname) {
    set_has_mapname();
    mapname_ = mapname;
  } else {
    clear_has_mapname();
    mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .HelloKittyMsgData.AreaGrid areagrid = 3;
inline int KittyGarden::areagrid_size() const {
  return areagrid_.size();
}
inline void KittyGarden::clear_areagrid() {
  areagrid_.Clear();
}
inline const ::HelloKittyMsgData::AreaGrid& KittyGarden::areagrid(int index) const {
  return areagrid_.Get(index);
}
inline ::HelloKittyMsgData::AreaGrid* KittyGarden::mutable_areagrid(int index) {
  return areagrid_.Mutable(index);
}
inline ::HelloKittyMsgData::AreaGrid* KittyGarden::add_areagrid() {
  return areagrid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::AreaGrid >&
KittyGarden::areagrid() const {
  return areagrid_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::AreaGrid >*
KittyGarden::mutable_areagrid() {
  return &areagrid_;
}

// repeated .HelloKittyMsgData.GateGrid gategrid = 4;
inline int KittyGarden::gategrid_size() const {
  return gategrid_.size();
}
inline void KittyGarden::clear_gategrid() {
  gategrid_.Clear();
}
inline const ::HelloKittyMsgData::GateGrid& KittyGarden::gategrid(int index) const {
  return gategrid_.Get(index);
}
inline ::HelloKittyMsgData::GateGrid* KittyGarden::mutable_gategrid(int index) {
  return gategrid_.Mutable(index);
}
inline ::HelloKittyMsgData::GateGrid* KittyGarden::add_gategrid() {
  return gategrid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::GateGrid >&
KittyGarden::gategrid() const {
  return gategrid_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::GateGrid >*
KittyGarden::mutable_gategrid() {
  return &gategrid_;
}

// -------------------------------------------------------------------

// ReqKittyGarden

// required uint64 charid = 1;
inline bool ReqKittyGarden::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqKittyGarden::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqKittyGarden::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqKittyGarden::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ReqKittyGarden::charid() const {
  return charid_;
}
inline void ReqKittyGarden::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// AckKittyGarden

// required uint64 charid = 1;
inline bool AckKittyGarden::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckKittyGarden::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckKittyGarden::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckKittyGarden::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 AckKittyGarden::charid() const {
  return charid_;
}
inline void AckKittyGarden::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// required .HelloKittyMsgData.KittyGarden kittygarden = 2;
inline bool AckKittyGarden::has_kittygarden() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckKittyGarden::set_has_kittygarden() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckKittyGarden::clear_has_kittygarden() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckKittyGarden::clear_kittygarden() {
  if (kittygarden_ != NULL) kittygarden_->::HelloKittyMsgData::KittyGarden::Clear();
  clear_has_kittygarden();
}
inline const ::HelloKittyMsgData::KittyGarden& AckKittyGarden::kittygarden() const {
  return kittygarden_ != NULL ? *kittygarden_ : *default_instance_->kittygarden_;
}
inline ::HelloKittyMsgData::KittyGarden* AckKittyGarden::mutable_kittygarden() {
  set_has_kittygarden();
  if (kittygarden_ == NULL) kittygarden_ = new ::HelloKittyMsgData::KittyGarden;
  return kittygarden_;
}
inline ::HelloKittyMsgData::KittyGarden* AckKittyGarden::release_kittygarden() {
  clear_has_kittygarden();
  ::HelloKittyMsgData::KittyGarden* temp = kittygarden_;
  kittygarden_ = NULL;
  return temp;
}
inline void AckKittyGarden::set_allocated_kittygarden(::HelloKittyMsgData::KittyGarden* kittygarden) {
  delete kittygarden_;
  kittygarden_ = kittygarden;
  if (kittygarden) {
    set_has_kittygarden();
  } else {
    clear_has_kittygarden();
  }
}

// -------------------------------------------------------------------

// ReqOpenArea

// required .HelloKittyMsgData.Point point = 1;
inline bool ReqOpenArea::has_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOpenArea::set_has_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOpenArea::clear_has_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOpenArea::clear_point() {
  if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
  clear_has_point();
}
inline const ::HelloKittyMsgData::Point& ReqOpenArea::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::HelloKittyMsgData::Point* ReqOpenArea::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::HelloKittyMsgData::Point;
  return point_;
}
inline ::HelloKittyMsgData::Point* ReqOpenArea::release_point() {
  clear_has_point();
  ::HelloKittyMsgData::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline void ReqOpenArea::set_allocated_point(::HelloKittyMsgData::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
}

// -------------------------------------------------------------------

// AckFlushArea

// required .HelloKittyMsgData.AreaGrid areagrid = 1;
inline bool AckFlushArea::has_areagrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckFlushArea::set_has_areagrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckFlushArea::clear_has_areagrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckFlushArea::clear_areagrid() {
  if (areagrid_ != NULL) areagrid_->::HelloKittyMsgData::AreaGrid::Clear();
  clear_has_areagrid();
}
inline const ::HelloKittyMsgData::AreaGrid& AckFlushArea::areagrid() const {
  return areagrid_ != NULL ? *areagrid_ : *default_instance_->areagrid_;
}
inline ::HelloKittyMsgData::AreaGrid* AckFlushArea::mutable_areagrid() {
  set_has_areagrid();
  if (areagrid_ == NULL) areagrid_ = new ::HelloKittyMsgData::AreaGrid;
  return areagrid_;
}
inline ::HelloKittyMsgData::AreaGrid* AckFlushArea::release_areagrid() {
  clear_has_areagrid();
  ::HelloKittyMsgData::AreaGrid* temp = areagrid_;
  areagrid_ = NULL;
  return temp;
}
inline void AckFlushArea::set_allocated_areagrid(::HelloKittyMsgData::AreaGrid* areagrid) {
  delete areagrid_;
  areagrid_ = areagrid;
  if (areagrid) {
    set_has_areagrid();
  } else {
    clear_has_areagrid();
  }
}

// -------------------------------------------------------------------

// AckGardenOpSuccess

// required .HelloKittyMsgData.GardenSuccessCodeType code = 1;
inline bool AckGardenOpSuccess::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGardenOpSuccess::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGardenOpSuccess::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGardenOpSuccess::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::HelloKittyMsgData::GardenSuccessCodeType AckGardenOpSuccess::code() const {
  return static_cast< ::HelloKittyMsgData::GardenSuccessCodeType >(code_);
}
inline void AckGardenOpSuccess::set_code(::HelloKittyMsgData::GardenSuccessCodeType value) {
  assert(::HelloKittyMsgData::GardenSuccessCodeType_IsValid(value));
  set_has_code();
  code_ = value;
}

// required .HelloKittyMsgData.AreaGrid areagrid = 2;
inline bool AckGardenOpSuccess::has_areagrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGardenOpSuccess::set_has_areagrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGardenOpSuccess::clear_has_areagrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGardenOpSuccess::clear_areagrid() {
  if (areagrid_ != NULL) areagrid_->::HelloKittyMsgData::AreaGrid::Clear();
  clear_has_areagrid();
}
inline const ::HelloKittyMsgData::AreaGrid& AckGardenOpSuccess::areagrid() const {
  return areagrid_ != NULL ? *areagrid_ : *default_instance_->areagrid_;
}
inline ::HelloKittyMsgData::AreaGrid* AckGardenOpSuccess::mutable_areagrid() {
  set_has_areagrid();
  if (areagrid_ == NULL) areagrid_ = new ::HelloKittyMsgData::AreaGrid;
  return areagrid_;
}
inline ::HelloKittyMsgData::AreaGrid* AckGardenOpSuccess::release_areagrid() {
  clear_has_areagrid();
  ::HelloKittyMsgData::AreaGrid* temp = areagrid_;
  areagrid_ = NULL;
  return temp;
}
inline void AckGardenOpSuccess::set_allocated_areagrid(::HelloKittyMsgData::AreaGrid* areagrid) {
  delete areagrid_;
  areagrid_ = areagrid;
  if (areagrid) {
    set_has_areagrid();
  } else {
    clear_has_areagrid();
  }
}

// -------------------------------------------------------------------

// AckGardenOpFail

// required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
inline bool AckGardenOpFail::has_commoncode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGardenOpFail::set_has_commoncode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGardenOpFail::clear_has_commoncode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGardenOpFail::clear_commoncode() {
  commoncode_ = 0;
  clear_has_commoncode();
}
inline ::HelloKittyMsgData::ErrorCodeType AckGardenOpFail::commoncode() const {
  return static_cast< ::HelloKittyMsgData::ErrorCodeType >(commoncode_);
}
inline void AckGardenOpFail::set_commoncode(::HelloKittyMsgData::ErrorCodeType value) {
  assert(::HelloKittyMsgData::ErrorCodeType_IsValid(value));
  set_has_commoncode();
  commoncode_ = value;
}

// required .HelloKittyMsgData.GardenFailCodeType code = 2;
inline bool AckGardenOpFail::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGardenOpFail::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGardenOpFail::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGardenOpFail::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::HelloKittyMsgData::GardenFailCodeType AckGardenOpFail::code() const {
  return static_cast< ::HelloKittyMsgData::GardenFailCodeType >(code_);
}
inline void AckGardenOpFail::set_code(::HelloKittyMsgData::GardenFailCodeType value) {
  assert(::HelloKittyMsgData::GardenFailCodeType_IsValid(value));
  set_has_code();
  code_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::GardenSuccessCodeType>() {
  return ::HelloKittyMsgData::GardenSuccessCodeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::GardenFailCodeType>() {
  return ::HelloKittyMsgData::GardenFailCodeType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kittygarden_2eproto__INCLUDED
