// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dress.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dress.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* DressData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DressData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDress_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDress_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateDress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateDress_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpDress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpDress_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckExternBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckExternBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBodyDress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBodyDress_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DressOpType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dress_2eproto() {
  protobuf_AddDesc_dress_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dress.proto");
  GOOGLE_CHECK(file != NULL);
  DressData_descriptor_ = file->message_type(0);
  static const int DressData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressData, level_),
  };
  DressData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DressData_descriptor_,
      DressData::default_instance_,
      DressData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DressData));
  ReqDress_descriptor_ = file->message_type(1);
  static const int ReqDress_offsets_[1] = {
  };
  ReqDress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDress_descriptor_,
      ReqDress::default_instance_,
      ReqDress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDress));
  AckDress_descriptor_ = file->message_type(2);
  static const int AckDress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDress, dress_),
  };
  AckDress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDress_descriptor_,
      AckDress::default_instance_,
      AckDress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDress));
  AckUpdateDress_descriptor_ = file->message_type(3);
  static const int AckUpdateDress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateDress, dress_),
  };
  AckUpdateDress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateDress_descriptor_,
      AckUpdateDress::default_instance_,
      AckUpdateDress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateDress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateDress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateDress));
  ReqOpDress_descriptor_ = file->message_type(4);
  static const int ReqOpDress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpDress, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpDress, optype_),
  };
  ReqOpDress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpDress_descriptor_,
      ReqOpDress::default_instance_,
      ReqOpDress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpDress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpDress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpDress));
  AckExternBuffer_descriptor_ = file->message_type(5);
  static const int AckExternBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckExternBuffer, bufferdata_),
  };
  AckExternBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckExternBuffer_descriptor_,
      AckExternBuffer::default_instance_,
      AckExternBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckExternBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckExternBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckExternBuffer));
  AckBodyDress_descriptor_ = file->message_type(6);
  static const int AckBodyDress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBodyDress, dress_),
  };
  AckBodyDress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBodyDress_descriptor_,
      AckBodyDress::default_instance_,
      AckBodyDress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBodyDress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBodyDress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBodyDress));
  DressOpType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dress_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DressData_descriptor_, &DressData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDress_descriptor_, &ReqDress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDress_descriptor_, &AckDress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateDress_descriptor_, &AckUpdateDress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpDress_descriptor_, &ReqOpDress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckExternBuffer_descriptor_, &AckExternBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBodyDress_descriptor_, &AckBodyDress::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dress_2eproto() {
  delete DressData::default_instance_;
  delete DressData_reflection_;
  delete ReqDress::default_instance_;
  delete ReqDress_reflection_;
  delete AckDress::default_instance_;
  delete AckDress_reflection_;
  delete AckUpdateDress::default_instance_;
  delete AckUpdateDress_reflection_;
  delete ReqOpDress::default_instance_;
  delete ReqOpDress_reflection_;
  delete AckExternBuffer::default_instance_;
  delete AckExternBuffer_reflection_;
  delete AckBodyDress::default_instance_;
  delete AckBodyDress_reflection_;
}

void protobuf_AddDesc_dress_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_build_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013dress.proto\022\021HelloKittyMsgData\032\013build."
    "proto\"&\n\tDressData\022\n\n\002id\030\001 \002(\r\022\r\n\005level\030"
    "\002 \002(\r\"\n\n\010ReqDress\"7\n\010AckDress\022+\n\005dress\030\001"
    " \003(\0132\034.HelloKittyMsgData.DressData\"=\n\016Ac"
    "kUpdateDress\022+\n\005dress\030\001 \002(\0132\034.HelloKitty"
    "MsgData.DressData\"H\n\nReqOpDress\022\n\n\002id\030\001 "
    "\002(\r\022.\n\006optype\030\002 \002(\0162\036.HelloKittyMsgData."
    "DressOpType\"D\n\017AckExternBuffer\0221\n\nbuffer"
    "data\030\001 \003(\0132\035.HelloKittyMsgData.BufferDat"
    "a\";\n\014AckBodyDress\022+\n\005dress\030\001 \002(\0132\034.Hello"
    "KittyMsgData.DressData*.\n\013DressOpType\022\016\n"
    "\nDOT_Change\020\000\022\017\n\013DOT_UpLevel\020\001", 470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dress.proto", &protobuf_RegisterTypes);
  DressData::default_instance_ = new DressData();
  ReqDress::default_instance_ = new ReqDress();
  AckDress::default_instance_ = new AckDress();
  AckUpdateDress::default_instance_ = new AckUpdateDress();
  ReqOpDress::default_instance_ = new ReqOpDress();
  AckExternBuffer::default_instance_ = new AckExternBuffer();
  AckBodyDress::default_instance_ = new AckBodyDress();
  DressData::default_instance_->InitAsDefaultInstance();
  ReqDress::default_instance_->InitAsDefaultInstance();
  AckDress::default_instance_->InitAsDefaultInstance();
  AckUpdateDress::default_instance_->InitAsDefaultInstance();
  ReqOpDress::default_instance_->InitAsDefaultInstance();
  AckExternBuffer::default_instance_->InitAsDefaultInstance();
  AckBodyDress::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dress_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dress_2eproto {
  StaticDescriptorInitializer_dress_2eproto() {
    protobuf_AddDesc_dress_2eproto();
  }
} static_descriptor_initializer_dress_2eproto_;
const ::google::protobuf::EnumDescriptor* DressOpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DressOpType_descriptor_;
}
bool DressOpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DressData::kIdFieldNumber;
const int DressData::kLevelFieldNumber;
#endif  // !_MSC_VER

DressData::DressData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DressData::InitAsDefaultInstance() {
}

DressData::DressData(const DressData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DressData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DressData::~DressData() {
  SharedDtor();
}

void DressData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DressData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DressData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DressData_descriptor_;
}

const DressData& DressData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dress_2eproto();
  return *default_instance_;
}

DressData* DressData::default_instance_ = NULL;

DressData* DressData::New() const {
  return new DressData;
}

void DressData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DressData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DressData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DressData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DressData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DressData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DressData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DressData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DressData::MergeFrom(const DressData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DressData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DressData::CopyFrom(const DressData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DressData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DressData::Swap(DressData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DressData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DressData_descriptor_;
  metadata.reflection = DressData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqDress::ReqDress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDress::InitAsDefaultInstance() {
}

ReqDress::ReqDress(const ReqDress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDress::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDress::~ReqDress() {
  SharedDtor();
}

void ReqDress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDress_descriptor_;
}

const ReqDress& ReqDress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dress_2eproto();
  return *default_instance_;
}

ReqDress* ReqDress::default_instance_ = NULL;

ReqDress* ReqDress::New() const {
  return new ReqDress;
}

void ReqDress::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqDress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDress::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDress::MergeFrom(const ReqDress& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDress::CopyFrom(const ReqDress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDress::IsInitialized() const {

  return true;
}

void ReqDress::Swap(ReqDress* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDress_descriptor_;
  metadata.reflection = ReqDress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDress::kDressFieldNumber;
#endif  // !_MSC_VER

AckDress::AckDress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDress::InitAsDefaultInstance() {
}

AckDress::AckDress(const AckDress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDress::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDress::~AckDress() {
  SharedDtor();
}

void AckDress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDress_descriptor_;
}

const AckDress& AckDress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dress_2eproto();
  return *default_instance_;
}

AckDress* AckDress::default_instance_ = NULL;

AckDress* AckDress::New() const {
  return new AckDress;
}

void AckDress::Clear() {
  dress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.DressData dress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dress;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.DressData dress = 1;
  for (int i = 0; i < this->dress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dress(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.DressData dress = 1;
  for (int i = 0; i < this->dress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dress(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDress::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.DressData dress = 1;
  total_size += 1 * this->dress_size();
  for (int i = 0; i < this->dress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dress(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDress::MergeFrom(const AckDress& from) {
  GOOGLE_CHECK_NE(&from, this);
  dress_.MergeFrom(from.dress_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDress::CopyFrom(const AckDress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDress::IsInitialized() const {

  for (int i = 0; i < dress_size(); i++) {
    if (!this->dress(i).IsInitialized()) return false;
  }
  return true;
}

void AckDress::Swap(AckDress* other) {
  if (other != this) {
    dress_.Swap(&other->dress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDress_descriptor_;
  metadata.reflection = AckDress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateDress::kDressFieldNumber;
#endif  // !_MSC_VER

AckUpdateDress::AckUpdateDress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateDress::InitAsDefaultInstance() {
  dress_ = const_cast< ::HelloKittyMsgData::DressData*>(&::HelloKittyMsgData::DressData::default_instance());
}

AckUpdateDress::AckUpdateDress(const AckUpdateDress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateDress::SharedCtor() {
  _cached_size_ = 0;
  dress_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateDress::~AckUpdateDress() {
  SharedDtor();
}

void AckUpdateDress::SharedDtor() {
  if (this != default_instance_) {
    delete dress_;
  }
}

void AckUpdateDress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateDress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateDress_descriptor_;
}

const AckUpdateDress& AckUpdateDress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dress_2eproto();
  return *default_instance_;
}

AckUpdateDress* AckUpdateDress::default_instance_ = NULL;

AckUpdateDress* AckUpdateDress::New() const {
  return new AckUpdateDress;
}

void AckUpdateDress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dress()) {
      if (dress_ != NULL) dress_->::HelloKittyMsgData::DressData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateDress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.DressData dress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateDress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.DressData dress = 1;
  if (has_dress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateDress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.DressData dress = 1;
  if (has_dress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateDress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.DressData dress = 1;
    if (has_dress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateDress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateDress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateDress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateDress::MergeFrom(const AckUpdateDress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dress()) {
      mutable_dress()->::HelloKittyMsgData::DressData::MergeFrom(from.dress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateDress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateDress::CopyFrom(const AckUpdateDress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateDress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_dress()) {
    if (!this->dress().IsInitialized()) return false;
  }
  return true;
}

void AckUpdateDress::Swap(AckUpdateDress* other) {
  if (other != this) {
    std::swap(dress_, other->dress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateDress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateDress_descriptor_;
  metadata.reflection = AckUpdateDress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpDress::kIdFieldNumber;
const int ReqOpDress::kOptypeFieldNumber;
#endif  // !_MSC_VER

ReqOpDress::ReqOpDress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpDress::InitAsDefaultInstance() {
}

ReqOpDress::ReqOpDress(const ReqOpDress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpDress::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpDress::~ReqOpDress() {
  SharedDtor();
}

void ReqOpDress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpDress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpDress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpDress_descriptor_;
}

const ReqOpDress& ReqOpDress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dress_2eproto();
  return *default_instance_;
}

ReqOpDress* ReqOpDress::default_instance_ = NULL;

ReqOpDress* ReqOpDress::New() const {
  return new ReqOpDress;
}

void ReqOpDress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    optype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpDress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_optype;
        break;
      }

      // required .HelloKittyMsgData.DressOpType optype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::DressOpType_IsValid(value)) {
            set_optype(static_cast< ::HelloKittyMsgData::DressOpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpDress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .HelloKittyMsgData.DressOpType optype = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpDress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .HelloKittyMsgData.DressOpType optype = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpDress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .HelloKittyMsgData.DressOpType optype = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpDress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpDress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpDress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpDress::MergeFrom(const ReqOpDress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpDress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpDress::CopyFrom(const ReqOpDress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpDress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqOpDress::Swap(ReqOpDress* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpDress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpDress_descriptor_;
  metadata.reflection = ReqOpDress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckExternBuffer::kBufferdataFieldNumber;
#endif  // !_MSC_VER

AckExternBuffer::AckExternBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckExternBuffer::InitAsDefaultInstance() {
}

AckExternBuffer::AckExternBuffer(const AckExternBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckExternBuffer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckExternBuffer::~AckExternBuffer() {
  SharedDtor();
}

void AckExternBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckExternBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckExternBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckExternBuffer_descriptor_;
}

const AckExternBuffer& AckExternBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dress_2eproto();
  return *default_instance_;
}

AckExternBuffer* AckExternBuffer::default_instance_ = NULL;

AckExternBuffer* AckExternBuffer::New() const {
  return new AckExternBuffer;
}

void AckExternBuffer::Clear() {
  bufferdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckExternBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.BufferData bufferdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bufferdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bufferdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bufferdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckExternBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.BufferData bufferdata = 1;
  for (int i = 0; i < this->bufferdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bufferdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckExternBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.BufferData bufferdata = 1;
  for (int i = 0; i < this->bufferdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bufferdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckExternBuffer::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.BufferData bufferdata = 1;
  total_size += 1 * this->bufferdata_size();
  for (int i = 0; i < this->bufferdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bufferdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckExternBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckExternBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckExternBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckExternBuffer::MergeFrom(const AckExternBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  bufferdata_.MergeFrom(from.bufferdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckExternBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckExternBuffer::CopyFrom(const AckExternBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckExternBuffer::IsInitialized() const {

  for (int i = 0; i < bufferdata_size(); i++) {
    if (!this->bufferdata(i).IsInitialized()) return false;
  }
  return true;
}

void AckExternBuffer::Swap(AckExternBuffer* other) {
  if (other != this) {
    bufferdata_.Swap(&other->bufferdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckExternBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckExternBuffer_descriptor_;
  metadata.reflection = AckExternBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBodyDress::kDressFieldNumber;
#endif  // !_MSC_VER

AckBodyDress::AckBodyDress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBodyDress::InitAsDefaultInstance() {
  dress_ = const_cast< ::HelloKittyMsgData::DressData*>(&::HelloKittyMsgData::DressData::default_instance());
}

AckBodyDress::AckBodyDress(const AckBodyDress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBodyDress::SharedCtor() {
  _cached_size_ = 0;
  dress_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBodyDress::~AckBodyDress() {
  SharedDtor();
}

void AckBodyDress::SharedDtor() {
  if (this != default_instance_) {
    delete dress_;
  }
}

void AckBodyDress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBodyDress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBodyDress_descriptor_;
}

const AckBodyDress& AckBodyDress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dress_2eproto();
  return *default_instance_;
}

AckBodyDress* AckBodyDress::default_instance_ = NULL;

AckBodyDress* AckBodyDress::New() const {
  return new AckBodyDress;
}

void AckBodyDress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dress()) {
      if (dress_ != NULL) dress_->::HelloKittyMsgData::DressData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBodyDress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.DressData dress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBodyDress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.DressData dress = 1;
  if (has_dress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBodyDress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.DressData dress = 1;
  if (has_dress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBodyDress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.DressData dress = 1;
    if (has_dress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBodyDress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBodyDress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBodyDress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBodyDress::MergeFrom(const AckBodyDress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dress()) {
      mutable_dress()->::HelloKittyMsgData::DressData::MergeFrom(from.dress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBodyDress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBodyDress::CopyFrom(const AckBodyDress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBodyDress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_dress()) {
    if (!this->dress().IsInitialized()) return false;
  }
  return true;
}

void AckBodyDress::Swap(AckBodyDress* other) {
  if (other != this) {
    std::swap(dress_, other->dress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBodyDress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBodyDress_descriptor_;
  metadata.reflection = AckBodyDress_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
