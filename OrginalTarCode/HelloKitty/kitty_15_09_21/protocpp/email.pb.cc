// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: email.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "email.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* EmailBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEmail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEmail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSendEmail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSendEmail_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckEmail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckEmail_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateEmail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateEmail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpEmail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpEmail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EmailStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EmailOpType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_email_2eproto() {
  protobuf_AddDesc_email_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "email.proto");
  GOOGLE_CHECK(file != NULL);
  EmailBase_descriptor_ = file->message_type(0);
  static const int EmailBase_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailBase, accepter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailBase, acceptername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailBase, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailBase, conten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailBase, item_),
  };
  EmailBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailBase_descriptor_,
      EmailBase::default_instance_,
      EmailBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailBase));
  EmailInfo_descriptor_ = file->message_type(1);
  static const int EmailInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, emailbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, popup_),
  };
  EmailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailInfo_descriptor_,
      EmailInfo::default_instance_,
      EmailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailInfo));
  ReqEmail_descriptor_ = file->message_type(2);
  static const int ReqEmail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEmail, id_),
  };
  ReqEmail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEmail_descriptor_,
      ReqEmail::default_instance_,
      ReqEmail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEmail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEmail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEmail));
  ReqSendEmail_descriptor_ = file->message_type(3);
  static const int ReqSendEmail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendEmail, emailbase_),
  };
  ReqSendEmail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSendEmail_descriptor_,
      ReqSendEmail::default_instance_,
      ReqSendEmail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendEmail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendEmail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSendEmail));
  AckEmail_descriptor_ = file->message_type(4);
  static const int AckEmail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEmail, email_),
  };
  AckEmail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckEmail_descriptor_,
      AckEmail::default_instance_,
      AckEmail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEmail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEmail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckEmail));
  AckUpdateEmail_descriptor_ = file->message_type(5);
  static const int AckUpdateEmail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateEmail, email_),
  };
  AckUpdateEmail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateEmail_descriptor_,
      AckUpdateEmail::default_instance_,
      AckUpdateEmail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateEmail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateEmail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateEmail));
  ReqOpEmail_descriptor_ = file->message_type(6);
  static const int ReqOpEmail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpEmail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpEmail, optype_),
  };
  ReqOpEmail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpEmail_descriptor_,
      ReqOpEmail::default_instance_,
      ReqOpEmail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpEmail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpEmail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpEmail));
  EmailStatusType_descriptor_ = file->enum_type(0);
  EmailOpType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_email_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailBase_descriptor_, &EmailBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailInfo_descriptor_, &EmailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEmail_descriptor_, &ReqEmail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSendEmail_descriptor_, &ReqSendEmail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckEmail_descriptor_, &AckEmail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateEmail_descriptor_, &AckUpdateEmail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpEmail_descriptor_, &ReqOpEmail::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_email_2eproto() {
  delete EmailBase::default_instance_;
  delete EmailBase_reflection_;
  delete EmailInfo::default_instance_;
  delete EmailInfo_reflection_;
  delete ReqEmail::default_instance_;
  delete ReqEmail_reflection_;
  delete ReqSendEmail::default_instance_;
  delete ReqSendEmail_reflection_;
  delete AckEmail::default_instance_;
  delete AckEmail_reflection_;
  delete AckUpdateEmail::default_instance_;
  delete AckUpdateEmail_reflection_;
  delete ReqOpEmail::default_instance_;
  delete ReqOpEmail_reflection_;
}

void protobuf_AddDesc_email_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_trade_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013email.proto\022\021HelloKittyMsgData\032\013trade."
    "proto\"\200\001\n\tEmailBase\022\020\n\010accepter\030\001 \002(\004\022\024\n"
    "\014acceptername\030\002 \002(\t\022\r\n\005title\030\003 \002(\t\022\016\n\006co"
    "nten\030\004 \002(\t\022,\n\004item\030\005 \003(\0132\036.HelloKittyMsg"
    "Data.PbStoreItem\"\312\001\n\tEmailInfo\022\n\n\002id\030\001 \002"
    "(\004\022\016\n\006sender\030\002 \002(\004\022\022\n\nsendername\030\003 \002(\t\022/"
    "\n\temailbase\030\004 \002(\0132\034.HelloKittyMsgData.Em"
    "ailBase\022\022\n\ncreatetime\030\005 \002(\004\0222\n\006status\030\006 "
    "\002(\0162\".HelloKittyMsgData.EmailStatusType\022"
    "\024\n\005popup\030\007 \001(\010:\005false\"\031\n\010ReqEmail\022\r\n\002id\030"
    "\001 \001(\004:\0010\"\?\n\014ReqSendEmail\022/\n\temailbase\030\001 "
    "\002(\0132\034.HelloKittyMsgData.EmailBase\"7\n\010Ack"
    "Email\022+\n\005email\030\001 \003(\0132\034.HelloKittyMsgData"
    ".EmailInfo\"=\n\016AckUpdateEmail\022+\n\005email\030\001 "
    "\002(\0132\034.HelloKittyMsgData.EmailInfo\"H\n\nReq"
    "OpEmail\022\n\n\002id\030\001 \002(\004\022.\n\006optype\030\002 \002(\0162\036.He"
    "lloKittyMsgData.EmailOpType*Z\n\017EmailStat"
    "usType\022\027\n\023Email_Status_Accept\020\000\022\025\n\021Email"
    "_Status_Read\020\001\022\027\n\023Email_Status_Delete\020\002*"
    "\177\n\013EmailOpType\022\021\n\rEmail_Op_Read\020\000\022\026\n\022Ema"
    "il_Status_Close\020\001\022\025\n\021Email_Op_Get_Item\020\002"
    "\022\031\n\025Email_Op_Get_Item_All\020\003\022\023\n\017Email_Op_"
    "Delete\020\004", 888);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "email.proto", &protobuf_RegisterTypes);
  EmailBase::default_instance_ = new EmailBase();
  EmailInfo::default_instance_ = new EmailInfo();
  ReqEmail::default_instance_ = new ReqEmail();
  ReqSendEmail::default_instance_ = new ReqSendEmail();
  AckEmail::default_instance_ = new AckEmail();
  AckUpdateEmail::default_instance_ = new AckUpdateEmail();
  ReqOpEmail::default_instance_ = new ReqOpEmail();
  EmailBase::default_instance_->InitAsDefaultInstance();
  EmailInfo::default_instance_->InitAsDefaultInstance();
  ReqEmail::default_instance_->InitAsDefaultInstance();
  ReqSendEmail::default_instance_->InitAsDefaultInstance();
  AckEmail::default_instance_->InitAsDefaultInstance();
  AckUpdateEmail::default_instance_->InitAsDefaultInstance();
  ReqOpEmail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_email_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_email_2eproto {
  StaticDescriptorInitializer_email_2eproto() {
    protobuf_AddDesc_email_2eproto();
  }
} static_descriptor_initializer_email_2eproto_;
const ::google::protobuf::EnumDescriptor* EmailStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailStatusType_descriptor_;
}
bool EmailStatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EmailOpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailOpType_descriptor_;
}
bool EmailOpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int EmailBase::kAccepterFieldNumber;
const int EmailBase::kAccepternameFieldNumber;
const int EmailBase::kTitleFieldNumber;
const int EmailBase::kContenFieldNumber;
const int EmailBase::kItemFieldNumber;
#endif  // !_MSC_VER

EmailBase::EmailBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmailBase::InitAsDefaultInstance() {
}

EmailBase::EmailBase(const EmailBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmailBase::SharedCtor() {
  _cached_size_ = 0;
  accepter_ = GOOGLE_ULONGLONG(0);
  acceptername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  conten_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailBase::~EmailBase() {
  SharedDtor();
}

void EmailBase::SharedDtor() {
  if (acceptername_ != &::google::protobuf::internal::kEmptyString) {
    delete acceptername_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (conten_ != &::google::protobuf::internal::kEmptyString) {
    delete conten_;
  }
  if (this != default_instance_) {
  }
}

void EmailBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailBase_descriptor_;
}

const EmailBase& EmailBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_email_2eproto();
  return *default_instance_;
}

EmailBase* EmailBase::default_instance_ = NULL;

EmailBase* EmailBase::New() const {
  return new EmailBase;
}

void EmailBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accepter_ = GOOGLE_ULONGLONG(0);
    if (has_acceptername()) {
      if (acceptername_ != &::google::protobuf::internal::kEmptyString) {
        acceptername_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_conten()) {
      if (conten_ != &::google::protobuf::internal::kEmptyString) {
        conten_->clear();
      }
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 accepter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accepter_)));
          set_has_accepter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acceptername;
        break;
      }

      // required string acceptername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceptername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acceptername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acceptername().data(), this->acceptername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_conten;
        break;
      }

      // required string conten = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conten:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conten()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->conten().data(), this->conten().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item;
        break;
      }

      // repeated .HelloKittyMsgData.PbStoreItem item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmailBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 accepter = 1;
  if (has_accepter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accepter(), output);
  }

  // required string acceptername = 2;
  if (has_acceptername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptername().data(), this->acceptername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acceptername(), output);
  }

  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // required string conten = 4;
  if (has_conten()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conten().data(), this->conten().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->conten(), output);
  }

  // repeated .HelloKittyMsgData.PbStoreItem item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmailBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 accepter = 1;
  if (has_accepter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accepter(), target);
  }

  // required string acceptername = 2;
  if (has_acceptername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptername().data(), this->acceptername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acceptername(), target);
  }

  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // required string conten = 4;
  if (has_conten()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conten().data(), this->conten().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->conten(), target);
  }

  // repeated .HelloKittyMsgData.PbStoreItem item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmailBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 accepter = 1;
    if (has_accepter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accepter());
    }

    // required string acceptername = 2;
    if (has_acceptername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acceptername());
    }

    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string conten = 4;
    if (has_conten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conten());
    }

  }
  // repeated .HelloKittyMsgData.PbStoreItem item = 5;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailBase::MergeFrom(const EmailBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accepter()) {
      set_accepter(from.accepter());
    }
    if (from.has_acceptername()) {
      set_acceptername(from.acceptername());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_conten()) {
      set_conten(from.conten());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailBase::CopyFrom(const EmailBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void EmailBase::Swap(EmailBase* other) {
  if (other != this) {
    std::swap(accepter_, other->accepter_);
    std::swap(acceptername_, other->acceptername_);
    std::swap(title_, other->title_);
    std::swap(conten_, other->conten_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailBase_descriptor_;
  metadata.reflection = EmailBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmailInfo::kIdFieldNumber;
const int EmailInfo::kSenderFieldNumber;
const int EmailInfo::kSendernameFieldNumber;
const int EmailInfo::kEmailbaseFieldNumber;
const int EmailInfo::kCreatetimeFieldNumber;
const int EmailInfo::kStatusFieldNumber;
const int EmailInfo::kPopupFieldNumber;
#endif  // !_MSC_VER

EmailInfo::EmailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmailInfo::InitAsDefaultInstance() {
  emailbase_ = const_cast< ::HelloKittyMsgData::EmailBase*>(&::HelloKittyMsgData::EmailBase::default_instance());
}

EmailInfo::EmailInfo(const EmailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmailInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  sender_ = GOOGLE_ULONGLONG(0);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emailbase_ = NULL;
  createtime_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  popup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailInfo::~EmailInfo() {
  SharedDtor();
}

void EmailInfo::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (this != default_instance_) {
    delete emailbase_;
  }
}

void EmailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailInfo_descriptor_;
}

const EmailInfo& EmailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_email_2eproto();
  return *default_instance_;
}

EmailInfo* EmailInfo::default_instance_ = NULL;

EmailInfo* EmailInfo::New() const {
  return new EmailInfo;
}

void EmailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    sender_ = GOOGLE_ULONGLONG(0);
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    if (has_emailbase()) {
      if (emailbase_ != NULL) emailbase_->::HelloKittyMsgData::EmailBase::Clear();
    }
    createtime_ = GOOGLE_ULONGLONG(0);
    status_ = 0;
    popup_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sender;
        break;
      }

      // required uint64 sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_)));
          set_has_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sendername;
        break;
      }

      // required string sendername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_emailbase;
        break;
      }

      // required .HelloKittyMsgData.EmailBase emailbase = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emailbase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emailbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // required uint64 createtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required .HelloKittyMsgData.EmailStatusType status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::EmailStatusType_IsValid(value)) {
            set_status(static_cast< ::HelloKittyMsgData::EmailStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_popup;
        break;
      }

      // optional bool popup = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &popup_)));
          set_has_popup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint64 sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sender(), output);
  }

  // required string sendername = 3;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sendername(), output);
  }

  // required .HelloKittyMsgData.EmailBase emailbase = 4;
  if (has_emailbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->emailbase(), output);
  }

  // required uint64 createtime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->createtime(), output);
  }

  // required .HelloKittyMsgData.EmailStatusType status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // optional bool popup = 7 [default = false];
  if (has_popup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->popup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint64 sender = 2;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sender(), target);
  }

  // required string sendername = 3;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sendername(), target);
  }

  // required .HelloKittyMsgData.EmailBase emailbase = 4;
  if (has_emailbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->emailbase(), target);
  }

  // required uint64 createtime = 5;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->createtime(), target);
  }

  // required .HelloKittyMsgData.EmailStatusType status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // optional bool popup = 7 [default = false];
  if (has_popup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->popup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required uint64 sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sender());
    }

    // required string sendername = 3;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // required .HelloKittyMsgData.EmailBase emailbase = 4;
    if (has_emailbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emailbase());
    }

    // required uint64 createtime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // required .HelloKittyMsgData.EmailStatusType status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional bool popup = 7 [default = false];
    if (has_popup()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailInfo::MergeFrom(const EmailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_emailbase()) {
      mutable_emailbase()->::HelloKittyMsgData::EmailBase::MergeFrom(from.emailbase());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_popup()) {
      set_popup(from.popup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailInfo::CopyFrom(const EmailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_emailbase()) {
    if (!this->emailbase().IsInitialized()) return false;
  }
  return true;
}

void EmailInfo::Swap(EmailInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sender_, other->sender_);
    std::swap(sendername_, other->sendername_);
    std::swap(emailbase_, other->emailbase_);
    std::swap(createtime_, other->createtime_);
    std::swap(status_, other->status_);
    std::swap(popup_, other->popup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailInfo_descriptor_;
  metadata.reflection = EmailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqEmail::kIdFieldNumber;
#endif  // !_MSC_VER

ReqEmail::ReqEmail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEmail::InitAsDefaultInstance() {
}

ReqEmail::ReqEmail(const ReqEmail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEmail::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEmail::~ReqEmail() {
  SharedDtor();
}

void ReqEmail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEmail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEmail_descriptor_;
}

const ReqEmail& ReqEmail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_email_2eproto();
  return *default_instance_;
}

ReqEmail* ReqEmail::default_instance_ = NULL;

ReqEmail* ReqEmail::New() const {
  return new ReqEmail;
}

void ReqEmail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEmail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEmail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEmail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEmail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEmail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEmail::MergeFrom(const ReqEmail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEmail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEmail::CopyFrom(const ReqEmail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEmail::IsInitialized() const {

  return true;
}

void ReqEmail::Swap(ReqEmail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEmail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEmail_descriptor_;
  metadata.reflection = ReqEmail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSendEmail::kEmailbaseFieldNumber;
#endif  // !_MSC_VER

ReqSendEmail::ReqSendEmail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSendEmail::InitAsDefaultInstance() {
  emailbase_ = const_cast< ::HelloKittyMsgData::EmailBase*>(&::HelloKittyMsgData::EmailBase::default_instance());
}

ReqSendEmail::ReqSendEmail(const ReqSendEmail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSendEmail::SharedCtor() {
  _cached_size_ = 0;
  emailbase_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSendEmail::~ReqSendEmail() {
  SharedDtor();
}

void ReqSendEmail::SharedDtor() {
  if (this != default_instance_) {
    delete emailbase_;
  }
}

void ReqSendEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSendEmail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSendEmail_descriptor_;
}

const ReqSendEmail& ReqSendEmail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_email_2eproto();
  return *default_instance_;
}

ReqSendEmail* ReqSendEmail::default_instance_ = NULL;

ReqSendEmail* ReqSendEmail::New() const {
  return new ReqSendEmail;
}

void ReqSendEmail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_emailbase()) {
      if (emailbase_ != NULL) emailbase_->::HelloKittyMsgData::EmailBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSendEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.EmailBase emailbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emailbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSendEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.EmailBase emailbase = 1;
  if (has_emailbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->emailbase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSendEmail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.EmailBase emailbase = 1;
  if (has_emailbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->emailbase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSendEmail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.EmailBase emailbase = 1;
    if (has_emailbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emailbase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSendEmail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSendEmail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSendEmail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSendEmail::MergeFrom(const ReqSendEmail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emailbase()) {
      mutable_emailbase()->::HelloKittyMsgData::EmailBase::MergeFrom(from.emailbase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSendEmail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendEmail::CopyFrom(const ReqSendEmail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendEmail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_emailbase()) {
    if (!this->emailbase().IsInitialized()) return false;
  }
  return true;
}

void ReqSendEmail::Swap(ReqSendEmail* other) {
  if (other != this) {
    std::swap(emailbase_, other->emailbase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSendEmail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSendEmail_descriptor_;
  metadata.reflection = ReqSendEmail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckEmail::kEmailFieldNumber;
#endif  // !_MSC_VER

AckEmail::AckEmail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckEmail::InitAsDefaultInstance() {
}

AckEmail::AckEmail(const AckEmail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckEmail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckEmail::~AckEmail() {
  SharedDtor();
}

void AckEmail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEmail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckEmail_descriptor_;
}

const AckEmail& AckEmail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_email_2eproto();
  return *default_instance_;
}

AckEmail* AckEmail::default_instance_ = NULL;

AckEmail* AckEmail::New() const {
  return new AckEmail;
}

void AckEmail::Clear() {
  email_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.EmailInfo email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_email;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.EmailInfo email = 1;
  for (int i = 0; i < this->email_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->email(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckEmail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.EmailInfo email = 1;
  for (int i = 0; i < this->email_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->email(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckEmail::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.EmailInfo email = 1;
  total_size += 1 * this->email_size();
  for (int i = 0; i < this->email_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->email(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEmail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckEmail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckEmail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckEmail::MergeFrom(const AckEmail& from) {
  GOOGLE_CHECK_NE(&from, this);
  email_.MergeFrom(from.email_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckEmail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEmail::CopyFrom(const AckEmail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEmail::IsInitialized() const {

  for (int i = 0; i < email_size(); i++) {
    if (!this->email(i).IsInitialized()) return false;
  }
  return true;
}

void AckEmail::Swap(AckEmail* other) {
  if (other != this) {
    email_.Swap(&other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckEmail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckEmail_descriptor_;
  metadata.reflection = AckEmail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateEmail::kEmailFieldNumber;
#endif  // !_MSC_VER

AckUpdateEmail::AckUpdateEmail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateEmail::InitAsDefaultInstance() {
  email_ = const_cast< ::HelloKittyMsgData::EmailInfo*>(&::HelloKittyMsgData::EmailInfo::default_instance());
}

AckUpdateEmail::AckUpdateEmail(const AckUpdateEmail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateEmail::SharedCtor() {
  _cached_size_ = 0;
  email_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateEmail::~AckUpdateEmail() {
  SharedDtor();
}

void AckUpdateEmail::SharedDtor() {
  if (this != default_instance_) {
    delete email_;
  }
}

void AckUpdateEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateEmail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateEmail_descriptor_;
}

const AckUpdateEmail& AckUpdateEmail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_email_2eproto();
  return *default_instance_;
}

AckUpdateEmail* AckUpdateEmail::default_instance_ = NULL;

AckUpdateEmail* AckUpdateEmail::New() const {
  return new AckUpdateEmail;
}

void AckUpdateEmail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email()) {
      if (email_ != NULL) email_->::HelloKittyMsgData::EmailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.EmailInfo email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.EmailInfo email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateEmail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.EmailInfo email = 1;
  if (has_email()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateEmail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.EmailInfo email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->email());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateEmail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateEmail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateEmail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateEmail::MergeFrom(const AckUpdateEmail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      mutable_email()->::HelloKittyMsgData::EmailInfo::MergeFrom(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateEmail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateEmail::CopyFrom(const AckUpdateEmail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateEmail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_email()) {
    if (!this->email().IsInitialized()) return false;
  }
  return true;
}

void AckUpdateEmail::Swap(AckUpdateEmail* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateEmail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateEmail_descriptor_;
  metadata.reflection = AckUpdateEmail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpEmail::kIdFieldNumber;
const int ReqOpEmail::kOptypeFieldNumber;
#endif  // !_MSC_VER

ReqOpEmail::ReqOpEmail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpEmail::InitAsDefaultInstance() {
}

ReqOpEmail::ReqOpEmail(const ReqOpEmail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpEmail::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpEmail::~ReqOpEmail() {
  SharedDtor();
}

void ReqOpEmail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpEmail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpEmail_descriptor_;
}

const ReqOpEmail& ReqOpEmail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_email_2eproto();
  return *default_instance_;
}

ReqOpEmail* ReqOpEmail::default_instance_ = NULL;

ReqOpEmail* ReqOpEmail::New() const {
  return new ReqOpEmail;
}

void ReqOpEmail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    optype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_optype;
        break;
      }

      // required .HelloKittyMsgData.EmailOpType optype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::EmailOpType_IsValid(value)) {
            set_optype(static_cast< ::HelloKittyMsgData::EmailOpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required .HelloKittyMsgData.EmailOpType optype = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpEmail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required .HelloKittyMsgData.EmailOpType optype = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpEmail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required .HelloKittyMsgData.EmailOpType optype = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpEmail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpEmail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpEmail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpEmail::MergeFrom(const ReqOpEmail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpEmail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpEmail::CopyFrom(const ReqOpEmail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpEmail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqOpEmail::Swap(ReqOpEmail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpEmail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpEmail_descriptor_;
  metadata.reflection = ReqOpEmail_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
