// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: family.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "family.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* BaseFamilyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseFamilyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetFamilyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetFamilyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqGetFamilyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqGetFamilyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAddFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAddFamily_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqAddFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqAddFamily_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCancelApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCancelApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqCancelApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqCancelApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCreateFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCreateFamily_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqCreateFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqCreateFamily_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAgreeJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAgreeJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqAgreeJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqAgreeJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* FamilyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FamilyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* FamilyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FamilyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqselfFamilyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqselfFamilyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqselfFamilyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqselfFamilyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqQuitFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqQuitFamily_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqQuitFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqQuitFamily_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUpdateOtherFamilyJob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUpdateOtherFamilyJob_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateOtherFamilyJob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateOtherFamilyJob_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqKickFamilyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqKickFamilyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqKickFamilyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqKickFamilyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSetFamilyBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSetFamilyBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqSetFamilyBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqSetFamilyBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqFamilyRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqFamilyRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqFamilyRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqFamilyRanking_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FamilyPublicType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FamilyJob_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FamilyOpResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_family_2eproto() {
  protobuf_AddDesc_family_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "family.proto");
  GOOGLE_CHECK(file != NULL);
  BaseFamilyInfo_descriptor_ = file->message_type(0);
  static const int BaseFamilyInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, familyicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, personnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, pulictype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, lowlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, highlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, familylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, lastranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, familynotice_),
  };
  BaseFamilyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseFamilyInfo_descriptor_,
      BaseFamilyInfo::default_instance_,
      BaseFamilyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFamilyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseFamilyInfo));
  ReqGetFamilyList_descriptor_ = file->message_type(1);
  static const int ReqGetFamilyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetFamilyList, familyid_),
  };
  ReqGetFamilyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetFamilyList_descriptor_,
      ReqGetFamilyList::default_instance_,
      ReqGetFamilyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetFamilyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetFamilyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetFamilyList));
  AckReqGetFamilyList_descriptor_ = file->message_type(2);
  static const int AckReqGetFamilyList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqGetFamilyList, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqGetFamilyList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqGetFamilyList, vecfamily_),
  };
  AckReqGetFamilyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqGetFamilyList_descriptor_,
      AckReqGetFamilyList::default_instance_,
      AckReqGetFamilyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqGetFamilyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqGetFamilyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqGetFamilyList));
  ReqAddFamily_descriptor_ = file->message_type(3);
  static const int ReqAddFamily_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddFamily, familyid_),
  };
  ReqAddFamily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAddFamily_descriptor_,
      ReqAddFamily::default_instance_,
      ReqAddFamily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddFamily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAddFamily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAddFamily));
  AckReqAddFamily_descriptor_ = file->message_type(4);
  static const int AckReqAddFamily_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAddFamily, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAddFamily, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAddFamily, familyname_),
  };
  AckReqAddFamily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqAddFamily_descriptor_,
      AckReqAddFamily::default_instance_,
      AckReqAddFamily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAddFamily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAddFamily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqAddFamily));
  ReqCancelApply_descriptor_ = file->message_type(5);
  static const int ReqCancelApply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelApply, familyid_),
  };
  ReqCancelApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCancelApply_descriptor_,
      ReqCancelApply::default_instance_,
      ReqCancelApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCancelApply));
  AckReqCancelApply_descriptor_ = file->message_type(6);
  static const int AckReqCancelApply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCancelApply, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCancelApply, result_),
  };
  AckReqCancelApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqCancelApply_descriptor_,
      AckReqCancelApply::default_instance_,
      AckReqCancelApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCancelApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCancelApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqCancelApply));
  ReqCreateFamily_descriptor_ = file->message_type(7);
  static const int ReqCreateFamily_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateFamily, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateFamily, familyicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateFamily, pulictype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateFamily, lowlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateFamily, highlevel_),
  };
  ReqCreateFamily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCreateFamily_descriptor_,
      ReqCreateFamily::default_instance_,
      ReqCreateFamily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateFamily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateFamily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCreateFamily));
  AckReqCreateFamily_descriptor_ = file->message_type(8);
  static const int AckReqCreateFamily_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCreateFamily, result_),
  };
  AckReqCreateFamily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqCreateFamily_descriptor_,
      AckReqCreateFamily::default_instance_,
      AckReqCreateFamily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCreateFamily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCreateFamily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqCreateFamily));
  ReqAgreeJoin_descriptor_ = file->message_type(9);
  static const int ReqAgreeJoin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgreeJoin, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgreeJoin, isagree_),
  };
  ReqAgreeJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAgreeJoin_descriptor_,
      ReqAgreeJoin::default_instance_,
      ReqAgreeJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgreeJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAgreeJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAgreeJoin));
  AckReqAgreeJoin_descriptor_ = file->message_type(10);
  static const int AckReqAgreeJoin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAgreeJoin, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAgreeJoin, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAgreeJoin, isagree_),
  };
  AckReqAgreeJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqAgreeJoin_descriptor_,
      AckReqAgreeJoin::default_instance_,
      AckReqAgreeJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAgreeJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAgreeJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqAgreeJoin));
  FamilyMember_descriptor_ = file->message_type(11);
  static const int FamilyMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMember, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMember, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMember, job_),
  };
  FamilyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FamilyMember_descriptor_,
      FamilyMember::default_instance_,
      FamilyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FamilyMember));
  FamilyInfo_descriptor_ = file->message_type(12);
  static const int FamilyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyInfo, vecmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyInfo, vecappy_),
  };
  FamilyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FamilyInfo_descriptor_,
      FamilyInfo::default_instance_,
      FamilyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FamilyInfo));
  ReqselfFamilyInfo_descriptor_ = file->message_type(13);
  static const int ReqselfFamilyInfo_offsets_[1] = {
  };
  ReqselfFamilyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqselfFamilyInfo_descriptor_,
      ReqselfFamilyInfo::default_instance_,
      ReqselfFamilyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqselfFamilyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqselfFamilyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqselfFamilyInfo));
  AckReqselfFamilyInfo_descriptor_ = file->message_type(14);
  static const int AckReqselfFamilyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqselfFamilyInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqselfFamilyInfo, selfinfo_),
  };
  AckReqselfFamilyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqselfFamilyInfo_descriptor_,
      AckReqselfFamilyInfo::default_instance_,
      AckReqselfFamilyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqselfFamilyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqselfFamilyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqselfFamilyInfo));
  ReqQuitFamily_descriptor_ = file->message_type(15);
  static const int ReqQuitFamily_offsets_[1] = {
  };
  ReqQuitFamily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqQuitFamily_descriptor_,
      ReqQuitFamily::default_instance_,
      ReqQuitFamily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuitFamily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuitFamily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqQuitFamily));
  AckReqQuitFamily_descriptor_ = file->message_type(16);
  static const int AckReqQuitFamily_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqQuitFamily, result_),
  };
  AckReqQuitFamily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqQuitFamily_descriptor_,
      AckReqQuitFamily::default_instance_,
      AckReqQuitFamily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqQuitFamily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqQuitFamily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqQuitFamily));
  ReqUpdateOtherFamilyJob_descriptor_ = file->message_type(17);
  static const int ReqUpdateOtherFamilyJob_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateOtherFamilyJob, charid_),
  };
  ReqUpdateOtherFamilyJob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUpdateOtherFamilyJob_descriptor_,
      ReqUpdateOtherFamilyJob::default_instance_,
      ReqUpdateOtherFamilyJob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateOtherFamilyJob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateOtherFamilyJob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUpdateOtherFamilyJob));
  AckUpdateOtherFamilyJob_descriptor_ = file->message_type(18);
  static const int AckUpdateOtherFamilyJob_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateOtherFamilyJob, result_),
  };
  AckUpdateOtherFamilyJob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateOtherFamilyJob_descriptor_,
      AckUpdateOtherFamilyJob::default_instance_,
      AckUpdateOtherFamilyJob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateOtherFamilyJob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateOtherFamilyJob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateOtherFamilyJob));
  ReqKickFamilyMember_descriptor_ = file->message_type(19);
  static const int ReqKickFamilyMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickFamilyMember, charid_),
  };
  ReqKickFamilyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqKickFamilyMember_descriptor_,
      ReqKickFamilyMember::default_instance_,
      ReqKickFamilyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickFamilyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickFamilyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqKickFamilyMember));
  AckReqKickFamilyMember_descriptor_ = file->message_type(20);
  static const int AckReqKickFamilyMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqKickFamilyMember, result_),
  };
  AckReqKickFamilyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqKickFamilyMember_descriptor_,
      AckReqKickFamilyMember::default_instance_,
      AckReqKickFamilyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqKickFamilyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqKickFamilyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqKickFamilyMember));
  ReqSetFamilyBaseInfo_descriptor_ = file->message_type(21);
  static const int ReqSetFamilyBaseInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFamilyBaseInfo, familyicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFamilyBaseInfo, pulictype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFamilyBaseInfo, lowlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFamilyBaseInfo, highlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFamilyBaseInfo, familynotice_),
  };
  ReqSetFamilyBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSetFamilyBaseInfo_descriptor_,
      ReqSetFamilyBaseInfo::default_instance_,
      ReqSetFamilyBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFamilyBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFamilyBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSetFamilyBaseInfo));
  AckReqSetFamilyBaseInfo_descriptor_ = file->message_type(22);
  static const int AckReqSetFamilyBaseInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqSetFamilyBaseInfo, result_),
  };
  AckReqSetFamilyBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqSetFamilyBaseInfo_descriptor_,
      AckReqSetFamilyBaseInfo::default_instance_,
      AckReqSetFamilyBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqSetFamilyBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqSetFamilyBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqSetFamilyBaseInfo));
  ReqFamilyRanking_descriptor_ = file->message_type(23);
  static const int ReqFamilyRanking_offsets_[1] = {
  };
  ReqFamilyRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqFamilyRanking_descriptor_,
      ReqFamilyRanking::default_instance_,
      ReqFamilyRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFamilyRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFamilyRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqFamilyRanking));
  AckReqFamilyRanking_descriptor_ = file->message_type(24);
  static const int AckReqFamilyRanking_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqFamilyRanking, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqFamilyRanking, vecfamily_),
  };
  AckReqFamilyRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqFamilyRanking_descriptor_,
      AckReqFamilyRanking::default_instance_,
      AckReqFamilyRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqFamilyRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqFamilyRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqFamilyRanking));
  FamilyPublicType_descriptor_ = file->enum_type(0);
  FamilyJob_descriptor_ = file->enum_type(1);
  FamilyOpResult_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_family_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseFamilyInfo_descriptor_, &BaseFamilyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetFamilyList_descriptor_, &ReqGetFamilyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqGetFamilyList_descriptor_, &AckReqGetFamilyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAddFamily_descriptor_, &ReqAddFamily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqAddFamily_descriptor_, &AckReqAddFamily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCancelApply_descriptor_, &ReqCancelApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqCancelApply_descriptor_, &AckReqCancelApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCreateFamily_descriptor_, &ReqCreateFamily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqCreateFamily_descriptor_, &AckReqCreateFamily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAgreeJoin_descriptor_, &ReqAgreeJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqAgreeJoin_descriptor_, &AckReqAgreeJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FamilyMember_descriptor_, &FamilyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FamilyInfo_descriptor_, &FamilyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqselfFamilyInfo_descriptor_, &ReqselfFamilyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqselfFamilyInfo_descriptor_, &AckReqselfFamilyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqQuitFamily_descriptor_, &ReqQuitFamily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqQuitFamily_descriptor_, &AckReqQuitFamily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUpdateOtherFamilyJob_descriptor_, &ReqUpdateOtherFamilyJob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateOtherFamilyJob_descriptor_, &AckUpdateOtherFamilyJob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqKickFamilyMember_descriptor_, &ReqKickFamilyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqKickFamilyMember_descriptor_, &AckReqKickFamilyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSetFamilyBaseInfo_descriptor_, &ReqSetFamilyBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqSetFamilyBaseInfo_descriptor_, &AckReqSetFamilyBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqFamilyRanking_descriptor_, &ReqFamilyRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqFamilyRanking_descriptor_, &AckReqFamilyRanking::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_family_2eproto() {
  delete BaseFamilyInfo::default_instance_;
  delete BaseFamilyInfo_reflection_;
  delete ReqGetFamilyList::default_instance_;
  delete ReqGetFamilyList_reflection_;
  delete AckReqGetFamilyList::default_instance_;
  delete AckReqGetFamilyList_reflection_;
  delete ReqAddFamily::default_instance_;
  delete ReqAddFamily_reflection_;
  delete AckReqAddFamily::default_instance_;
  delete AckReqAddFamily_reflection_;
  delete ReqCancelApply::default_instance_;
  delete ReqCancelApply_reflection_;
  delete AckReqCancelApply::default_instance_;
  delete AckReqCancelApply_reflection_;
  delete ReqCreateFamily::default_instance_;
  delete ReqCreateFamily_reflection_;
  delete AckReqCreateFamily::default_instance_;
  delete AckReqCreateFamily_reflection_;
  delete ReqAgreeJoin::default_instance_;
  delete ReqAgreeJoin_reflection_;
  delete AckReqAgreeJoin::default_instance_;
  delete AckReqAgreeJoin_reflection_;
  delete FamilyMember::default_instance_;
  delete FamilyMember_reflection_;
  delete FamilyInfo::default_instance_;
  delete FamilyInfo_reflection_;
  delete ReqselfFamilyInfo::default_instance_;
  delete ReqselfFamilyInfo_reflection_;
  delete AckReqselfFamilyInfo::default_instance_;
  delete AckReqselfFamilyInfo_reflection_;
  delete ReqQuitFamily::default_instance_;
  delete ReqQuitFamily_reflection_;
  delete AckReqQuitFamily::default_instance_;
  delete AckReqQuitFamily_reflection_;
  delete ReqUpdateOtherFamilyJob::default_instance_;
  delete ReqUpdateOtherFamilyJob_reflection_;
  delete AckUpdateOtherFamilyJob::default_instance_;
  delete AckUpdateOtherFamilyJob_reflection_;
  delete ReqKickFamilyMember::default_instance_;
  delete ReqKickFamilyMember_reflection_;
  delete AckReqKickFamilyMember::default_instance_;
  delete AckReqKickFamilyMember_reflection_;
  delete ReqSetFamilyBaseInfo::default_instance_;
  delete ReqSetFamilyBaseInfo_reflection_;
  delete AckReqSetFamilyBaseInfo::default_instance_;
  delete AckReqSetFamilyBaseInfo_reflection_;
  delete ReqFamilyRanking::default_instance_;
  delete ReqFamilyRanking_reflection_;
  delete AckReqFamilyRanking::default_instance_;
  delete AckReqFamilyRanking_reflection_;
}

void protobuf_AddDesc_family_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014family.proto\022\021HelloKittyMsgData\032\014commo"
    "n.proto\"\261\002\n\016BaseFamilyInfo\022\020\n\010familyid\030\001"
    " \002(\004\022\022\n\nfamilyname\030\002 \002(\t\022\022\n\nfamilyicon\030\003"
    " \002(\r\022\021\n\tpersonnum\030\004 \002(\r\022\020\n\010relation\030\005 \002("
    "\r\0226\n\tpulictype\030\006 \002(\0162#.HelloKittyMsgData"
    ".FamilyPublicType\022\020\n\010lowlevel\030\007 \002(\r\022\021\n\th"
    "ighlevel\030\010 \002(\r\022\022\n\ntotalscore\030\t \002(\r\022\023\n\013fa"
    "milylevel\030\n \002(\r\022\017\n\007ranking\030\013 \002(\r\022\023\n\013last"
    "ranking\030\014 \002(\r\022\024\n\014familynotice\030\r \002(\t\"$\n\020R"
    "eqGetFamilyList\022\020\n\010familyid\030\001 \002(\004\"\220\001\n\023Ac"
    "kReqGetFamilyList\022\020\n\010familyid\030\001 \002(\004\0221\n\006R"
    "esult\030\002 \002(\0162!.HelloKittyMsgData.FamilyOp"
    "Result\0224\n\tvecfamily\030\003 \003(\0132!.HelloKittyMs"
    "gData.BaseFamilyInfo\" \n\014ReqAddFamily\022\020\n\010"
    "familyid\030\001 \002(\004\"l\n\017AckReqAddFamily\022\020\n\010fam"
    "ilyid\030\001 \002(\004\0221\n\006Result\030\002 \002(\0162!.HelloKitty"
    "MsgData.FamilyOpResult\022\024\n\nfamilyname\030\003 \001"
    "(\t:\000\"\"\n\016ReqCancelApply\022\020\n\010familyid\030\001 \002(\004"
    "\"X\n\021AckReqCancelApply\022\020\n\010familyid\030\001 \002(\004\022"
    "1\n\006Result\030\002 \002(\0162!.HelloKittyMsgData.Fami"
    "lyOpResult\"\226\001\n\017ReqCreateFamily\022\022\n\nfamily"
    "name\030\001 \002(\t\022\022\n\nfamilyicon\030\002 \002(\r\0226\n\tpulict"
    "ype\030\003 \002(\0162#.HelloKittyMsgData.FamilyPubl"
    "icType\022\020\n\010lowlevel\030\004 \002(\r\022\021\n\thighlevel\030\005 "
    "\002(\r\"G\n\022AckReqCreateFamily\0221\n\006Result\030\001 \002("
    "\0162!.HelloKittyMsgData.FamilyOpResult\"/\n\014"
    "ReqAgreeJoin\022\016\n\006charid\030\001 \002(\004\022\017\n\007isagree\030"
    "\002 \002(\r\"e\n\017AckReqAgreeJoin\0221\n\006Result\030\001 \002(\016"
    "2!.HelloKittyMsgData.FamilyOpResult\022\016\n\006c"
    "harid\030\002 \002(\004\022\017\n\007isagree\030\003 \002(\r\"u\n\014FamilyMe"
    "mber\022\016\n\006charid\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\r\n\005le"
    "vel\030\003 \002(\r\0228\n\003job\030\004 \001(\0162\034.HelloKittyMsgDa"
    "ta.FamilyJob:\rFamily_Member\"\247\001\n\nFamilyIn"
    "fo\0223\n\010baseinfo\030\001 \002(\0132!.HelloKittyMsgData"
    ".BaseFamilyInfo\0222\n\tvecmember\030\002 \003(\0132\037.Hel"
    "loKittyMsgData.FamilyMember\0220\n\007vecappy\030\003"
    " \003(\0132\037.HelloKittyMsgData.FamilyMember\"\023\n"
    "\021ReqselfFamilyInfo\"z\n\024AckReqselfFamilyIn"
    "fo\0221\n\006Result\030\001 \002(\0162!.HelloKittyMsgData.F"
    "amilyOpResult\022/\n\010selfinfo\030\002 \001(\0132\035.HelloK"
    "ittyMsgData.FamilyInfo\"\017\n\rReqQuitFamily\""
    "E\n\020AckReqQuitFamily\0221\n\006Result\030\001 \002(\0162!.He"
    "lloKittyMsgData.FamilyOpResult\")\n\027ReqUpd"
    "ateOtherFamilyJob\022\016\n\006charid\030\001 \002(\004\"L\n\027Ack"
    "UpdateOtherFamilyJob\0221\n\006Result\030\001 \002(\0162!.H"
    "elloKittyMsgData.FamilyOpResult\"%\n\023ReqKi"
    "ckFamilyMember\022\016\n\006charid\030\001 \002(\004\"K\n\026AckReq"
    "KickFamilyMember\0221\n\006Result\030\001 \002(\0162!.Hello"
    "KittyMsgData.FamilyOpResult\"\235\001\n\024ReqSetFa"
    "milyBaseInfo\022\022\n\nfamilyicon\030\001 \002(\r\0226\n\tpuli"
    "ctype\030\002 \002(\0162#.HelloKittyMsgData.FamilyPu"
    "blicType\022\020\n\010lowlevel\030\003 \002(\r\022\021\n\thighlevel\030"
    "\004 \002(\r\022\024\n\014familynotice\030\005 \002(\t\"L\n\027AckReqSet"
    "FamilyBaseInfo\0221\n\006Result\030\001 \002(\0162!.HelloKi"
    "ttyMsgData.FamilyOpResult\"\022\n\020ReqFamilyRa"
    "nking\"~\n\023AckReqFamilyRanking\0221\n\006Result\030\001"
    " \002(\0162!.HelloKittyMsgData.FamilyOpResult\022"
    "4\n\tvecfamily\030\002 \003(\0132!.HelloKittyMsgData.B"
    "aseFamilyInfo*T\n\020FamilyPublicType\022\020\n\014Pub"
    "licForAll\020\000\022\014\n\010NoPublic\020\001\022\r\n\tNeedapply\020\002"
    "\022\021\n\rMAXPublicType\020\003*1\n\tFamilyJob\022\021\n\rFami"
    "ly_Leader\020\000\022\021\n\rFamily_Member\020\001*\256\006\n\016Famil"
    "yOpResult\022\026\n\022FamilyOpResult_Suc\020\000\022\027\n\023Fam"
    "ilyOpResult_Suc2\020\001\022 \n\034FamilyOpResult_Fam"
    "ilyNoExist\020\002\022\034\n\030FamilyOpResult_HasFamily"
    "\020\003\022\033\n\027FamilyOpResult_ApplyMax\020\004\022 \n\034Famil"
    "yOpResult_NoFamilyBuild\020\005\022\033\n\027FamilyOpRes"
    "ult_HasApply\020\006\022\036\n\032FamilyOpResult_SourceL"
    "imit\020\007\022\033\n\027FamilyOpResult_NoLeader\020\010\022\032\n\026F"
    "amilyOpResult_NoApply\020\t\022\033\n\027FamilyOpResul"
    "t_NoFamily\020\n\022#\n\037FamilyOpResult_LeaderCan"
    "NotQuit\020\013\022\031\n\025FamilyOpResult_OpSelf\020\014\022\036\n\032"
    "FamilyOpResult_NameTooLong\020\r\022\036\n\032FamilyOp"
    "Result_Nameillegal\020\016\022\037\n\033FamilyOpResult_N"
    "oticeToLong\020\017\022 \n\034FamilyOpResult_Noticeil"
    "legal\020\020\022 \n\034FamilyOpResult_LevelLimitErr\020"
    "\021\022\035\n\031FamilyOpResult_FamilyFull\020\022\022\033\n\027Fami"
    "lyOpResult_NoPublic\020\023\022\037\n\033FamilyOpResult_"
    "NameTooShort\020\024\022\031\n\025FamilyOpResult_NoIcon\020"
    "\025\022\037\n\033FamilyOpResult_PublicSetErr\020\026\022\037\n\033Fa"
    "milyOpResult_JoinLevelErr\020\027\022\035\n\031FamilyOpR"
    "esult_ServerBusy\020\030\022\033\n\027FamilyOpResult_Oth"
    "erErr\020\031", 3287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "family.proto", &protobuf_RegisterTypes);
  BaseFamilyInfo::default_instance_ = new BaseFamilyInfo();
  ReqGetFamilyList::default_instance_ = new ReqGetFamilyList();
  AckReqGetFamilyList::default_instance_ = new AckReqGetFamilyList();
  ReqAddFamily::default_instance_ = new ReqAddFamily();
  AckReqAddFamily::default_instance_ = new AckReqAddFamily();
  ReqCancelApply::default_instance_ = new ReqCancelApply();
  AckReqCancelApply::default_instance_ = new AckReqCancelApply();
  ReqCreateFamily::default_instance_ = new ReqCreateFamily();
  AckReqCreateFamily::default_instance_ = new AckReqCreateFamily();
  ReqAgreeJoin::default_instance_ = new ReqAgreeJoin();
  AckReqAgreeJoin::default_instance_ = new AckReqAgreeJoin();
  FamilyMember::default_instance_ = new FamilyMember();
  FamilyInfo::default_instance_ = new FamilyInfo();
  ReqselfFamilyInfo::default_instance_ = new ReqselfFamilyInfo();
  AckReqselfFamilyInfo::default_instance_ = new AckReqselfFamilyInfo();
  ReqQuitFamily::default_instance_ = new ReqQuitFamily();
  AckReqQuitFamily::default_instance_ = new AckReqQuitFamily();
  ReqUpdateOtherFamilyJob::default_instance_ = new ReqUpdateOtherFamilyJob();
  AckUpdateOtherFamilyJob::default_instance_ = new AckUpdateOtherFamilyJob();
  ReqKickFamilyMember::default_instance_ = new ReqKickFamilyMember();
  AckReqKickFamilyMember::default_instance_ = new AckReqKickFamilyMember();
  ReqSetFamilyBaseInfo::default_instance_ = new ReqSetFamilyBaseInfo();
  AckReqSetFamilyBaseInfo::default_instance_ = new AckReqSetFamilyBaseInfo();
  ReqFamilyRanking::default_instance_ = new ReqFamilyRanking();
  AckReqFamilyRanking::default_instance_ = new AckReqFamilyRanking();
  BaseFamilyInfo::default_instance_->InitAsDefaultInstance();
  ReqGetFamilyList::default_instance_->InitAsDefaultInstance();
  AckReqGetFamilyList::default_instance_->InitAsDefaultInstance();
  ReqAddFamily::default_instance_->InitAsDefaultInstance();
  AckReqAddFamily::default_instance_->InitAsDefaultInstance();
  ReqCancelApply::default_instance_->InitAsDefaultInstance();
  AckReqCancelApply::default_instance_->InitAsDefaultInstance();
  ReqCreateFamily::default_instance_->InitAsDefaultInstance();
  AckReqCreateFamily::default_instance_->InitAsDefaultInstance();
  ReqAgreeJoin::default_instance_->InitAsDefaultInstance();
  AckReqAgreeJoin::default_instance_->InitAsDefaultInstance();
  FamilyMember::default_instance_->InitAsDefaultInstance();
  FamilyInfo::default_instance_->InitAsDefaultInstance();
  ReqselfFamilyInfo::default_instance_->InitAsDefaultInstance();
  AckReqselfFamilyInfo::default_instance_->InitAsDefaultInstance();
  ReqQuitFamily::default_instance_->InitAsDefaultInstance();
  AckReqQuitFamily::default_instance_->InitAsDefaultInstance();
  ReqUpdateOtherFamilyJob::default_instance_->InitAsDefaultInstance();
  AckUpdateOtherFamilyJob::default_instance_->InitAsDefaultInstance();
  ReqKickFamilyMember::default_instance_->InitAsDefaultInstance();
  AckReqKickFamilyMember::default_instance_->InitAsDefaultInstance();
  ReqSetFamilyBaseInfo::default_instance_->InitAsDefaultInstance();
  AckReqSetFamilyBaseInfo::default_instance_->InitAsDefaultInstance();
  ReqFamilyRanking::default_instance_->InitAsDefaultInstance();
  AckReqFamilyRanking::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_family_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_family_2eproto {
  StaticDescriptorInitializer_family_2eproto() {
    protobuf_AddDesc_family_2eproto();
  }
} static_descriptor_initializer_family_2eproto_;
const ::google::protobuf::EnumDescriptor* FamilyPublicType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FamilyPublicType_descriptor_;
}
bool FamilyPublicType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FamilyJob_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FamilyJob_descriptor_;
}
bool FamilyJob_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FamilyOpResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FamilyOpResult_descriptor_;
}
bool FamilyOpResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BaseFamilyInfo::kFamilyidFieldNumber;
const int BaseFamilyInfo::kFamilynameFieldNumber;
const int BaseFamilyInfo::kFamilyiconFieldNumber;
const int BaseFamilyInfo::kPersonnumFieldNumber;
const int BaseFamilyInfo::kRelationFieldNumber;
const int BaseFamilyInfo::kPulictypeFieldNumber;
const int BaseFamilyInfo::kLowlevelFieldNumber;
const int BaseFamilyInfo::kHighlevelFieldNumber;
const int BaseFamilyInfo::kTotalscoreFieldNumber;
const int BaseFamilyInfo::kFamilylevelFieldNumber;
const int BaseFamilyInfo::kRankingFieldNumber;
const int BaseFamilyInfo::kLastrankingFieldNumber;
const int BaseFamilyInfo::kFamilynoticeFieldNumber;
#endif  // !_MSC_VER

BaseFamilyInfo::BaseFamilyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseFamilyInfo::InitAsDefaultInstance() {
}

BaseFamilyInfo::BaseFamilyInfo(const BaseFamilyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseFamilyInfo::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = GOOGLE_ULONGLONG(0);
  familyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  familyicon_ = 0u;
  personnum_ = 0u;
  relation_ = 0u;
  pulictype_ = 0;
  lowlevel_ = 0u;
  highlevel_ = 0u;
  totalscore_ = 0u;
  familylevel_ = 0u;
  ranking_ = 0u;
  lastranking_ = 0u;
  familynotice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseFamilyInfo::~BaseFamilyInfo() {
  SharedDtor();
}

void BaseFamilyInfo::SharedDtor() {
  if (familyname_ != &::google::protobuf::internal::kEmptyString) {
    delete familyname_;
  }
  if (familynotice_ != &::google::protobuf::internal::kEmptyString) {
    delete familynotice_;
  }
  if (this != default_instance_) {
  }
}

void BaseFamilyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseFamilyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseFamilyInfo_descriptor_;
}

const BaseFamilyInfo& BaseFamilyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

BaseFamilyInfo* BaseFamilyInfo::default_instance_ = NULL;

BaseFamilyInfo* BaseFamilyInfo::New() const {
  return new BaseFamilyInfo;
}

void BaseFamilyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = GOOGLE_ULONGLONG(0);
    if (has_familyname()) {
      if (familyname_ != &::google::protobuf::internal::kEmptyString) {
        familyname_->clear();
      }
    }
    familyicon_ = 0u;
    personnum_ = 0u;
    relation_ = 0u;
    pulictype_ = 0;
    lowlevel_ = 0u;
    highlevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    totalscore_ = 0u;
    familylevel_ = 0u;
    ranking_ = 0u;
    lastranking_ = 0u;
    if (has_familynotice()) {
      if (familynotice_ != &::google::protobuf::internal::kEmptyString) {
        familynotice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseFamilyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 familyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &familyid_)));
          set_has_familyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_familyname;
        break;
      }

      // required string familyname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_familyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_familyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->familyname().data(), this->familyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_familyicon;
        break;
      }

      // required uint32 familyicon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_familyicon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &familyicon_)));
          set_has_familyicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_personnum;
        break;
      }

      // required uint32 personnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_personnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &personnum_)));
          set_has_personnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_relation;
        break;
      }

      // required uint32 relation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pulictype;
        break;
      }

      // required .HelloKittyMsgData.FamilyPublicType pulictype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pulictype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyPublicType_IsValid(value)) {
            set_pulictype(static_cast< ::HelloKittyMsgData::FamilyPublicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lowlevel;
        break;
      }

      // required uint32 lowlevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lowlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowlevel_)));
          set_has_lowlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_highlevel;
        break;
      }

      // required uint32 highlevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlevel_)));
          set_has_highlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_totalscore;
        break;
      }

      // required uint32 totalscore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_familylevel;
        break;
      }

      // required uint32 familylevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_familylevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &familylevel_)));
          set_has_familylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ranking;
        break;
      }

      // required uint32 ranking = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lastranking;
        break;
      }

      // required uint32 lastranking = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastranking_)));
          set_has_lastranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_familynotice;
        break;
      }

      // required string familynotice = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_familynotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_familynotice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->familynotice().data(), this->familynotice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseFamilyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->familyid(), output);
  }

  // required string familyname = 2;
  if (has_familyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->familyname().data(), this->familyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->familyname(), output);
  }

  // required uint32 familyicon = 3;
  if (has_familyicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->familyicon(), output);
  }

  // required uint32 personnum = 4;
  if (has_personnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->personnum(), output);
  }

  // required uint32 relation = 5;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->relation(), output);
  }

  // required .HelloKittyMsgData.FamilyPublicType pulictype = 6;
  if (has_pulictype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->pulictype(), output);
  }

  // required uint32 lowlevel = 7;
  if (has_lowlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lowlevel(), output);
  }

  // required uint32 highlevel = 8;
  if (has_highlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->highlevel(), output);
  }

  // required uint32 totalscore = 9;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->totalscore(), output);
  }

  // required uint32 familylevel = 10;
  if (has_familylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->familylevel(), output);
  }

  // required uint32 ranking = 11;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ranking(), output);
  }

  // required uint32 lastranking = 12;
  if (has_lastranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->lastranking(), output);
  }

  // required string familynotice = 13;
  if (has_familynotice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->familynotice().data(), this->familynotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->familynotice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseFamilyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->familyid(), target);
  }

  // required string familyname = 2;
  if (has_familyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->familyname().data(), this->familyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->familyname(), target);
  }

  // required uint32 familyicon = 3;
  if (has_familyicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->familyicon(), target);
  }

  // required uint32 personnum = 4;
  if (has_personnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->personnum(), target);
  }

  // required uint32 relation = 5;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->relation(), target);
  }

  // required .HelloKittyMsgData.FamilyPublicType pulictype = 6;
  if (has_pulictype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->pulictype(), target);
  }

  // required uint32 lowlevel = 7;
  if (has_lowlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lowlevel(), target);
  }

  // required uint32 highlevel = 8;
  if (has_highlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->highlevel(), target);
  }

  // required uint32 totalscore = 9;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->totalscore(), target);
  }

  // required uint32 familylevel = 10;
  if (has_familylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->familylevel(), target);
  }

  // required uint32 ranking = 11;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ranking(), target);
  }

  // required uint32 lastranking = 12;
  if (has_lastranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->lastranking(), target);
  }

  // required string familynotice = 13;
  if (has_familynotice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->familynotice().data(), this->familynotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->familynotice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseFamilyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 familyid = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->familyid());
    }

    // required string familyname = 2;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->familyname());
    }

    // required uint32 familyicon = 3;
    if (has_familyicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->familyicon());
    }

    // required uint32 personnum = 4;
    if (has_personnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->personnum());
    }

    // required uint32 relation = 5;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relation());
    }

    // required .HelloKittyMsgData.FamilyPublicType pulictype = 6;
    if (has_pulictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pulictype());
    }

    // required uint32 lowlevel = 7;
    if (has_lowlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowlevel());
    }

    // required uint32 highlevel = 8;
    if (has_highlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 totalscore = 9;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalscore());
    }

    // required uint32 familylevel = 10;
    if (has_familylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->familylevel());
    }

    // required uint32 ranking = 11;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking());
    }

    // required uint32 lastranking = 12;
    if (has_lastranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastranking());
    }

    // required string familynotice = 13;
    if (has_familynotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->familynotice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseFamilyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseFamilyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseFamilyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseFamilyInfo::MergeFrom(const BaseFamilyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_familyid()) {
      set_familyid(from.familyid());
    }
    if (from.has_familyname()) {
      set_familyname(from.familyname());
    }
    if (from.has_familyicon()) {
      set_familyicon(from.familyicon());
    }
    if (from.has_personnum()) {
      set_personnum(from.personnum());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_pulictype()) {
      set_pulictype(from.pulictype());
    }
    if (from.has_lowlevel()) {
      set_lowlevel(from.lowlevel());
    }
    if (from.has_highlevel()) {
      set_highlevel(from.highlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_familylevel()) {
      set_familylevel(from.familylevel());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_lastranking()) {
      set_lastranking(from.lastranking());
    }
    if (from.has_familynotice()) {
      set_familynotice(from.familynotice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseFamilyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseFamilyInfo::CopyFrom(const BaseFamilyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseFamilyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void BaseFamilyInfo::Swap(BaseFamilyInfo* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(familyicon_, other->familyicon_);
    std::swap(personnum_, other->personnum_);
    std::swap(relation_, other->relation_);
    std::swap(pulictype_, other->pulictype_);
    std::swap(lowlevel_, other->lowlevel_);
    std::swap(highlevel_, other->highlevel_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(familylevel_, other->familylevel_);
    std::swap(ranking_, other->ranking_);
    std::swap(lastranking_, other->lastranking_);
    std::swap(familynotice_, other->familynotice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseFamilyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseFamilyInfo_descriptor_;
  metadata.reflection = BaseFamilyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetFamilyList::kFamilyidFieldNumber;
#endif  // !_MSC_VER

ReqGetFamilyList::ReqGetFamilyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetFamilyList::InitAsDefaultInstance() {
}

ReqGetFamilyList::ReqGetFamilyList(const ReqGetFamilyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetFamilyList::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetFamilyList::~ReqGetFamilyList() {
  SharedDtor();
}

void ReqGetFamilyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetFamilyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetFamilyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetFamilyList_descriptor_;
}

const ReqGetFamilyList& ReqGetFamilyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqGetFamilyList* ReqGetFamilyList::default_instance_ = NULL;

ReqGetFamilyList* ReqGetFamilyList::New() const {
  return new ReqGetFamilyList;
}

void ReqGetFamilyList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetFamilyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 familyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &familyid_)));
          set_has_familyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetFamilyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->familyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetFamilyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->familyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetFamilyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 familyid = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->familyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetFamilyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetFamilyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetFamilyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetFamilyList::MergeFrom(const ReqGetFamilyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_familyid()) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetFamilyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetFamilyList::CopyFrom(const ReqGetFamilyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetFamilyList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetFamilyList::Swap(ReqGetFamilyList* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetFamilyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetFamilyList_descriptor_;
  metadata.reflection = ReqGetFamilyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqGetFamilyList::kFamilyidFieldNumber;
const int AckReqGetFamilyList::kResultFieldNumber;
const int AckReqGetFamilyList::kVecfamilyFieldNumber;
#endif  // !_MSC_VER

AckReqGetFamilyList::AckReqGetFamilyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqGetFamilyList::InitAsDefaultInstance() {
}

AckReqGetFamilyList::AckReqGetFamilyList(const AckReqGetFamilyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqGetFamilyList::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqGetFamilyList::~AckReqGetFamilyList() {
  SharedDtor();
}

void AckReqGetFamilyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqGetFamilyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqGetFamilyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqGetFamilyList_descriptor_;
}

const AckReqGetFamilyList& AckReqGetFamilyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckReqGetFamilyList* AckReqGetFamilyList::default_instance_ = NULL;

AckReqGetFamilyList* AckReqGetFamilyList::New() const {
  return new AckReqGetFamilyList;
}

void AckReqGetFamilyList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = GOOGLE_ULONGLONG(0);
    result_ = 0;
  }
  vecfamily_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqGetFamilyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 familyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &familyid_)));
          set_has_familyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }

      // required .HelloKittyMsgData.FamilyOpResult Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecfamily;
        break;
      }

      // repeated .HelloKittyMsgData.BaseFamilyInfo vecfamily = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecfamily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecfamily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecfamily;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqGetFamilyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->familyid(), output);
  }

  // required .HelloKittyMsgData.FamilyOpResult Result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // repeated .HelloKittyMsgData.BaseFamilyInfo vecfamily = 3;
  for (int i = 0; i < this->vecfamily_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vecfamily(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqGetFamilyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->familyid(), target);
  }

  // required .HelloKittyMsgData.FamilyOpResult Result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // repeated .HelloKittyMsgData.BaseFamilyInfo vecfamily = 3;
  for (int i = 0; i < this->vecfamily_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vecfamily(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqGetFamilyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 familyid = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->familyid());
    }

    // required .HelloKittyMsgData.FamilyOpResult Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .HelloKittyMsgData.BaseFamilyInfo vecfamily = 3;
  total_size += 1 * this->vecfamily_size();
  for (int i = 0; i < this->vecfamily_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecfamily(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqGetFamilyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqGetFamilyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqGetFamilyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqGetFamilyList::MergeFrom(const AckReqGetFamilyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecfamily_.MergeFrom(from.vecfamily_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_familyid()) {
      set_familyid(from.familyid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqGetFamilyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqGetFamilyList::CopyFrom(const AckReqGetFamilyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqGetFamilyList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < vecfamily_size(); i++) {
    if (!this->vecfamily(i).IsInitialized()) return false;
  }
  return true;
}

void AckReqGetFamilyList::Swap(AckReqGetFamilyList* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(result_, other->result_);
    vecfamily_.Swap(&other->vecfamily_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqGetFamilyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqGetFamilyList_descriptor_;
  metadata.reflection = AckReqGetFamilyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAddFamily::kFamilyidFieldNumber;
#endif  // !_MSC_VER

ReqAddFamily::ReqAddFamily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAddFamily::InitAsDefaultInstance() {
}

ReqAddFamily::ReqAddFamily(const ReqAddFamily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAddFamily::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAddFamily::~ReqAddFamily() {
  SharedDtor();
}

void ReqAddFamily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAddFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAddFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAddFamily_descriptor_;
}

const ReqAddFamily& ReqAddFamily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqAddFamily* ReqAddFamily::default_instance_ = NULL;

ReqAddFamily* ReqAddFamily::New() const {
  return new ReqAddFamily;
}

void ReqAddFamily::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAddFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 familyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &familyid_)));
          set_has_familyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAddFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->familyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAddFamily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->familyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAddFamily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 familyid = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->familyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAddFamily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAddFamily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAddFamily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAddFamily::MergeFrom(const ReqAddFamily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_familyid()) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAddFamily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAddFamily::CopyFrom(const ReqAddFamily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAddFamily::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAddFamily::Swap(ReqAddFamily* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAddFamily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAddFamily_descriptor_;
  metadata.reflection = ReqAddFamily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqAddFamily::kFamilyidFieldNumber;
const int AckReqAddFamily::kResultFieldNumber;
const int AckReqAddFamily::kFamilynameFieldNumber;
#endif  // !_MSC_VER

AckReqAddFamily::AckReqAddFamily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqAddFamily::InitAsDefaultInstance() {
}

AckReqAddFamily::AckReqAddFamily(const AckReqAddFamily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqAddFamily::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  familyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqAddFamily::~AckReqAddFamily() {
  SharedDtor();
}

void AckReqAddFamily::SharedDtor() {
  if (familyname_ != &::google::protobuf::internal::kEmptyString) {
    delete familyname_;
  }
  if (this != default_instance_) {
  }
}

void AckReqAddFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqAddFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqAddFamily_descriptor_;
}

const AckReqAddFamily& AckReqAddFamily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckReqAddFamily* AckReqAddFamily::default_instance_ = NULL;

AckReqAddFamily* AckReqAddFamily::New() const {
  return new AckReqAddFamily;
}

void AckReqAddFamily::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = GOOGLE_ULONGLONG(0);
    result_ = 0;
    if (has_familyname()) {
      if (familyname_ != &::google::protobuf::internal::kEmptyString) {
        familyname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqAddFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 familyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &familyid_)));
          set_has_familyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }

      // required .HelloKittyMsgData.FamilyOpResult Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_familyname;
        break;
      }

      // optional string familyname = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_familyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_familyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->familyname().data(), this->familyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqAddFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->familyid(), output);
  }

  // required .HelloKittyMsgData.FamilyOpResult Result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string familyname = 3 [default = ""];
  if (has_familyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->familyname().data(), this->familyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->familyname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqAddFamily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->familyid(), target);
  }

  // required .HelloKittyMsgData.FamilyOpResult Result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string familyname = 3 [default = ""];
  if (has_familyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->familyname().data(), this->familyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->familyname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqAddFamily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 familyid = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->familyid());
    }

    // required .HelloKittyMsgData.FamilyOpResult Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string familyname = 3 [default = ""];
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->familyname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqAddFamily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqAddFamily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqAddFamily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqAddFamily::MergeFrom(const AckReqAddFamily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_familyid()) {
      set_familyid(from.familyid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_familyname()) {
      set_familyname(from.familyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqAddFamily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqAddFamily::CopyFrom(const AckReqAddFamily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqAddFamily::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckReqAddFamily::Swap(AckReqAddFamily* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(result_, other->result_);
    std::swap(familyname_, other->familyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqAddFamily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqAddFamily_descriptor_;
  metadata.reflection = AckReqAddFamily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCancelApply::kFamilyidFieldNumber;
#endif  // !_MSC_VER

ReqCancelApply::ReqCancelApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCancelApply::InitAsDefaultInstance() {
}

ReqCancelApply::ReqCancelApply(const ReqCancelApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCancelApply::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCancelApply::~ReqCancelApply() {
  SharedDtor();
}

void ReqCancelApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCancelApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCancelApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCancelApply_descriptor_;
}

const ReqCancelApply& ReqCancelApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqCancelApply* ReqCancelApply::default_instance_ = NULL;

ReqCancelApply* ReqCancelApply::New() const {
  return new ReqCancelApply;
}

void ReqCancelApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCancelApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 familyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &familyid_)));
          set_has_familyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCancelApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->familyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCancelApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->familyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCancelApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 familyid = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->familyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCancelApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCancelApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCancelApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCancelApply::MergeFrom(const ReqCancelApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_familyid()) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCancelApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCancelApply::CopyFrom(const ReqCancelApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCancelApply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqCancelApply::Swap(ReqCancelApply* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCancelApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCancelApply_descriptor_;
  metadata.reflection = ReqCancelApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqCancelApply::kFamilyidFieldNumber;
const int AckReqCancelApply::kResultFieldNumber;
#endif  // !_MSC_VER

AckReqCancelApply::AckReqCancelApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqCancelApply::InitAsDefaultInstance() {
}

AckReqCancelApply::AckReqCancelApply(const AckReqCancelApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqCancelApply::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqCancelApply::~AckReqCancelApply() {
  SharedDtor();
}

void AckReqCancelApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqCancelApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqCancelApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqCancelApply_descriptor_;
}

const AckReqCancelApply& AckReqCancelApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckReqCancelApply* AckReqCancelApply::default_instance_ = NULL;

AckReqCancelApply* AckReqCancelApply::New() const {
  return new AckReqCancelApply;
}

void AckReqCancelApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = GOOGLE_ULONGLONG(0);
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqCancelApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 familyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &familyid_)));
          set_has_familyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }

      // required .HelloKittyMsgData.FamilyOpResult Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqCancelApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->familyid(), output);
  }

  // required .HelloKittyMsgData.FamilyOpResult Result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqCancelApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 familyid = 1;
  if (has_familyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->familyid(), target);
  }

  // required .HelloKittyMsgData.FamilyOpResult Result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqCancelApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 familyid = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->familyid());
    }

    // required .HelloKittyMsgData.FamilyOpResult Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqCancelApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqCancelApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqCancelApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqCancelApply::MergeFrom(const AckReqCancelApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_familyid()) {
      set_familyid(from.familyid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqCancelApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqCancelApply::CopyFrom(const AckReqCancelApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqCancelApply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckReqCancelApply::Swap(AckReqCancelApply* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqCancelApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqCancelApply_descriptor_;
  metadata.reflection = AckReqCancelApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCreateFamily::kFamilynameFieldNumber;
const int ReqCreateFamily::kFamilyiconFieldNumber;
const int ReqCreateFamily::kPulictypeFieldNumber;
const int ReqCreateFamily::kLowlevelFieldNumber;
const int ReqCreateFamily::kHighlevelFieldNumber;
#endif  // !_MSC_VER

ReqCreateFamily::ReqCreateFamily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCreateFamily::InitAsDefaultInstance() {
}

ReqCreateFamily::ReqCreateFamily(const ReqCreateFamily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCreateFamily::SharedCtor() {
  _cached_size_ = 0;
  familyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  familyicon_ = 0u;
  pulictype_ = 0;
  lowlevel_ = 0u;
  highlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCreateFamily::~ReqCreateFamily() {
  SharedDtor();
}

void ReqCreateFamily::SharedDtor() {
  if (familyname_ != &::google::protobuf::internal::kEmptyString) {
    delete familyname_;
  }
  if (this != default_instance_) {
  }
}

void ReqCreateFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreateFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreateFamily_descriptor_;
}

const ReqCreateFamily& ReqCreateFamily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqCreateFamily* ReqCreateFamily::default_instance_ = NULL;

ReqCreateFamily* ReqCreateFamily::New() const {
  return new ReqCreateFamily;
}

void ReqCreateFamily::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_familyname()) {
      if (familyname_ != &::google::protobuf::internal::kEmptyString) {
        familyname_->clear();
      }
    }
    familyicon_ = 0u;
    pulictype_ = 0;
    lowlevel_ = 0u;
    highlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCreateFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string familyname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_familyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->familyname().data(), this->familyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_familyicon;
        break;
      }

      // required uint32 familyicon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_familyicon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &familyicon_)));
          set_has_familyicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pulictype;
        break;
      }

      // required .HelloKittyMsgData.FamilyPublicType pulictype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pulictype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyPublicType_IsValid(value)) {
            set_pulictype(static_cast< ::HelloKittyMsgData::FamilyPublicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lowlevel;
        break;
      }

      // required uint32 lowlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lowlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowlevel_)));
          set_has_lowlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_highlevel;
        break;
      }

      // required uint32 highlevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlevel_)));
          set_has_highlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCreateFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string familyname = 1;
  if (has_familyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->familyname().data(), this->familyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->familyname(), output);
  }

  // required uint32 familyicon = 2;
  if (has_familyicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->familyicon(), output);
  }

  // required .HelloKittyMsgData.FamilyPublicType pulictype = 3;
  if (has_pulictype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pulictype(), output);
  }

  // required uint32 lowlevel = 4;
  if (has_lowlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lowlevel(), output);
  }

  // required uint32 highlevel = 5;
  if (has_highlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->highlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCreateFamily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string familyname = 1;
  if (has_familyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->familyname().data(), this->familyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->familyname(), target);
  }

  // required uint32 familyicon = 2;
  if (has_familyicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->familyicon(), target);
  }

  // required .HelloKittyMsgData.FamilyPublicType pulictype = 3;
  if (has_pulictype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pulictype(), target);
  }

  // required uint32 lowlevel = 4;
  if (has_lowlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lowlevel(), target);
  }

  // required uint32 highlevel = 5;
  if (has_highlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->highlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCreateFamily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string familyname = 1;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->familyname());
    }

    // required uint32 familyicon = 2;
    if (has_familyicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->familyicon());
    }

    // required .HelloKittyMsgData.FamilyPublicType pulictype = 3;
    if (has_pulictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pulictype());
    }

    // required uint32 lowlevel = 4;
    if (has_lowlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowlevel());
    }

    // required uint32 highlevel = 5;
    if (has_highlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreateFamily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCreateFamily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCreateFamily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCreateFamily::MergeFrom(const ReqCreateFamily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_familyname()) {
      set_familyname(from.familyname());
    }
    if (from.has_familyicon()) {
      set_familyicon(from.familyicon());
    }
    if (from.has_pulictype()) {
      set_pulictype(from.pulictype());
    }
    if (from.has_lowlevel()) {
      set_lowlevel(from.lowlevel());
    }
    if (from.has_highlevel()) {
      set_highlevel(from.highlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCreateFamily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateFamily::CopyFrom(const ReqCreateFamily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateFamily::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ReqCreateFamily::Swap(ReqCreateFamily* other) {
  if (other != this) {
    std::swap(familyname_, other->familyname_);
    std::swap(familyicon_, other->familyicon_);
    std::swap(pulictype_, other->pulictype_);
    std::swap(lowlevel_, other->lowlevel_);
    std::swap(highlevel_, other->highlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCreateFamily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCreateFamily_descriptor_;
  metadata.reflection = ReqCreateFamily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqCreateFamily::kResultFieldNumber;
#endif  // !_MSC_VER

AckReqCreateFamily::AckReqCreateFamily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqCreateFamily::InitAsDefaultInstance() {
}

AckReqCreateFamily::AckReqCreateFamily(const AckReqCreateFamily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqCreateFamily::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqCreateFamily::~AckReqCreateFamily() {
  SharedDtor();
}

void AckReqCreateFamily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqCreateFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqCreateFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqCreateFamily_descriptor_;
}

const AckReqCreateFamily& AckReqCreateFamily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckReqCreateFamily* AckReqCreateFamily::default_instance_ = NULL;

AckReqCreateFamily* AckReqCreateFamily::New() const {
  return new AckReqCreateFamily;
}

void AckReqCreateFamily::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqCreateFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.FamilyOpResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqCreateFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqCreateFamily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqCreateFamily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.FamilyOpResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqCreateFamily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqCreateFamily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqCreateFamily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqCreateFamily::MergeFrom(const AckReqCreateFamily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqCreateFamily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqCreateFamily::CopyFrom(const AckReqCreateFamily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqCreateFamily::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqCreateFamily::Swap(AckReqCreateFamily* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqCreateFamily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqCreateFamily_descriptor_;
  metadata.reflection = AckReqCreateFamily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAgreeJoin::kCharidFieldNumber;
const int ReqAgreeJoin::kIsagreeFieldNumber;
#endif  // !_MSC_VER

ReqAgreeJoin::ReqAgreeJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAgreeJoin::InitAsDefaultInstance() {
}

ReqAgreeJoin::ReqAgreeJoin(const ReqAgreeJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAgreeJoin::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  isagree_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAgreeJoin::~ReqAgreeJoin() {
  SharedDtor();
}

void ReqAgreeJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAgreeJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAgreeJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAgreeJoin_descriptor_;
}

const ReqAgreeJoin& ReqAgreeJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqAgreeJoin* ReqAgreeJoin::default_instance_ = NULL;

ReqAgreeJoin* ReqAgreeJoin::New() const {
  return new ReqAgreeJoin;
}

void ReqAgreeJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    isagree_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAgreeJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isagree;
        break;
      }

      // required uint32 isagree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isagree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAgreeJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 isagree = 2;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAgreeJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 isagree = 2;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAgreeJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 isagree = 2;
    if (has_isagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isagree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAgreeJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAgreeJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAgreeJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAgreeJoin::MergeFrom(const ReqAgreeJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAgreeJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAgreeJoin::CopyFrom(const ReqAgreeJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAgreeJoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqAgreeJoin::Swap(ReqAgreeJoin* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(isagree_, other->isagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAgreeJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAgreeJoin_descriptor_;
  metadata.reflection = ReqAgreeJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqAgreeJoin::kResultFieldNumber;
const int AckReqAgreeJoin::kCharidFieldNumber;
const int AckReqAgreeJoin::kIsagreeFieldNumber;
#endif  // !_MSC_VER

AckReqAgreeJoin::AckReqAgreeJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqAgreeJoin::InitAsDefaultInstance() {
}

AckReqAgreeJoin::AckReqAgreeJoin(const AckReqAgreeJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqAgreeJoin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  isagree_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqAgreeJoin::~AckReqAgreeJoin() {
  SharedDtor();
}

void AckReqAgreeJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqAgreeJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqAgreeJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqAgreeJoin_descriptor_;
}

const AckReqAgreeJoin& AckReqAgreeJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckReqAgreeJoin* AckReqAgreeJoin::default_instance_ = NULL;

AckReqAgreeJoin* AckReqAgreeJoin::New() const {
  return new AckReqAgreeJoin;
}

void AckReqAgreeJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
    isagree_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqAgreeJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.FamilyOpResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isagree;
        break;
      }

      // required uint32 isagree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isagree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqAgreeJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint32 isagree = 3;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqAgreeJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint32 isagree = 3;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqAgreeJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.FamilyOpResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 isagree = 3;
    if (has_isagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isagree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqAgreeJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqAgreeJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqAgreeJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqAgreeJoin::MergeFrom(const AckReqAgreeJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqAgreeJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqAgreeJoin::CopyFrom(const AckReqAgreeJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqAgreeJoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckReqAgreeJoin::Swap(AckReqAgreeJoin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(isagree_, other->isagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqAgreeJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqAgreeJoin_descriptor_;
  metadata.reflection = AckReqAgreeJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FamilyMember::kCharidFieldNumber;
const int FamilyMember::kNameFieldNumber;
const int FamilyMember::kLevelFieldNumber;
const int FamilyMember::kJobFieldNumber;
#endif  // !_MSC_VER

FamilyMember::FamilyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FamilyMember::InitAsDefaultInstance() {
}

FamilyMember::FamilyMember(const FamilyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FamilyMember::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FamilyMember::~FamilyMember() {
  SharedDtor();
}

void FamilyMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FamilyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FamilyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FamilyMember_descriptor_;
}

const FamilyMember& FamilyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

FamilyMember* FamilyMember::default_instance_ = NULL;

FamilyMember* FamilyMember::New() const {
  return new FamilyMember;
}

void FamilyMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FamilyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional .HelloKittyMsgData.FamilyJob job = 4 [default = Family_Member];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyJob_IsValid(value)) {
            set_job(static_cast< ::HelloKittyMsgData::FamilyJob >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FamilyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional .HelloKittyMsgData.FamilyJob job = 4 [default = Family_Member];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FamilyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional .HelloKittyMsgData.FamilyJob job = 4 [default = Family_Member];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FamilyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional .HelloKittyMsgData.FamilyJob job = 4 [default = Family_Member];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FamilyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FamilyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FamilyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FamilyMember::MergeFrom(const FamilyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FamilyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyMember::CopyFrom(const FamilyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FamilyMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FamilyMember::Swap(FamilyMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FamilyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FamilyMember_descriptor_;
  metadata.reflection = FamilyMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FamilyInfo::kBaseinfoFieldNumber;
const int FamilyInfo::kVecmemberFieldNumber;
const int FamilyInfo::kVecappyFieldNumber;
#endif  // !_MSC_VER

FamilyInfo::FamilyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FamilyInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::HelloKittyMsgData::BaseFamilyInfo*>(&::HelloKittyMsgData::BaseFamilyInfo::default_instance());
}

FamilyInfo::FamilyInfo(const FamilyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FamilyInfo::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FamilyInfo::~FamilyInfo() {
  SharedDtor();
}

void FamilyInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void FamilyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FamilyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FamilyInfo_descriptor_;
}

const FamilyInfo& FamilyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

FamilyInfo* FamilyInfo::default_instance_ = NULL;

FamilyInfo* FamilyInfo::New() const {
  return new FamilyInfo;
}

void FamilyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::HelloKittyMsgData::BaseFamilyInfo::Clear();
    }
  }
  vecmember_.Clear();
  vecappy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FamilyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.BaseFamilyInfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecmember;
        break;
      }

      // repeated .HelloKittyMsgData.FamilyMember vecmember = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecmember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecmember;
        if (input->ExpectTag(26)) goto parse_vecappy;
        break;
      }

      // repeated .HelloKittyMsgData.FamilyMember vecappy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecappy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecappy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecappy;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FamilyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.BaseFamilyInfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // repeated .HelloKittyMsgData.FamilyMember vecmember = 2;
  for (int i = 0; i < this->vecmember_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vecmember(i), output);
  }

  // repeated .HelloKittyMsgData.FamilyMember vecappy = 3;
  for (int i = 0; i < this->vecappy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vecappy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FamilyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.BaseFamilyInfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // repeated .HelloKittyMsgData.FamilyMember vecmember = 2;
  for (int i = 0; i < this->vecmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vecmember(i), target);
  }

  // repeated .HelloKittyMsgData.FamilyMember vecappy = 3;
  for (int i = 0; i < this->vecappy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vecappy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FamilyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.BaseFamilyInfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  // repeated .HelloKittyMsgData.FamilyMember vecmember = 2;
  total_size += 1 * this->vecmember_size();
  for (int i = 0; i < this->vecmember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecmember(i));
  }

  // repeated .HelloKittyMsgData.FamilyMember vecappy = 3;
  total_size += 1 * this->vecappy_size();
  for (int i = 0; i < this->vecappy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecappy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FamilyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FamilyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FamilyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FamilyInfo::MergeFrom(const FamilyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecmember_.MergeFrom(from.vecmember_);
  vecappy_.MergeFrom(from.vecappy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::HelloKittyMsgData::BaseFamilyInfo::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FamilyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyInfo::CopyFrom(const FamilyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FamilyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < vecmember_size(); i++) {
    if (!this->vecmember(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vecappy_size(); i++) {
    if (!this->vecappy(i).IsInitialized()) return false;
  }
  return true;
}

void FamilyInfo::Swap(FamilyInfo* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    vecmember_.Swap(&other->vecmember_);
    vecappy_.Swap(&other->vecappy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FamilyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FamilyInfo_descriptor_;
  metadata.reflection = FamilyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqselfFamilyInfo::ReqselfFamilyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqselfFamilyInfo::InitAsDefaultInstance() {
}

ReqselfFamilyInfo::ReqselfFamilyInfo(const ReqselfFamilyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqselfFamilyInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqselfFamilyInfo::~ReqselfFamilyInfo() {
  SharedDtor();
}

void ReqselfFamilyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqselfFamilyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqselfFamilyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqselfFamilyInfo_descriptor_;
}

const ReqselfFamilyInfo& ReqselfFamilyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqselfFamilyInfo* ReqselfFamilyInfo::default_instance_ = NULL;

ReqselfFamilyInfo* ReqselfFamilyInfo::New() const {
  return new ReqselfFamilyInfo;
}

void ReqselfFamilyInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqselfFamilyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqselfFamilyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqselfFamilyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqselfFamilyInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqselfFamilyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqselfFamilyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqselfFamilyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqselfFamilyInfo::MergeFrom(const ReqselfFamilyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqselfFamilyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqselfFamilyInfo::CopyFrom(const ReqselfFamilyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqselfFamilyInfo::IsInitialized() const {

  return true;
}

void ReqselfFamilyInfo::Swap(ReqselfFamilyInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqselfFamilyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqselfFamilyInfo_descriptor_;
  metadata.reflection = ReqselfFamilyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqselfFamilyInfo::kResultFieldNumber;
const int AckReqselfFamilyInfo::kSelfinfoFieldNumber;
#endif  // !_MSC_VER

AckReqselfFamilyInfo::AckReqselfFamilyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqselfFamilyInfo::InitAsDefaultInstance() {
  selfinfo_ = const_cast< ::HelloKittyMsgData::FamilyInfo*>(&::HelloKittyMsgData::FamilyInfo::default_instance());
}

AckReqselfFamilyInfo::AckReqselfFamilyInfo(const AckReqselfFamilyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqselfFamilyInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  selfinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqselfFamilyInfo::~AckReqselfFamilyInfo() {
  SharedDtor();
}

void AckReqselfFamilyInfo::SharedDtor() {
  if (this != default_instance_) {
    delete selfinfo_;
  }
}

void AckReqselfFamilyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqselfFamilyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqselfFamilyInfo_descriptor_;
}

const AckReqselfFamilyInfo& AckReqselfFamilyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckReqselfFamilyInfo* AckReqselfFamilyInfo::default_instance_ = NULL;

AckReqselfFamilyInfo* AckReqselfFamilyInfo::New() const {
  return new AckReqselfFamilyInfo;
}

void AckReqselfFamilyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_selfinfo()) {
      if (selfinfo_ != NULL) selfinfo_->::HelloKittyMsgData::FamilyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqselfFamilyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.FamilyOpResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfinfo;
        break;
      }

      // optional .HelloKittyMsgData.FamilyInfo selfinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqselfFamilyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .HelloKittyMsgData.FamilyInfo selfinfo = 2;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqselfFamilyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .HelloKittyMsgData.FamilyInfo selfinfo = 2;
  if (has_selfinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqselfFamilyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.FamilyOpResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .HelloKittyMsgData.FamilyInfo selfinfo = 2;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqselfFamilyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqselfFamilyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqselfFamilyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqselfFamilyInfo::MergeFrom(const AckReqselfFamilyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_selfinfo()) {
      mutable_selfinfo()->::HelloKittyMsgData::FamilyInfo::MergeFrom(from.selfinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqselfFamilyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqselfFamilyInfo::CopyFrom(const AckReqselfFamilyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqselfFamilyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfinfo()) {
    if (!this->selfinfo().IsInitialized()) return false;
  }
  return true;
}

void AckReqselfFamilyInfo::Swap(AckReqselfFamilyInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(selfinfo_, other->selfinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqselfFamilyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqselfFamilyInfo_descriptor_;
  metadata.reflection = AckReqselfFamilyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqQuitFamily::ReqQuitFamily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqQuitFamily::InitAsDefaultInstance() {
}

ReqQuitFamily::ReqQuitFamily(const ReqQuitFamily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqQuitFamily::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqQuitFamily::~ReqQuitFamily() {
  SharedDtor();
}

void ReqQuitFamily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqQuitFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqQuitFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqQuitFamily_descriptor_;
}

const ReqQuitFamily& ReqQuitFamily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqQuitFamily* ReqQuitFamily::default_instance_ = NULL;

ReqQuitFamily* ReqQuitFamily::New() const {
  return new ReqQuitFamily;
}

void ReqQuitFamily::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqQuitFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqQuitFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqQuitFamily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqQuitFamily::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqQuitFamily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqQuitFamily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqQuitFamily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqQuitFamily::MergeFrom(const ReqQuitFamily& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqQuitFamily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQuitFamily::CopyFrom(const ReqQuitFamily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQuitFamily::IsInitialized() const {

  return true;
}

void ReqQuitFamily::Swap(ReqQuitFamily* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqQuitFamily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqQuitFamily_descriptor_;
  metadata.reflection = ReqQuitFamily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqQuitFamily::kResultFieldNumber;
#endif  // !_MSC_VER

AckReqQuitFamily::AckReqQuitFamily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqQuitFamily::InitAsDefaultInstance() {
}

AckReqQuitFamily::AckReqQuitFamily(const AckReqQuitFamily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqQuitFamily::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqQuitFamily::~AckReqQuitFamily() {
  SharedDtor();
}

void AckReqQuitFamily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqQuitFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqQuitFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqQuitFamily_descriptor_;
}

const AckReqQuitFamily& AckReqQuitFamily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckReqQuitFamily* AckReqQuitFamily::default_instance_ = NULL;

AckReqQuitFamily* AckReqQuitFamily::New() const {
  return new AckReqQuitFamily;
}

void AckReqQuitFamily::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqQuitFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.FamilyOpResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqQuitFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqQuitFamily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqQuitFamily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.FamilyOpResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqQuitFamily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqQuitFamily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqQuitFamily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqQuitFamily::MergeFrom(const AckReqQuitFamily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqQuitFamily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqQuitFamily::CopyFrom(const AckReqQuitFamily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqQuitFamily::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqQuitFamily::Swap(AckReqQuitFamily* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqQuitFamily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqQuitFamily_descriptor_;
  metadata.reflection = AckReqQuitFamily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUpdateOtherFamilyJob::kCharidFieldNumber;
#endif  // !_MSC_VER

ReqUpdateOtherFamilyJob::ReqUpdateOtherFamilyJob()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqUpdateOtherFamilyJob::InitAsDefaultInstance() {
}

ReqUpdateOtherFamilyJob::ReqUpdateOtherFamilyJob(const ReqUpdateOtherFamilyJob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqUpdateOtherFamilyJob::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUpdateOtherFamilyJob::~ReqUpdateOtherFamilyJob() {
  SharedDtor();
}

void ReqUpdateOtherFamilyJob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqUpdateOtherFamilyJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUpdateOtherFamilyJob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUpdateOtherFamilyJob_descriptor_;
}

const ReqUpdateOtherFamilyJob& ReqUpdateOtherFamilyJob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqUpdateOtherFamilyJob* ReqUpdateOtherFamilyJob::default_instance_ = NULL;

ReqUpdateOtherFamilyJob* ReqUpdateOtherFamilyJob::New() const {
  return new ReqUpdateOtherFamilyJob;
}

void ReqUpdateOtherFamilyJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUpdateOtherFamilyJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqUpdateOtherFamilyJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqUpdateOtherFamilyJob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqUpdateOtherFamilyJob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUpdateOtherFamilyJob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUpdateOtherFamilyJob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUpdateOtherFamilyJob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUpdateOtherFamilyJob::MergeFrom(const ReqUpdateOtherFamilyJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUpdateOtherFamilyJob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateOtherFamilyJob::CopyFrom(const ReqUpdateOtherFamilyJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateOtherFamilyJob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqUpdateOtherFamilyJob::Swap(ReqUpdateOtherFamilyJob* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUpdateOtherFamilyJob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUpdateOtherFamilyJob_descriptor_;
  metadata.reflection = ReqUpdateOtherFamilyJob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateOtherFamilyJob::kResultFieldNumber;
#endif  // !_MSC_VER

AckUpdateOtherFamilyJob::AckUpdateOtherFamilyJob()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateOtherFamilyJob::InitAsDefaultInstance() {
}

AckUpdateOtherFamilyJob::AckUpdateOtherFamilyJob(const AckUpdateOtherFamilyJob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateOtherFamilyJob::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateOtherFamilyJob::~AckUpdateOtherFamilyJob() {
  SharedDtor();
}

void AckUpdateOtherFamilyJob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateOtherFamilyJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateOtherFamilyJob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateOtherFamilyJob_descriptor_;
}

const AckUpdateOtherFamilyJob& AckUpdateOtherFamilyJob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckUpdateOtherFamilyJob* AckUpdateOtherFamilyJob::default_instance_ = NULL;

AckUpdateOtherFamilyJob* AckUpdateOtherFamilyJob::New() const {
  return new AckUpdateOtherFamilyJob;
}

void AckUpdateOtherFamilyJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateOtherFamilyJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.FamilyOpResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateOtherFamilyJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateOtherFamilyJob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateOtherFamilyJob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.FamilyOpResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateOtherFamilyJob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateOtherFamilyJob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateOtherFamilyJob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateOtherFamilyJob::MergeFrom(const AckUpdateOtherFamilyJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateOtherFamilyJob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateOtherFamilyJob::CopyFrom(const AckUpdateOtherFamilyJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateOtherFamilyJob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUpdateOtherFamilyJob::Swap(AckUpdateOtherFamilyJob* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateOtherFamilyJob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateOtherFamilyJob_descriptor_;
  metadata.reflection = AckUpdateOtherFamilyJob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqKickFamilyMember::kCharidFieldNumber;
#endif  // !_MSC_VER

ReqKickFamilyMember::ReqKickFamilyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqKickFamilyMember::InitAsDefaultInstance() {
}

ReqKickFamilyMember::ReqKickFamilyMember(const ReqKickFamilyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqKickFamilyMember::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqKickFamilyMember::~ReqKickFamilyMember() {
  SharedDtor();
}

void ReqKickFamilyMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqKickFamilyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqKickFamilyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqKickFamilyMember_descriptor_;
}

const ReqKickFamilyMember& ReqKickFamilyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqKickFamilyMember* ReqKickFamilyMember::default_instance_ = NULL;

ReqKickFamilyMember* ReqKickFamilyMember::New() const {
  return new ReqKickFamilyMember;
}

void ReqKickFamilyMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqKickFamilyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqKickFamilyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqKickFamilyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqKickFamilyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqKickFamilyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqKickFamilyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqKickFamilyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqKickFamilyMember::MergeFrom(const ReqKickFamilyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqKickFamilyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqKickFamilyMember::CopyFrom(const ReqKickFamilyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqKickFamilyMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqKickFamilyMember::Swap(ReqKickFamilyMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqKickFamilyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqKickFamilyMember_descriptor_;
  metadata.reflection = ReqKickFamilyMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqKickFamilyMember::kResultFieldNumber;
#endif  // !_MSC_VER

AckReqKickFamilyMember::AckReqKickFamilyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqKickFamilyMember::InitAsDefaultInstance() {
}

AckReqKickFamilyMember::AckReqKickFamilyMember(const AckReqKickFamilyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqKickFamilyMember::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqKickFamilyMember::~AckReqKickFamilyMember() {
  SharedDtor();
}

void AckReqKickFamilyMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqKickFamilyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqKickFamilyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqKickFamilyMember_descriptor_;
}

const AckReqKickFamilyMember& AckReqKickFamilyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckReqKickFamilyMember* AckReqKickFamilyMember::default_instance_ = NULL;

AckReqKickFamilyMember* AckReqKickFamilyMember::New() const {
  return new AckReqKickFamilyMember;
}

void AckReqKickFamilyMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqKickFamilyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.FamilyOpResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqKickFamilyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqKickFamilyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqKickFamilyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.FamilyOpResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqKickFamilyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqKickFamilyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqKickFamilyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqKickFamilyMember::MergeFrom(const AckReqKickFamilyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqKickFamilyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqKickFamilyMember::CopyFrom(const AckReqKickFamilyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqKickFamilyMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqKickFamilyMember::Swap(AckReqKickFamilyMember* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqKickFamilyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqKickFamilyMember_descriptor_;
  metadata.reflection = AckReqKickFamilyMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSetFamilyBaseInfo::kFamilyiconFieldNumber;
const int ReqSetFamilyBaseInfo::kPulictypeFieldNumber;
const int ReqSetFamilyBaseInfo::kLowlevelFieldNumber;
const int ReqSetFamilyBaseInfo::kHighlevelFieldNumber;
const int ReqSetFamilyBaseInfo::kFamilynoticeFieldNumber;
#endif  // !_MSC_VER

ReqSetFamilyBaseInfo::ReqSetFamilyBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSetFamilyBaseInfo::InitAsDefaultInstance() {
}

ReqSetFamilyBaseInfo::ReqSetFamilyBaseInfo(const ReqSetFamilyBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSetFamilyBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  familyicon_ = 0u;
  pulictype_ = 0;
  lowlevel_ = 0u;
  highlevel_ = 0u;
  familynotice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSetFamilyBaseInfo::~ReqSetFamilyBaseInfo() {
  SharedDtor();
}

void ReqSetFamilyBaseInfo::SharedDtor() {
  if (familynotice_ != &::google::protobuf::internal::kEmptyString) {
    delete familynotice_;
  }
  if (this != default_instance_) {
  }
}

void ReqSetFamilyBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSetFamilyBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSetFamilyBaseInfo_descriptor_;
}

const ReqSetFamilyBaseInfo& ReqSetFamilyBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqSetFamilyBaseInfo* ReqSetFamilyBaseInfo::default_instance_ = NULL;

ReqSetFamilyBaseInfo* ReqSetFamilyBaseInfo::New() const {
  return new ReqSetFamilyBaseInfo;
}

void ReqSetFamilyBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyicon_ = 0u;
    pulictype_ = 0;
    lowlevel_ = 0u;
    highlevel_ = 0u;
    if (has_familynotice()) {
      if (familynotice_ != &::google::protobuf::internal::kEmptyString) {
        familynotice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSetFamilyBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 familyicon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &familyicon_)));
          set_has_familyicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pulictype;
        break;
      }

      // required .HelloKittyMsgData.FamilyPublicType pulictype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pulictype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyPublicType_IsValid(value)) {
            set_pulictype(static_cast< ::HelloKittyMsgData::FamilyPublicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lowlevel;
        break;
      }

      // required uint32 lowlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lowlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowlevel_)));
          set_has_lowlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_highlevel;
        break;
      }

      // required uint32 highlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlevel_)));
          set_has_highlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_familynotice;
        break;
      }

      // required string familynotice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_familynotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_familynotice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->familynotice().data(), this->familynotice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSetFamilyBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 familyicon = 1;
  if (has_familyicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->familyicon(), output);
  }

  // required .HelloKittyMsgData.FamilyPublicType pulictype = 2;
  if (has_pulictype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pulictype(), output);
  }

  // required uint32 lowlevel = 3;
  if (has_lowlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lowlevel(), output);
  }

  // required uint32 highlevel = 4;
  if (has_highlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->highlevel(), output);
  }

  // required string familynotice = 5;
  if (has_familynotice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->familynotice().data(), this->familynotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->familynotice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSetFamilyBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 familyicon = 1;
  if (has_familyicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->familyicon(), target);
  }

  // required .HelloKittyMsgData.FamilyPublicType pulictype = 2;
  if (has_pulictype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pulictype(), target);
  }

  // required uint32 lowlevel = 3;
  if (has_lowlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lowlevel(), target);
  }

  // required uint32 highlevel = 4;
  if (has_highlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->highlevel(), target);
  }

  // required string familynotice = 5;
  if (has_familynotice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->familynotice().data(), this->familynotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->familynotice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSetFamilyBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 familyicon = 1;
    if (has_familyicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->familyicon());
    }

    // required .HelloKittyMsgData.FamilyPublicType pulictype = 2;
    if (has_pulictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pulictype());
    }

    // required uint32 lowlevel = 3;
    if (has_lowlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowlevel());
    }

    // required uint32 highlevel = 4;
    if (has_highlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highlevel());
    }

    // required string familynotice = 5;
    if (has_familynotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->familynotice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSetFamilyBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSetFamilyBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSetFamilyBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSetFamilyBaseInfo::MergeFrom(const ReqSetFamilyBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_familyicon()) {
      set_familyicon(from.familyicon());
    }
    if (from.has_pulictype()) {
      set_pulictype(from.pulictype());
    }
    if (from.has_lowlevel()) {
      set_lowlevel(from.lowlevel());
    }
    if (from.has_highlevel()) {
      set_highlevel(from.highlevel());
    }
    if (from.has_familynotice()) {
      set_familynotice(from.familynotice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSetFamilyBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetFamilyBaseInfo::CopyFrom(const ReqSetFamilyBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetFamilyBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ReqSetFamilyBaseInfo::Swap(ReqSetFamilyBaseInfo* other) {
  if (other != this) {
    std::swap(familyicon_, other->familyicon_);
    std::swap(pulictype_, other->pulictype_);
    std::swap(lowlevel_, other->lowlevel_);
    std::swap(highlevel_, other->highlevel_);
    std::swap(familynotice_, other->familynotice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSetFamilyBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSetFamilyBaseInfo_descriptor_;
  metadata.reflection = ReqSetFamilyBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqSetFamilyBaseInfo::kResultFieldNumber;
#endif  // !_MSC_VER

AckReqSetFamilyBaseInfo::AckReqSetFamilyBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqSetFamilyBaseInfo::InitAsDefaultInstance() {
}

AckReqSetFamilyBaseInfo::AckReqSetFamilyBaseInfo(const AckReqSetFamilyBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqSetFamilyBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqSetFamilyBaseInfo::~AckReqSetFamilyBaseInfo() {
  SharedDtor();
}

void AckReqSetFamilyBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqSetFamilyBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqSetFamilyBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqSetFamilyBaseInfo_descriptor_;
}

const AckReqSetFamilyBaseInfo& AckReqSetFamilyBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckReqSetFamilyBaseInfo* AckReqSetFamilyBaseInfo::default_instance_ = NULL;

AckReqSetFamilyBaseInfo* AckReqSetFamilyBaseInfo::New() const {
  return new AckReqSetFamilyBaseInfo;
}

void AckReqSetFamilyBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqSetFamilyBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.FamilyOpResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqSetFamilyBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqSetFamilyBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqSetFamilyBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.FamilyOpResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqSetFamilyBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqSetFamilyBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqSetFamilyBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqSetFamilyBaseInfo::MergeFrom(const AckReqSetFamilyBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqSetFamilyBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqSetFamilyBaseInfo::CopyFrom(const AckReqSetFamilyBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqSetFamilyBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqSetFamilyBaseInfo::Swap(AckReqSetFamilyBaseInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqSetFamilyBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqSetFamilyBaseInfo_descriptor_;
  metadata.reflection = AckReqSetFamilyBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqFamilyRanking::ReqFamilyRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqFamilyRanking::InitAsDefaultInstance() {
}

ReqFamilyRanking::ReqFamilyRanking(const ReqFamilyRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqFamilyRanking::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqFamilyRanking::~ReqFamilyRanking() {
  SharedDtor();
}

void ReqFamilyRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqFamilyRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFamilyRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqFamilyRanking_descriptor_;
}

const ReqFamilyRanking& ReqFamilyRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

ReqFamilyRanking* ReqFamilyRanking::default_instance_ = NULL;

ReqFamilyRanking* ReqFamilyRanking::New() const {
  return new ReqFamilyRanking;
}

void ReqFamilyRanking::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqFamilyRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqFamilyRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqFamilyRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqFamilyRanking::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFamilyRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqFamilyRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqFamilyRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqFamilyRanking::MergeFrom(const ReqFamilyRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqFamilyRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFamilyRanking::CopyFrom(const ReqFamilyRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFamilyRanking::IsInitialized() const {

  return true;
}

void ReqFamilyRanking::Swap(ReqFamilyRanking* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqFamilyRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqFamilyRanking_descriptor_;
  metadata.reflection = ReqFamilyRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqFamilyRanking::kResultFieldNumber;
const int AckReqFamilyRanking::kVecfamilyFieldNumber;
#endif  // !_MSC_VER

AckReqFamilyRanking::AckReqFamilyRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqFamilyRanking::InitAsDefaultInstance() {
}

AckReqFamilyRanking::AckReqFamilyRanking(const AckReqFamilyRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqFamilyRanking::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqFamilyRanking::~AckReqFamilyRanking() {
  SharedDtor();
}

void AckReqFamilyRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqFamilyRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqFamilyRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqFamilyRanking_descriptor_;
}

const AckReqFamilyRanking& AckReqFamilyRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_family_2eproto();
  return *default_instance_;
}

AckReqFamilyRanking* AckReqFamilyRanking::default_instance_ = NULL;

AckReqFamilyRanking* AckReqFamilyRanking::New() const {
  return new AckReqFamilyRanking;
}

void AckReqFamilyRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  vecfamily_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqFamilyRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.FamilyOpResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FamilyOpResult_IsValid(value)) {
            set_result(static_cast< ::HelloKittyMsgData::FamilyOpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecfamily;
        break;
      }

      // repeated .HelloKittyMsgData.BaseFamilyInfo vecfamily = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecfamily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecfamily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecfamily;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqFamilyRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .HelloKittyMsgData.BaseFamilyInfo vecfamily = 2;
  for (int i = 0; i < this->vecfamily_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vecfamily(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqFamilyRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.FamilyOpResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .HelloKittyMsgData.BaseFamilyInfo vecfamily = 2;
  for (int i = 0; i < this->vecfamily_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vecfamily(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqFamilyRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.FamilyOpResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .HelloKittyMsgData.BaseFamilyInfo vecfamily = 2;
  total_size += 1 * this->vecfamily_size();
  for (int i = 0; i < this->vecfamily_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecfamily(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqFamilyRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqFamilyRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqFamilyRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqFamilyRanking::MergeFrom(const AckReqFamilyRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecfamily_.MergeFrom(from.vecfamily_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqFamilyRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqFamilyRanking::CopyFrom(const AckReqFamilyRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqFamilyRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < vecfamily_size(); i++) {
    if (!this->vecfamily(i).IsInitialized()) return false;
  }
  return true;
}

void AckReqFamilyRanking::Swap(AckReqFamilyRanking* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    vecfamily_.Swap(&other->vecfamily_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqFamilyRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqFamilyRanking_descriptor_;
  metadata.reflection = AckReqFamilyRanking_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
