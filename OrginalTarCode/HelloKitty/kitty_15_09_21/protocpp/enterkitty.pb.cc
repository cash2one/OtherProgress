// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enterkitty.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "enterkitty.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* EnterGardenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGardenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEnterGarden_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterGarden_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckEnterGarden_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckEnterGarden_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_enterkitty_2eproto() {
  protobuf_AddDesc_enterkitty_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "enterkitty.proto");
  GOOGLE_CHECK(file != NULL);
  EnterGardenInfo_descriptor_ = file->message_type(0);
  static const int EnterGardenInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGardenInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGardenInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGardenInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGardenInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGardenInfo, buildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGardenInfo, kittygarden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGardenInfo, rubbish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGardenInfo, eventinit_),
  };
  EnterGardenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGardenInfo_descriptor_,
      EnterGardenInfo::default_instance_,
      EnterGardenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGardenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGardenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGardenInfo));
  ReqEnterGarden_descriptor_ = file->message_type(1);
  static const int ReqEnterGarden_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGarden, charid_),
  };
  ReqEnterGarden_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnterGarden_descriptor_,
      ReqEnterGarden::default_instance_,
      ReqEnterGarden_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGarden, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGarden, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnterGarden));
  AckEnterGarden_descriptor_ = file->message_type(2);
  static const int AckEnterGarden_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnterGarden, gardeninfo_),
  };
  AckEnterGarden_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckEnterGarden_descriptor_,
      AckEnterGarden::default_instance_,
      AckEnterGarden_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnterGarden, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnterGarden, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckEnterGarden));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_enterkitty_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGardenInfo_descriptor_, &EnterGardenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnterGarden_descriptor_, &ReqEnterGarden::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckEnterGarden_descriptor_, &AckEnterGarden::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_enterkitty_2eproto() {
  delete EnterGardenInfo::default_instance_;
  delete EnterGardenInfo_reflection_;
  delete ReqEnterGarden::default_instance_;
  delete ReqEnterGarden_reflection_;
  delete AckEnterGarden::default_instance_;
  delete AckEnterGarden_reflection_;
}

void protobuf_AddDesc_enterkitty_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_trade_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_kittygarden_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_build_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_common_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_event_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020enterkitty.proto\022\021HelloKittyMsgData\032\013t"
    "rade.proto\032\021kittygarden.proto\032\013build.pro"
    "to\032\014common.proto\032\013event.proto\"\224\002\n\017EnterG"
    "ardenInfo\022\016\n\006charId\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022"
    "\r\n\005level\030\003 \002(\r\022\013\n\003exp\030\004 \002(\004\022/\n\tbuildinfo"
    "\030\005 \003(\0132\034.HelloKittyMsgData.BuildBase\0223\n\013"
    "kittygarden\030\006 \002(\0132\036.HelloKittyMsgData.Ki"
    "ttyGarden\022/\n\007rubbish\030\007 \003(\0132\036.HelloKittyM"
    "sgData.RubbishData\0220\n\teventinit\030\010 \002(\0132\035."
    "HelloKittyMsgData.Evententer\" \n\016ReqEnter"
    "Garden\022\016\n\006charid\030\001 \002(\004\"H\n\016AckEnterGarden"
    "\0226\n\ngardenInfo\030\001 \002(\0132\".HelloKittyMsgData"
    ".EnterGardenInfo", 496);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "enterkitty.proto", &protobuf_RegisterTypes);
  EnterGardenInfo::default_instance_ = new EnterGardenInfo();
  ReqEnterGarden::default_instance_ = new ReqEnterGarden();
  AckEnterGarden::default_instance_ = new AckEnterGarden();
  EnterGardenInfo::default_instance_->InitAsDefaultInstance();
  ReqEnterGarden::default_instance_->InitAsDefaultInstance();
  AckEnterGarden::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_enterkitty_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_enterkitty_2eproto {
  StaticDescriptorInitializer_enterkitty_2eproto() {
    protobuf_AddDesc_enterkitty_2eproto();
  }
} static_descriptor_initializer_enterkitty_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EnterGardenInfo::kCharIdFieldNumber;
const int EnterGardenInfo::kNameFieldNumber;
const int EnterGardenInfo::kLevelFieldNumber;
const int EnterGardenInfo::kExpFieldNumber;
const int EnterGardenInfo::kBuildinfoFieldNumber;
const int EnterGardenInfo::kKittygardenFieldNumber;
const int EnterGardenInfo::kRubbishFieldNumber;
const int EnterGardenInfo::kEventinitFieldNumber;
#endif  // !_MSC_VER

EnterGardenInfo::EnterGardenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterGardenInfo::InitAsDefaultInstance() {
  kittygarden_ = const_cast< ::HelloKittyMsgData::KittyGarden*>(&::HelloKittyMsgData::KittyGarden::default_instance());
  eventinit_ = const_cast< ::HelloKittyMsgData::Evententer*>(&::HelloKittyMsgData::Evententer::default_instance());
}

EnterGardenInfo::EnterGardenInfo(const EnterGardenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterGardenInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  kittygarden_ = NULL;
  eventinit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGardenInfo::~EnterGardenInfo() {
  SharedDtor();
}

void EnterGardenInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete kittygarden_;
    delete eventinit_;
  }
}

void EnterGardenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGardenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGardenInfo_descriptor_;
}

const EnterGardenInfo& EnterGardenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_enterkitty_2eproto();
  return *default_instance_;
}

EnterGardenInfo* EnterGardenInfo::default_instance_ = NULL;

EnterGardenInfo* EnterGardenInfo::New() const {
  return new EnterGardenInfo;
}

void EnterGardenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    if (has_kittygarden()) {
      if (kittygarden_ != NULL) kittygarden_->::HelloKittyMsgData::KittyGarden::Clear();
    }
    if (has_eventinit()) {
      if (eventinit_ != NULL) eventinit_->::HelloKittyMsgData::Evententer::Clear();
    }
  }
  buildinfo_.Clear();
  rubbish_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGardenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint64 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buildinfo;
        break;
      }

      // repeated .HelloKittyMsgData.BuildBase buildinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buildinfo;
        if (input->ExpectTag(50)) goto parse_kittygarden;
        break;
      }

      // required .HelloKittyMsgData.KittyGarden kittygarden = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kittygarden:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kittygarden()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rubbish;
        break;
      }

      // repeated .HelloKittyMsgData.RubbishData rubbish = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rubbish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rubbish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rubbish;
        if (input->ExpectTag(66)) goto parse_eventinit;
        break;
      }

      // required .HelloKittyMsgData.Evententer eventinit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventinit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventinit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterGardenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint64 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->exp(), output);
  }

  // repeated .HelloKittyMsgData.BuildBase buildinfo = 5;
  for (int i = 0; i < this->buildinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buildinfo(i), output);
  }

  // required .HelloKittyMsgData.KittyGarden kittygarden = 6;
  if (has_kittygarden()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->kittygarden(), output);
  }

  // repeated .HelloKittyMsgData.RubbishData rubbish = 7;
  for (int i = 0; i < this->rubbish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rubbish(i), output);
  }

  // required .HelloKittyMsgData.Evententer eventinit = 8;
  if (has_eventinit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->eventinit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterGardenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint64 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->exp(), target);
  }

  // repeated .HelloKittyMsgData.BuildBase buildinfo = 5;
  for (int i = 0; i < this->buildinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buildinfo(i), target);
  }

  // required .HelloKittyMsgData.KittyGarden kittygarden = 6;
  if (has_kittygarden()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->kittygarden(), target);
  }

  // repeated .HelloKittyMsgData.RubbishData rubbish = 7;
  for (int i = 0; i < this->rubbish_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rubbish(i), target);
  }

  // required .HelloKittyMsgData.Evententer eventinit = 8;
  if (has_eventinit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->eventinit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterGardenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required .HelloKittyMsgData.KittyGarden kittygarden = 6;
    if (has_kittygarden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kittygarden());
    }

    // required .HelloKittyMsgData.Evententer eventinit = 8;
    if (has_eventinit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventinit());
    }

  }
  // repeated .HelloKittyMsgData.BuildBase buildinfo = 5;
  total_size += 1 * this->buildinfo_size();
  for (int i = 0; i < this->buildinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildinfo(i));
  }

  // repeated .HelloKittyMsgData.RubbishData rubbish = 7;
  total_size += 1 * this->rubbish_size();
  for (int i = 0; i < this->rubbish_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rubbish(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGardenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGardenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGardenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGardenInfo::MergeFrom(const EnterGardenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildinfo_.MergeFrom(from.buildinfo_);
  rubbish_.MergeFrom(from.rubbish_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_kittygarden()) {
      mutable_kittygarden()->::HelloKittyMsgData::KittyGarden::MergeFrom(from.kittygarden());
    }
    if (from.has_eventinit()) {
      mutable_eventinit()->::HelloKittyMsgData::Evententer::MergeFrom(from.eventinit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGardenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGardenInfo::CopyFrom(const EnterGardenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGardenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000af) != 0x000000af) return false;

  for (int i = 0; i < buildinfo_size(); i++) {
    if (!this->buildinfo(i).IsInitialized()) return false;
  }
  if (has_kittygarden()) {
    if (!this->kittygarden().IsInitialized()) return false;
  }
  for (int i = 0; i < rubbish_size(); i++) {
    if (!this->rubbish(i).IsInitialized()) return false;
  }
  if (has_eventinit()) {
    if (!this->eventinit().IsInitialized()) return false;
  }
  return true;
}

void EnterGardenInfo::Swap(EnterGardenInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    buildinfo_.Swap(&other->buildinfo_);
    std::swap(kittygarden_, other->kittygarden_);
    rubbish_.Swap(&other->rubbish_);
    std::swap(eventinit_, other->eventinit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGardenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGardenInfo_descriptor_;
  metadata.reflection = EnterGardenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqEnterGarden::kCharidFieldNumber;
#endif  // !_MSC_VER

ReqEnterGarden::ReqEnterGarden()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnterGarden::InitAsDefaultInstance() {
}

ReqEnterGarden::ReqEnterGarden(const ReqEnterGarden& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnterGarden::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterGarden::~ReqEnterGarden() {
  SharedDtor();
}

void ReqEnterGarden::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEnterGarden::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGarden::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterGarden_descriptor_;
}

const ReqEnterGarden& ReqEnterGarden::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_enterkitty_2eproto();
  return *default_instance_;
}

ReqEnterGarden* ReqEnterGarden::default_instance_ = NULL;

ReqEnterGarden* ReqEnterGarden::New() const {
  return new ReqEnterGarden;
}

void ReqEnterGarden::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnterGarden::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEnterGarden::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnterGarden::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnterGarden::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGarden::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnterGarden* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnterGarden*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnterGarden::MergeFrom(const ReqEnterGarden& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnterGarden::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGarden::CopyFrom(const ReqEnterGarden& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGarden::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqEnterGarden::Swap(ReqEnterGarden* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnterGarden::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterGarden_descriptor_;
  metadata.reflection = ReqEnterGarden_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckEnterGarden::kGardenInfoFieldNumber;
#endif  // !_MSC_VER

AckEnterGarden::AckEnterGarden()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckEnterGarden::InitAsDefaultInstance() {
  gardeninfo_ = const_cast< ::HelloKittyMsgData::EnterGardenInfo*>(&::HelloKittyMsgData::EnterGardenInfo::default_instance());
}

AckEnterGarden::AckEnterGarden(const AckEnterGarden& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckEnterGarden::SharedCtor() {
  _cached_size_ = 0;
  gardeninfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckEnterGarden::~AckEnterGarden() {
  SharedDtor();
}

void AckEnterGarden::SharedDtor() {
  if (this != default_instance_) {
    delete gardeninfo_;
  }
}

void AckEnterGarden::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEnterGarden::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckEnterGarden_descriptor_;
}

const AckEnterGarden& AckEnterGarden::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_enterkitty_2eproto();
  return *default_instance_;
}

AckEnterGarden* AckEnterGarden::default_instance_ = NULL;

AckEnterGarden* AckEnterGarden::New() const {
  return new AckEnterGarden;
}

void AckEnterGarden::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gardeninfo()) {
      if (gardeninfo_ != NULL) gardeninfo_->::HelloKittyMsgData::EnterGardenInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckEnterGarden::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.EnterGardenInfo gardenInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gardeninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckEnterGarden::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.EnterGardenInfo gardenInfo = 1;
  if (has_gardeninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gardeninfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckEnterGarden::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.EnterGardenInfo gardenInfo = 1;
  if (has_gardeninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gardeninfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckEnterGarden::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.EnterGardenInfo gardenInfo = 1;
    if (has_gardeninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gardeninfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEnterGarden::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckEnterGarden* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckEnterGarden*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckEnterGarden::MergeFrom(const AckEnterGarden& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gardeninfo()) {
      mutable_gardeninfo()->::HelloKittyMsgData::EnterGardenInfo::MergeFrom(from.gardeninfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckEnterGarden::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEnterGarden::CopyFrom(const AckEnterGarden& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEnterGarden::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gardeninfo()) {
    if (!this->gardeninfo().IsInitialized()) return false;
  }
  return true;
}

void AckEnterGarden::Swap(AckEnterGarden* other) {
  if (other != this) {
    std::swap(gardeninfo_, other->gardeninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckEnterGarden::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckEnterGarden_descriptor_;
  metadata.reflection = AckEnterGarden_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
