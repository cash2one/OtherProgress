// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paper.proto

#ifndef PROTOBUF_paper_2eproto__INCLUDED
#define PROTOBUF_paper_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_paper_2eproto();
void protobuf_AssignDesc_paper_2eproto();
void protobuf_ShutdownFile_paper_2eproto();

class ReqPaper;
class PaperData;
class AckPaper;
class AckUpdatePaper;
class ReqOpPaper;
class AckMakePaperSuccess;

// ===================================================================

class ReqPaper : public ::google::protobuf::Message {
 public:
  ReqPaper();
  virtual ~ReqPaper();

  ReqPaper(const ReqPaper& from);

  inline ReqPaper& operator=(const ReqPaper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPaper& default_instance();

  void Swap(ReqPaper* other);

  // implements Message ----------------------------------------------

  ReqPaper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPaper& from);
  void MergeFrom(const ReqPaper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqPaper)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_paper_2eproto();
  friend void protobuf_AssignDesc_paper_2eproto();
  friend void protobuf_ShutdownFile_paper_2eproto();

  void InitAsDefaultInstance();
  static ReqPaper* default_instance_;
};
// -------------------------------------------------------------------

class PaperData : public ::google::protobuf::Message {
 public:
  PaperData();
  virtual ~PaperData();

  PaperData(const PaperData& from);

  inline PaperData& operator=(const PaperData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaperData& default_instance();

  void Swap(PaperData* other);

  // implements Message ----------------------------------------------

  PaperData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaperData& from);
  void MergeFrom(const PaperData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 paper = 1;
  inline bool has_paper() const;
  inline void clear_paper();
  static const int kPaperFieldNumber = 1;
  inline ::google::protobuf::uint32 paper() const;
  inline void set_paper(::google::protobuf::uint32 value);

  // required bool produceflg = 2;
  inline bool has_produceflg() const;
  inline void clear_produceflg();
  static const int kProduceflgFieldNumber = 2;
  inline bool produceflg() const;
  inline void set_produceflg(bool value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.PaperData)
 private:
  inline void set_has_paper();
  inline void clear_has_paper();
  inline void set_has_produceflg();
  inline void clear_has_produceflg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 paper_;
  bool produceflg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paper_2eproto();
  friend void protobuf_AssignDesc_paper_2eproto();
  friend void protobuf_ShutdownFile_paper_2eproto();

  void InitAsDefaultInstance();
  static PaperData* default_instance_;
};
// -------------------------------------------------------------------

class AckPaper : public ::google::protobuf::Message {
 public:
  AckPaper();
  virtual ~AckPaper();

  AckPaper(const AckPaper& from);

  inline AckPaper& operator=(const AckPaper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPaper& default_instance();

  void Swap(AckPaper* other);

  // implements Message ----------------------------------------------

  AckPaper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPaper& from);
  void MergeFrom(const AckPaper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HelloKittyMsgData.PaperData paper = 1;
  inline int paper_size() const;
  inline void clear_paper();
  static const int kPaperFieldNumber = 1;
  inline const ::HelloKittyMsgData::PaperData& paper(int index) const;
  inline ::HelloKittyMsgData::PaperData* mutable_paper(int index);
  inline ::HelloKittyMsgData::PaperData* add_paper();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PaperData >&
      paper() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PaperData >*
      mutable_paper();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckPaper)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PaperData > paper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_paper_2eproto();
  friend void protobuf_AssignDesc_paper_2eproto();
  friend void protobuf_ShutdownFile_paper_2eproto();

  void InitAsDefaultInstance();
  static AckPaper* default_instance_;
};
// -------------------------------------------------------------------

class AckUpdatePaper : public ::google::protobuf::Message {
 public:
  AckUpdatePaper();
  virtual ~AckUpdatePaper();

  AckUpdatePaper(const AckUpdatePaper& from);

  inline AckUpdatePaper& operator=(const AckUpdatePaper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpdatePaper& default_instance();

  void Swap(AckUpdatePaper* other);

  // implements Message ----------------------------------------------

  AckUpdatePaper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUpdatePaper& from);
  void MergeFrom(const AckUpdatePaper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.PaperData paper = 1;
  inline bool has_paper() const;
  inline void clear_paper();
  static const int kPaperFieldNumber = 1;
  inline const ::HelloKittyMsgData::PaperData& paper() const;
  inline ::HelloKittyMsgData::PaperData* mutable_paper();
  inline ::HelloKittyMsgData::PaperData* release_paper();
  inline void set_allocated_paper(::HelloKittyMsgData::PaperData* paper);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckUpdatePaper)
 private:
  inline void set_has_paper();
  inline void clear_has_paper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::PaperData* paper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_paper_2eproto();
  friend void protobuf_AssignDesc_paper_2eproto();
  friend void protobuf_ShutdownFile_paper_2eproto();

  void InitAsDefaultInstance();
  static AckUpdatePaper* default_instance_;
};
// -------------------------------------------------------------------

class ReqOpPaper : public ::google::protobuf::Message {
 public:
  ReqOpPaper();
  virtual ~ReqOpPaper();

  ReqOpPaper(const ReqOpPaper& from);

  inline ReqOpPaper& operator=(const ReqOpPaper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOpPaper& default_instance();

  void Swap(ReqOpPaper* other);

  // implements Message ----------------------------------------------

  ReqOpPaper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOpPaper& from);
  void MergeFrom(const ReqOpPaper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 paper = 1;
  inline bool has_paper() const;
  inline void clear_paper();
  static const int kPaperFieldNumber = 1;
  inline ::google::protobuf::uint32 paper() const;
  inline void set_paper(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqOpPaper)
 private:
  inline void set_has_paper();
  inline void clear_has_paper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 paper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_paper_2eproto();
  friend void protobuf_AssignDesc_paper_2eproto();
  friend void protobuf_ShutdownFile_paper_2eproto();

  void InitAsDefaultInstance();
  static ReqOpPaper* default_instance_;
};
// -------------------------------------------------------------------

class AckMakePaperSuccess : public ::google::protobuf::Message {
 public:
  AckMakePaperSuccess();
  virtual ~AckMakePaperSuccess();

  AckMakePaperSuccess(const AckMakePaperSuccess& from);

  inline AckMakePaperSuccess& operator=(const AckMakePaperSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckMakePaperSuccess& default_instance();

  void Swap(AckMakePaperSuccess* other);

  // implements Message ----------------------------------------------

  AckMakePaperSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckMakePaperSuccess& from);
  void MergeFrom(const AckMakePaperSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.PaperData paper = 1;
  inline bool has_paper() const;
  inline void clear_paper();
  static const int kPaperFieldNumber = 1;
  inline const ::HelloKittyMsgData::PaperData& paper() const;
  inline ::HelloKittyMsgData::PaperData* mutable_paper();
  inline ::HelloKittyMsgData::PaperData* release_paper();
  inline void set_allocated_paper(::HelloKittyMsgData::PaperData* paper);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckMakePaperSuccess)
 private:
  inline void set_has_paper();
  inline void clear_has_paper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::PaperData* paper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_paper_2eproto();
  friend void protobuf_AssignDesc_paper_2eproto();
  friend void protobuf_ShutdownFile_paper_2eproto();

  void InitAsDefaultInstance();
  static AckMakePaperSuccess* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqPaper

// -------------------------------------------------------------------

// PaperData

// required uint32 paper = 1;
inline bool PaperData::has_paper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaperData::set_has_paper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaperData::clear_has_paper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaperData::clear_paper() {
  paper_ = 0u;
  clear_has_paper();
}
inline ::google::protobuf::uint32 PaperData::paper() const {
  return paper_;
}
inline void PaperData::set_paper(::google::protobuf::uint32 value) {
  set_has_paper();
  paper_ = value;
}

// required bool produceflg = 2;
inline bool PaperData::has_produceflg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaperData::set_has_produceflg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaperData::clear_has_produceflg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaperData::clear_produceflg() {
  produceflg_ = false;
  clear_has_produceflg();
}
inline bool PaperData::produceflg() const {
  return produceflg_;
}
inline void PaperData::set_produceflg(bool value) {
  set_has_produceflg();
  produceflg_ = value;
}

// -------------------------------------------------------------------

// AckPaper

// repeated .HelloKittyMsgData.PaperData paper = 1;
inline int AckPaper::paper_size() const {
  return paper_.size();
}
inline void AckPaper::clear_paper() {
  paper_.Clear();
}
inline const ::HelloKittyMsgData::PaperData& AckPaper::paper(int index) const {
  return paper_.Get(index);
}
inline ::HelloKittyMsgData::PaperData* AckPaper::mutable_paper(int index) {
  return paper_.Mutable(index);
}
inline ::HelloKittyMsgData::PaperData* AckPaper::add_paper() {
  return paper_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PaperData >&
AckPaper::paper() const {
  return paper_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::PaperData >*
AckPaper::mutable_paper() {
  return &paper_;
}

// -------------------------------------------------------------------

// AckUpdatePaper

// required .HelloKittyMsgData.PaperData paper = 1;
inline bool AckUpdatePaper::has_paper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUpdatePaper::set_has_paper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUpdatePaper::clear_has_paper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUpdatePaper::clear_paper() {
  if (paper_ != NULL) paper_->::HelloKittyMsgData::PaperData::Clear();
  clear_has_paper();
}
inline const ::HelloKittyMsgData::PaperData& AckUpdatePaper::paper() const {
  return paper_ != NULL ? *paper_ : *default_instance_->paper_;
}
inline ::HelloKittyMsgData::PaperData* AckUpdatePaper::mutable_paper() {
  set_has_paper();
  if (paper_ == NULL) paper_ = new ::HelloKittyMsgData::PaperData;
  return paper_;
}
inline ::HelloKittyMsgData::PaperData* AckUpdatePaper::release_paper() {
  clear_has_paper();
  ::HelloKittyMsgData::PaperData* temp = paper_;
  paper_ = NULL;
  return temp;
}
inline void AckUpdatePaper::set_allocated_paper(::HelloKittyMsgData::PaperData* paper) {
  delete paper_;
  paper_ = paper;
  if (paper) {
    set_has_paper();
  } else {
    clear_has_paper();
  }
}

// -------------------------------------------------------------------

// ReqOpPaper

// required uint32 paper = 1;
inline bool ReqOpPaper::has_paper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOpPaper::set_has_paper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOpPaper::clear_has_paper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOpPaper::clear_paper() {
  paper_ = 0u;
  clear_has_paper();
}
inline ::google::protobuf::uint32 ReqOpPaper::paper() const {
  return paper_;
}
inline void ReqOpPaper::set_paper(::google::protobuf::uint32 value) {
  set_has_paper();
  paper_ = value;
}

// -------------------------------------------------------------------

// AckMakePaperSuccess

// required .HelloKittyMsgData.PaperData paper = 1;
inline bool AckMakePaperSuccess::has_paper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckMakePaperSuccess::set_has_paper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckMakePaperSuccess::clear_has_paper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckMakePaperSuccess::clear_paper() {
  if (paper_ != NULL) paper_->::HelloKittyMsgData::PaperData::Clear();
  clear_has_paper();
}
inline const ::HelloKittyMsgData::PaperData& AckMakePaperSuccess::paper() const {
  return paper_ != NULL ? *paper_ : *default_instance_->paper_;
}
inline ::HelloKittyMsgData::PaperData* AckMakePaperSuccess::mutable_paper() {
  set_has_paper();
  if (paper_ == NULL) paper_ = new ::HelloKittyMsgData::PaperData;
  return paper_;
}
inline ::HelloKittyMsgData::PaperData* AckMakePaperSuccess::release_paper() {
  clear_has_paper();
  ::HelloKittyMsgData::PaperData* temp = paper_;
  paper_ = NULL;
  return temp;
}
inline void AckMakePaperSuccess::set_allocated_paper(::HelloKittyMsgData::PaperData* paper) {
  delete paper_;
  paper_ = paper;
  if (paper) {
    set_has_paper();
  } else {
    clear_has_paper();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_paper_2eproto__INCLUDED
