// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: divine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "divine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* DivineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DivineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDivineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDivineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDivineNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDivineNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDivine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDivine_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDivine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDivine_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDivineVerify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDivineVerify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DivineStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_divine_2eproto() {
  protobuf_AddDesc_divine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "divine.proto");
  GOOGLE_CHECK(file != NULL);
  DivineData_descriptor_ = file->message_type(0);
  static const int DivineData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivineData, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivineData, lucklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivineData, randorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivineData, randtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivineData, firstkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivineData, status_),
  };
  DivineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DivineData_descriptor_,
      DivineData::default_instance_,
      DivineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DivineData));
  ReqDivineInfo_descriptor_ = file->message_type(1);
  static const int ReqDivineInfo_offsets_[1] = {
  };
  ReqDivineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDivineInfo_descriptor_,
      ReqDivineInfo::default_instance_,
      ReqDivineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDivineInfo));
  ReqDivineNotice_descriptor_ = file->message_type(2);
  static const int ReqDivineNotice_offsets_[1] = {
  };
  ReqDivineNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDivineNotice_descriptor_,
      ReqDivineNotice::default_instance_,
      ReqDivineNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivineNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivineNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDivineNotice));
  ReqDivine_descriptor_ = file->message_type(3);
  static const int ReqDivine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivine, notify_),
  };
  ReqDivine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDivine_descriptor_,
      ReqDivine::default_instance_,
      ReqDivine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDivine));
  AckDivine_descriptor_ = file->message_type(4);
  static const int AckDivine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDivine, divine_),
  };
  AckDivine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDivine_descriptor_,
      AckDivine::default_instance_,
      AckDivine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDivine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDivine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDivine));
  ReqDivineVerify_descriptor_ = file->message_type(5);
  static const int ReqDivineVerify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivineVerify, older_),
  };
  ReqDivineVerify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDivineVerify_descriptor_,
      ReqDivineVerify::default_instance_,
      ReqDivineVerify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivineVerify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivineVerify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDivineVerify));
  DivineStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_divine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DivineData_descriptor_, &DivineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDivineInfo_descriptor_, &ReqDivineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDivineNotice_descriptor_, &ReqDivineNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDivine_descriptor_, &ReqDivine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDivine_descriptor_, &AckDivine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDivineVerify_descriptor_, &ReqDivineVerify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_divine_2eproto() {
  delete DivineData::default_instance_;
  delete DivineData_reflection_;
  delete ReqDivineInfo::default_instance_;
  delete ReqDivineInfo_reflection_;
  delete ReqDivineNotice::default_instance_;
  delete ReqDivineNotice_reflection_;
  delete ReqDivine::default_instance_;
  delete ReqDivine_reflection_;
  delete AckDivine::default_instance_;
  delete AckDivine_reflection_;
  delete ReqDivineVerify::default_instance_;
  delete ReqDivineVerify_reflection_;
}

void protobuf_AddDesc_divine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014divine.proto\022\021HelloKittyMsgData\"\227\001\n\nDi"
    "vineData\022\016\n\006answer\030\001 \002(\r\022\021\n\tlucklevel\030\002 "
    "\002(\r\022\021\n\trandorder\030\003 \002(\t\022\020\n\010randtime\030\004 \002(\r"
    "\022\020\n\010firstkey\030\005 \002(\r\022/\n\006status\030\006 \002(\0162\037.Hel"
    "loKittyMsgData.DivineStatus\"\017\n\rReqDivine"
    "Info\"\021\n\017ReqDivineNotice\"\033\n\tReqDivine\022\016\n\006"
    "notify\030\001 \002(\010\":\n\tAckDivine\022-\n\006divine\030\001 \002("
    "\0132\035.HelloKittyMsgData.DivineData\" \n\017ReqD"
    "ivineVerify\022\r\n\005older\030\001 \002(\t*8\n\014DivineStat"
    "us\022\014\n\010DS_Begin\020\000\022\016\n\nDS_Vertify\020\001\022\n\n\006DS_E"
    "nd\020\002", 404);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "divine.proto", &protobuf_RegisterTypes);
  DivineData::default_instance_ = new DivineData();
  ReqDivineInfo::default_instance_ = new ReqDivineInfo();
  ReqDivineNotice::default_instance_ = new ReqDivineNotice();
  ReqDivine::default_instance_ = new ReqDivine();
  AckDivine::default_instance_ = new AckDivine();
  ReqDivineVerify::default_instance_ = new ReqDivineVerify();
  DivineData::default_instance_->InitAsDefaultInstance();
  ReqDivineInfo::default_instance_->InitAsDefaultInstance();
  ReqDivineNotice::default_instance_->InitAsDefaultInstance();
  ReqDivine::default_instance_->InitAsDefaultInstance();
  AckDivine::default_instance_->InitAsDefaultInstance();
  ReqDivineVerify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_divine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_divine_2eproto {
  StaticDescriptorInitializer_divine_2eproto() {
    protobuf_AddDesc_divine_2eproto();
  }
} static_descriptor_initializer_divine_2eproto_;
const ::google::protobuf::EnumDescriptor* DivineStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DivineStatus_descriptor_;
}
bool DivineStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DivineData::kAnswerFieldNumber;
const int DivineData::kLucklevelFieldNumber;
const int DivineData::kRandorderFieldNumber;
const int DivineData::kRandtimeFieldNumber;
const int DivineData::kFirstkeyFieldNumber;
const int DivineData::kStatusFieldNumber;
#endif  // !_MSC_VER

DivineData::DivineData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DivineData::InitAsDefaultInstance() {
}

DivineData::DivineData(const DivineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DivineData::SharedCtor() {
  _cached_size_ = 0;
  answer_ = 0u;
  lucklevel_ = 0u;
  randorder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  randtime_ = 0u;
  firstkey_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DivineData::~DivineData() {
  SharedDtor();
}

void DivineData::SharedDtor() {
  if (randorder_ != &::google::protobuf::internal::kEmptyString) {
    delete randorder_;
  }
  if (this != default_instance_) {
  }
}

void DivineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DivineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DivineData_descriptor_;
}

const DivineData& DivineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_divine_2eproto();
  return *default_instance_;
}

DivineData* DivineData::default_instance_ = NULL;

DivineData* DivineData::New() const {
  return new DivineData;
}

void DivineData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    answer_ = 0u;
    lucklevel_ = 0u;
    if (has_randorder()) {
      if (randorder_ != &::google::protobuf::internal::kEmptyString) {
        randorder_->clear();
      }
    }
    randtime_ = 0u;
    firstkey_ = 0u;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DivineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 answer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lucklevel;
        break;
      }

      // required uint32 lucklevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lucklevel_)));
          set_has_lucklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_randorder;
        break;
      }

      // required string randorder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randorder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randorder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randorder().data(), this->randorder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_randtime;
        break;
      }

      // required uint32 randtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randtime_)));
          set_has_randtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_firstkey;
        break;
      }

      // required uint32 firstkey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstkey_)));
          set_has_firstkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required .HelloKittyMsgData.DivineStatus status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::DivineStatus_IsValid(value)) {
            set_status(static_cast< ::HelloKittyMsgData::DivineStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DivineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 answer = 1;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->answer(), output);
  }

  // required uint32 lucklevel = 2;
  if (has_lucklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lucklevel(), output);
  }

  // required string randorder = 3;
  if (has_randorder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randorder().data(), this->randorder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->randorder(), output);
  }

  // required uint32 randtime = 4;
  if (has_randtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->randtime(), output);
  }

  // required uint32 firstkey = 5;
  if (has_firstkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->firstkey(), output);
  }

  // required .HelloKittyMsgData.DivineStatus status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DivineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 answer = 1;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->answer(), target);
  }

  // required uint32 lucklevel = 2;
  if (has_lucklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lucklevel(), target);
  }

  // required string randorder = 3;
  if (has_randorder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randorder().data(), this->randorder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->randorder(), target);
  }

  // required uint32 randtime = 4;
  if (has_randtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->randtime(), target);
  }

  // required uint32 firstkey = 5;
  if (has_firstkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->firstkey(), target);
  }

  // required .HelloKittyMsgData.DivineStatus status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DivineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 answer = 1;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer());
    }

    // required uint32 lucklevel = 2;
    if (has_lucklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lucklevel());
    }

    // required string randorder = 3;
    if (has_randorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randorder());
    }

    // required uint32 randtime = 4;
    if (has_randtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randtime());
    }

    // required uint32 firstkey = 5;
    if (has_firstkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstkey());
    }

    // required .HelloKittyMsgData.DivineStatus status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DivineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DivineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DivineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DivineData::MergeFrom(const DivineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_lucklevel()) {
      set_lucklevel(from.lucklevel());
    }
    if (from.has_randorder()) {
      set_randorder(from.randorder());
    }
    if (from.has_randtime()) {
      set_randtime(from.randtime());
    }
    if (from.has_firstkey()) {
      set_firstkey(from.firstkey());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DivineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DivineData::CopyFrom(const DivineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivineData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DivineData::Swap(DivineData* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(lucklevel_, other->lucklevel_);
    std::swap(randorder_, other->randorder_);
    std::swap(randtime_, other->randtime_);
    std::swap(firstkey_, other->firstkey_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DivineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DivineData_descriptor_;
  metadata.reflection = DivineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqDivineInfo::ReqDivineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDivineInfo::InitAsDefaultInstance() {
}

ReqDivineInfo::ReqDivineInfo(const ReqDivineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDivineInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDivineInfo::~ReqDivineInfo() {
  SharedDtor();
}

void ReqDivineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDivineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDivineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDivineInfo_descriptor_;
}

const ReqDivineInfo& ReqDivineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_divine_2eproto();
  return *default_instance_;
}

ReqDivineInfo* ReqDivineInfo::default_instance_ = NULL;

ReqDivineInfo* ReqDivineInfo::New() const {
  return new ReqDivineInfo;
}

void ReqDivineInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDivineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqDivineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDivineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDivineInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDivineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDivineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDivineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDivineInfo::MergeFrom(const ReqDivineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDivineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDivineInfo::CopyFrom(const ReqDivineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDivineInfo::IsInitialized() const {

  return true;
}

void ReqDivineInfo::Swap(ReqDivineInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDivineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDivineInfo_descriptor_;
  metadata.reflection = ReqDivineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqDivineNotice::ReqDivineNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDivineNotice::InitAsDefaultInstance() {
}

ReqDivineNotice::ReqDivineNotice(const ReqDivineNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDivineNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDivineNotice::~ReqDivineNotice() {
  SharedDtor();
}

void ReqDivineNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDivineNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDivineNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDivineNotice_descriptor_;
}

const ReqDivineNotice& ReqDivineNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_divine_2eproto();
  return *default_instance_;
}

ReqDivineNotice* ReqDivineNotice::default_instance_ = NULL;

ReqDivineNotice* ReqDivineNotice::New() const {
  return new ReqDivineNotice;
}

void ReqDivineNotice::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDivineNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqDivineNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDivineNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDivineNotice::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDivineNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDivineNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDivineNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDivineNotice::MergeFrom(const ReqDivineNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDivineNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDivineNotice::CopyFrom(const ReqDivineNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDivineNotice::IsInitialized() const {

  return true;
}

void ReqDivineNotice::Swap(ReqDivineNotice* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDivineNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDivineNotice_descriptor_;
  metadata.reflection = ReqDivineNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDivine::kNotifyFieldNumber;
#endif  // !_MSC_VER

ReqDivine::ReqDivine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDivine::InitAsDefaultInstance() {
}

ReqDivine::ReqDivine(const ReqDivine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDivine::SharedCtor() {
  _cached_size_ = 0;
  notify_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDivine::~ReqDivine() {
  SharedDtor();
}

void ReqDivine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDivine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDivine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDivine_descriptor_;
}

const ReqDivine& ReqDivine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_divine_2eproto();
  return *default_instance_;
}

ReqDivine* ReqDivine::default_instance_ = NULL;

ReqDivine* ReqDivine::New() const {
  return new ReqDivine;
}

void ReqDivine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notify_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDivine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool notify = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_)));
          set_has_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDivine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDivine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool notify = 1;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDivine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool notify = 1;
    if (has_notify()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDivine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDivine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDivine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDivine::MergeFrom(const ReqDivine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify()) {
      set_notify(from.notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDivine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDivine::CopyFrom(const ReqDivine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDivine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqDivine::Swap(ReqDivine* other) {
  if (other != this) {
    std::swap(notify_, other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDivine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDivine_descriptor_;
  metadata.reflection = ReqDivine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDivine::kDivineFieldNumber;
#endif  // !_MSC_VER

AckDivine::AckDivine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDivine::InitAsDefaultInstance() {
  divine_ = const_cast< ::HelloKittyMsgData::DivineData*>(&::HelloKittyMsgData::DivineData::default_instance());
}

AckDivine::AckDivine(const AckDivine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDivine::SharedCtor() {
  _cached_size_ = 0;
  divine_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDivine::~AckDivine() {
  SharedDtor();
}

void AckDivine::SharedDtor() {
  if (this != default_instance_) {
    delete divine_;
  }
}

void AckDivine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDivine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDivine_descriptor_;
}

const AckDivine& AckDivine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_divine_2eproto();
  return *default_instance_;
}

AckDivine* AckDivine::default_instance_ = NULL;

AckDivine* AckDivine::New() const {
  return new AckDivine;
}

void AckDivine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_divine()) {
      if (divine_ != NULL) divine_->::HelloKittyMsgData::DivineData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDivine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.DivineData divine = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_divine()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDivine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.DivineData divine = 1;
  if (has_divine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->divine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDivine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.DivineData divine = 1;
  if (has_divine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->divine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDivine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.DivineData divine = 1;
    if (has_divine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->divine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDivine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDivine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDivine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDivine::MergeFrom(const AckDivine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_divine()) {
      mutable_divine()->::HelloKittyMsgData::DivineData::MergeFrom(from.divine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDivine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDivine::CopyFrom(const AckDivine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDivine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_divine()) {
    if (!this->divine().IsInitialized()) return false;
  }
  return true;
}

void AckDivine::Swap(AckDivine* other) {
  if (other != this) {
    std::swap(divine_, other->divine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDivine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDivine_descriptor_;
  metadata.reflection = AckDivine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDivineVerify::kOlderFieldNumber;
#endif  // !_MSC_VER

ReqDivineVerify::ReqDivineVerify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDivineVerify::InitAsDefaultInstance() {
}

ReqDivineVerify::ReqDivineVerify(const ReqDivineVerify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDivineVerify::SharedCtor() {
  _cached_size_ = 0;
  older_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDivineVerify::~ReqDivineVerify() {
  SharedDtor();
}

void ReqDivineVerify::SharedDtor() {
  if (older_ != &::google::protobuf::internal::kEmptyString) {
    delete older_;
  }
  if (this != default_instance_) {
  }
}

void ReqDivineVerify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDivineVerify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDivineVerify_descriptor_;
}

const ReqDivineVerify& ReqDivineVerify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_divine_2eproto();
  return *default_instance_;
}

ReqDivineVerify* ReqDivineVerify::default_instance_ = NULL;

ReqDivineVerify* ReqDivineVerify::New() const {
  return new ReqDivineVerify;
}

void ReqDivineVerify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_older()) {
      if (older_ != &::google::protobuf::internal::kEmptyString) {
        older_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDivineVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string older = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_older()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->older().data(), this->older().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDivineVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string older = 1;
  if (has_older()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->older().data(), this->older().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->older(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDivineVerify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string older = 1;
  if (has_older()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->older().data(), this->older().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->older(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDivineVerify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string older = 1;
    if (has_older()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->older());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDivineVerify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDivineVerify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDivineVerify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDivineVerify::MergeFrom(const ReqDivineVerify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_older()) {
      set_older(from.older());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDivineVerify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDivineVerify::CopyFrom(const ReqDivineVerify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDivineVerify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqDivineVerify::Swap(ReqDivineVerify* other) {
  if (other != this) {
    std::swap(older_, other->older_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDivineVerify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDivineVerify_descriptor_;
  metadata.reflection = ReqDivineVerify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
