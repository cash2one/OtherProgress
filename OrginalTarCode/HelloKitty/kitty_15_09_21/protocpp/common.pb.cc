// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* AckReturnError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReturnError_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReturnSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReturnSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateAttrVal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateAttrVal_reflection_ = NULL;
const ::google::protobuf::Descriptor* RubbishData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RubbishData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPurchaseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPurchaseItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BufferTypeID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SuccessCodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AttrType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  AckReturnError_descriptor_ = file->message_type(0);
  static const int AckReturnError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReturnError, reason_),
  };
  AckReturnError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReturnError_descriptor_,
      AckReturnError::default_instance_,
      AckReturnError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReturnError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReturnError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReturnError));
  AckReturnSuccess_descriptor_ = file->message_type(1);
  static const int AckReturnSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReturnSuccess, code_),
  };
  AckReturnSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReturnSuccess_descriptor_,
      AckReturnSuccess::default_instance_,
      AckReturnSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReturnSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReturnSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReturnSuccess));
  AckUpdateAttrVal_descriptor_ = file->message_type(2);
  static const int AckUpdateAttrVal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAttrVal, updatechar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAttrVal, attrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAttrVal, attrval_),
  };
  AckUpdateAttrVal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateAttrVal_descriptor_,
      AckUpdateAttrVal::default_instance_,
      AckUpdateAttrVal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAttrVal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAttrVal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateAttrVal));
  RubbishData_descriptor_ = file->message_type(3);
  static const int RubbishData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RubbishData, roadid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RubbishData, rubbish_),
  };
  RubbishData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RubbishData_descriptor_,
      RubbishData::default_instance_,
      RubbishData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RubbishData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RubbishData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RubbishData));
  ReqPurchaseItem_descriptor_ = file->message_type(4);
  static const int ReqPurchaseItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPurchaseItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPurchaseItem, itemcount_),
  };
  ReqPurchaseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPurchaseItem_descriptor_,
      ReqPurchaseItem::default_instance_,
      ReqPurchaseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPurchaseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPurchaseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPurchaseItem));
  ErrorCodeType_descriptor_ = file->enum_type(0);
  BufferTypeID_descriptor_ = file->enum_type(1);
  SuccessCodeType_descriptor_ = file->enum_type(2);
  AttrType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReturnError_descriptor_, &AckReturnError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReturnSuccess_descriptor_, &AckReturnSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateAttrVal_descriptor_, &AckUpdateAttrVal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RubbishData_descriptor_, &RubbishData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPurchaseItem_descriptor_, &ReqPurchaseItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete AckReturnError::default_instance_;
  delete AckReturnError_reflection_;
  delete AckReturnSuccess::default_instance_;
  delete AckReturnSuccess_reflection_;
  delete AckUpdateAttrVal::default_instance_;
  delete AckUpdateAttrVal_reflection_;
  delete RubbishData::default_instance_;
  delete RubbishData_reflection_;
  delete ReqPurchaseItem::default_instance_;
  delete ReqPurchaseItem_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\021HelloKittyMsgData\"B\n\016Ack"
    "ReturnError\0220\n\006reason\030\001 \002(\0162 .HelloKitty"
    "MsgData.ErrorCodeType\"D\n\020AckReturnSucces"
    "s\0220\n\004code\030\001 \002(\0162\".HelloKittyMsgData.Succ"
    "essCodeType\"f\n\020AckUpdateAttrVal\022\022\n\nupdat"
    "echar\030\001 \002(\004\022-\n\010attrtype\030\002 \002(\0162\033.HelloKit"
    "tyMsgData.AttrType\022\017\n\007attrval\030\003 \002(\r\".\n\013R"
    "ubbishData\022\016\n\006roadid\030\001 \002(\004\022\017\n\007rubbish\030\002 "
    "\002(\r\"4\n\017ReqPurchaseItem\022\016\n\006itemid\030\001 \002(\r\022\021"
    "\n\titemcount\030\002 \002(\r*\206\003\n\rErrorCodeType\022\027\n\023E"
    "rror_Common_Occupy\020\000\022\023\n\017Gold_Not_Enough\020"
    "\001\022\022\n\016Gem_Not_Enough\020\002\022\024\n\020Level_Not_Enoug"
    "h\020\003\022\024\n\020Guest_Not_Enough\020\004\022\031\n\025Friend_Val_"
    "Not_Enough\020\005\022\030\n\024Happy_Val_Not_Enough\020\006\022\027"
    "\n\023Material_Not_Enough\020\007\022\025\n\021WareHouse_Is_"
    "Full\020\010\022\025\n\021Worker_Not_Enough\020\t\022\017\n\013Build_I"
    "n_CD\020\n\022\023\n\017Item_Not_Enough\020\013\022\023\n\017Email_Is_"
    "Enough\020\014\022\024\n\020Player_Not_Exist\020\r\022\022\n\016Email_"
    "Is_Empty\020\016\022\020\n\014Card_Is_Used\020\017\022\024\n\020Card_Is_"
    "Not_Suit\020\020*;\n\014BufferTypeID\022\024\n\020Buffer_Typ"
    "e_Gold\020\001\022\025\n\021Buffer_Type_Range\020\002*#\n\017Succe"
    "ssCodeType\022\020\n\014Sale_Cell_Op\020\003*\376\001\n\010AttrTyp"
    "e\022\016\n\nAttr_Level\020\000\022\r\n\tAttr_Gold\020\001\022\014\n\010Attr"
    "_Gem\020\002\022\014\n\010Attr_Exp\020\003\022\017\n\013Attr_Worker\020\004\022\022\n"
    "\016Attr_Happy_Val\020\005\022\023\n\017Attr_Friend_Val\020\006\022\026"
    "\n\022Attr_Ware_Grid_Val\020\007\022\025\n\021Attr_Carnival_"
    "Val\020\010\022\022\n\016Attr_Sweet_Val\020\t\022\024\n\020Attr_RandTo"
    "y_Val\020\n\022\026\n\022Attr_Sall_Grid_Val\020\013\022\014\n\010Attr_"
    "Max\020\024", 1125);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  AckReturnError::default_instance_ = new AckReturnError();
  AckReturnSuccess::default_instance_ = new AckReturnSuccess();
  AckUpdateAttrVal::default_instance_ = new AckUpdateAttrVal();
  RubbishData::default_instance_ = new RubbishData();
  ReqPurchaseItem::default_instance_ = new ReqPurchaseItem();
  AckReturnError::default_instance_->InitAsDefaultInstance();
  AckReturnSuccess::default_instance_->InitAsDefaultInstance();
  AckUpdateAttrVal::default_instance_->InitAsDefaultInstance();
  RubbishData::default_instance_->InitAsDefaultInstance();
  ReqPurchaseItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* ErrorCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCodeType_descriptor_;
}
bool ErrorCodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BufferTypeID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferTypeID_descriptor_;
}
bool BufferTypeID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SuccessCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuccessCodeType_descriptor_;
}
bool SuccessCodeType_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrType_descriptor_;
}
bool AttrType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AckReturnError::kReasonFieldNumber;
#endif  // !_MSC_VER

AckReturnError::AckReturnError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReturnError::InitAsDefaultInstance() {
}

AckReturnError::AckReturnError(const AckReturnError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReturnError::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReturnError::~AckReturnError() {
  SharedDtor();
}

void AckReturnError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReturnError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReturnError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReturnError_descriptor_;
}

const AckReturnError& AckReturnError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

AckReturnError* AckReturnError::default_instance_ = NULL;

AckReturnError* AckReturnError::New() const {
  return new AckReturnError;
}

void AckReturnError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReturnError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.ErrorCodeType reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::ErrorCodeType_IsValid(value)) {
            set_reason(static_cast< ::HelloKittyMsgData::ErrorCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReturnError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.ErrorCodeType reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReturnError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.ErrorCodeType reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReturnError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.ErrorCodeType reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReturnError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReturnError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReturnError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReturnError::MergeFrom(const AckReturnError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReturnError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReturnError::CopyFrom(const AckReturnError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReturnError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReturnError::Swap(AckReturnError* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReturnError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReturnError_descriptor_;
  metadata.reflection = AckReturnError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReturnSuccess::kCodeFieldNumber;
#endif  // !_MSC_VER

AckReturnSuccess::AckReturnSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReturnSuccess::InitAsDefaultInstance() {
}

AckReturnSuccess::AckReturnSuccess(const AckReturnSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReturnSuccess::SharedCtor() {
  _cached_size_ = 0;
  code_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReturnSuccess::~AckReturnSuccess() {
  SharedDtor();
}

void AckReturnSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReturnSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReturnSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReturnSuccess_descriptor_;
}

const AckReturnSuccess& AckReturnSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

AckReturnSuccess* AckReturnSuccess::default_instance_ = NULL;

AckReturnSuccess* AckReturnSuccess::New() const {
  return new AckReturnSuccess;
}

void AckReturnSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReturnSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.SuccessCodeType code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::SuccessCodeType_IsValid(value)) {
            set_code(static_cast< ::HelloKittyMsgData::SuccessCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReturnSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.SuccessCodeType code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReturnSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.SuccessCodeType code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReturnSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.SuccessCodeType code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReturnSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReturnSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReturnSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReturnSuccess::MergeFrom(const AckReturnSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReturnSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReturnSuccess::CopyFrom(const AckReturnSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReturnSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReturnSuccess::Swap(AckReturnSuccess* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReturnSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReturnSuccess_descriptor_;
  metadata.reflection = AckReturnSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateAttrVal::kUpdatecharFieldNumber;
const int AckUpdateAttrVal::kAttrtypeFieldNumber;
const int AckUpdateAttrVal::kAttrvalFieldNumber;
#endif  // !_MSC_VER

AckUpdateAttrVal::AckUpdateAttrVal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateAttrVal::InitAsDefaultInstance() {
}

AckUpdateAttrVal::AckUpdateAttrVal(const AckUpdateAttrVal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateAttrVal::SharedCtor() {
  _cached_size_ = 0;
  updatechar_ = GOOGLE_ULONGLONG(0);
  attrtype_ = 0;
  attrval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateAttrVal::~AckUpdateAttrVal() {
  SharedDtor();
}

void AckUpdateAttrVal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateAttrVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateAttrVal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateAttrVal_descriptor_;
}

const AckUpdateAttrVal& AckUpdateAttrVal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

AckUpdateAttrVal* AckUpdateAttrVal::default_instance_ = NULL;

AckUpdateAttrVal* AckUpdateAttrVal::New() const {
  return new AckUpdateAttrVal;
}

void AckUpdateAttrVal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    updatechar_ = GOOGLE_ULONGLONG(0);
    attrtype_ = 0;
    attrval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateAttrVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 updatechar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatechar_)));
          set_has_updatechar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attrtype;
        break;
      }

      // required .HelloKittyMsgData.AttrType attrtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::AttrType_IsValid(value)) {
            set_attrtype(static_cast< ::HelloKittyMsgData::AttrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attrval;
        break;
      }

      // required uint32 attrval = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrval_)));
          set_has_attrval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateAttrVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 updatechar = 1;
  if (has_updatechar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->updatechar(), output);
  }

  // required .HelloKittyMsgData.AttrType attrtype = 2;
  if (has_attrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->attrtype(), output);
  }

  // required uint32 attrval = 3;
  if (has_attrval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attrval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateAttrVal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 updatechar = 1;
  if (has_updatechar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->updatechar(), target);
  }

  // required .HelloKittyMsgData.AttrType attrtype = 2;
  if (has_attrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->attrtype(), target);
  }

  // required uint32 attrval = 3;
  if (has_attrval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attrval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateAttrVal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 updatechar = 1;
    if (has_updatechar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatechar());
    }

    // required .HelloKittyMsgData.AttrType attrtype = 2;
    if (has_attrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attrtype());
    }

    // required uint32 attrval = 3;
    if (has_attrval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateAttrVal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateAttrVal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateAttrVal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateAttrVal::MergeFrom(const AckUpdateAttrVal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatechar()) {
      set_updatechar(from.updatechar());
    }
    if (from.has_attrtype()) {
      set_attrtype(from.attrtype());
    }
    if (from.has_attrval()) {
      set_attrval(from.attrval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateAttrVal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateAttrVal::CopyFrom(const AckUpdateAttrVal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateAttrVal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckUpdateAttrVal::Swap(AckUpdateAttrVal* other) {
  if (other != this) {
    std::swap(updatechar_, other->updatechar_);
    std::swap(attrtype_, other->attrtype_);
    std::swap(attrval_, other->attrval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateAttrVal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateAttrVal_descriptor_;
  metadata.reflection = AckUpdateAttrVal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RubbishData::kRoadidFieldNumber;
const int RubbishData::kRubbishFieldNumber;
#endif  // !_MSC_VER

RubbishData::RubbishData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RubbishData::InitAsDefaultInstance() {
}

RubbishData::RubbishData(const RubbishData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RubbishData::SharedCtor() {
  _cached_size_ = 0;
  roadid_ = GOOGLE_ULONGLONG(0);
  rubbish_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RubbishData::~RubbishData() {
  SharedDtor();
}

void RubbishData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RubbishData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RubbishData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RubbishData_descriptor_;
}

const RubbishData& RubbishData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RubbishData* RubbishData::default_instance_ = NULL;

RubbishData* RubbishData::New() const {
  return new RubbishData;
}

void RubbishData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roadid_ = GOOGLE_ULONGLONG(0);
    rubbish_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RubbishData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roadid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roadid_)));
          set_has_roadid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rubbish;
        break;
      }

      // required uint32 rubbish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rubbish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rubbish_)));
          set_has_rubbish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RubbishData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roadid = 1;
  if (has_roadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roadid(), output);
  }

  // required uint32 rubbish = 2;
  if (has_rubbish()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rubbish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RubbishData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roadid = 1;
  if (has_roadid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roadid(), target);
  }

  // required uint32 rubbish = 2;
  if (has_rubbish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rubbish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RubbishData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roadid = 1;
    if (has_roadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roadid());
    }

    // required uint32 rubbish = 2;
    if (has_rubbish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rubbish());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RubbishData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RubbishData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RubbishData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RubbishData::MergeFrom(const RubbishData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roadid()) {
      set_roadid(from.roadid());
    }
    if (from.has_rubbish()) {
      set_rubbish(from.rubbish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RubbishData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RubbishData::CopyFrom(const RubbishData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RubbishData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RubbishData::Swap(RubbishData* other) {
  if (other != this) {
    std::swap(roadid_, other->roadid_);
    std::swap(rubbish_, other->rubbish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RubbishData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RubbishData_descriptor_;
  metadata.reflection = RubbishData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPurchaseItem::kItemidFieldNumber;
const int ReqPurchaseItem::kItemcountFieldNumber;
#endif  // !_MSC_VER

ReqPurchaseItem::ReqPurchaseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPurchaseItem::InitAsDefaultInstance() {
}

ReqPurchaseItem::ReqPurchaseItem(const ReqPurchaseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPurchaseItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPurchaseItem::~ReqPurchaseItem() {
  SharedDtor();
}

void ReqPurchaseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPurchaseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPurchaseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPurchaseItem_descriptor_;
}

const ReqPurchaseItem& ReqPurchaseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ReqPurchaseItem* ReqPurchaseItem::default_instance_ = NULL;

ReqPurchaseItem* ReqPurchaseItem::New() const {
  return new ReqPurchaseItem;
}

void ReqPurchaseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPurchaseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemcount;
        break;
      }

      // required uint32 itemcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPurchaseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required uint32 itemcount = 2;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPurchaseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // required uint32 itemcount = 2;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPurchaseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 itemcount = 2;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPurchaseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPurchaseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPurchaseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPurchaseItem::MergeFrom(const ReqPurchaseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPurchaseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPurchaseItem::CopyFrom(const ReqPurchaseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPurchaseItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqPurchaseItem::Swap(ReqPurchaseItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPurchaseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPurchaseItem_descriptor_;
  metadata.reflection = ReqPurchaseItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
