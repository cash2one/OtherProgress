// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "build.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* WareHouseBuildBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WareHouseBuildBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAllBuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAllBuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFlushAllBuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFlushAllBuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOneBuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOneBuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFlushOneBuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFlushOneBuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuildUpGrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuildUpGrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuildMovePlace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuildMovePlace_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuildBuilding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuildBuilding_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuildRoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuildRoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClearRoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClearRoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBuildOpReturnSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBuildOpReturnSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBuildOpReturnFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBuildOpReturnFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPickUpBuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPickUpBuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRemoveBuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRemoveBuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPickOutBuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPickOutBuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClickRewardBuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClickRewardBuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Worker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Worker_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorker_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateWorker_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckWorker_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqResetWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqResetWorker_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRecycleItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRecycleItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProduceBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProduceBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuildProduce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuildProduce_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildProduce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildProduce_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBuildProduce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBuildProduce_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateRubbish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateRubbish_reflection_ = NULL;
const ::google::protobuf::Descriptor* BufferData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BufferInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateBuffer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildStatueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildSuccessCodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildFailCodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BufferSrcType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_build_2eproto() {
  protobuf_AddDesc_build_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "build.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  WareHouseBuildBase_descriptor_ = file->message_type(1);
  static const int WareHouseBuildBase_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareHouseBuildBase, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareHouseBuildBase, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareHouseBuildBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareHouseBuildBase, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareHouseBuildBase, producetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareHouseBuildBase, durtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareHouseBuildBase, num_),
  };
  WareHouseBuildBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WareHouseBuildBase_descriptor_,
      WareHouseBuildBase::default_instance_,
      WareHouseBuildBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareHouseBuildBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareHouseBuildBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WareHouseBuildBase));
  BuildBase_descriptor_ = file->message_type(2);
  static const int BuildBase_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, durtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, producetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, rotationmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, active_),
  };
  BuildBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildBase_descriptor_,
      BuildBase::default_instance_,
      BuildBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildBase));
  ReqAllBuild_descriptor_ = file->message_type(3);
  static const int ReqAllBuild_offsets_[1] = {
  };
  ReqAllBuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAllBuild_descriptor_,
      ReqAllBuild::default_instance_,
      ReqAllBuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAllBuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAllBuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAllBuild));
  AckFlushAllBuild_descriptor_ = file->message_type(4);
  static const int AckFlushAllBuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushAllBuild, buildinfo_),
  };
  AckFlushAllBuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFlushAllBuild_descriptor_,
      AckFlushAllBuild::default_instance_,
      AckFlushAllBuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushAllBuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushAllBuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFlushAllBuild));
  ReqOneBuild_descriptor_ = file->message_type(5);
  static const int ReqOneBuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOneBuild, tempid_),
  };
  ReqOneBuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOneBuild_descriptor_,
      ReqOneBuild::default_instance_,
      ReqOneBuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOneBuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOneBuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOneBuild));
  AckFlushOneBuild_descriptor_ = file->message_type(6);
  static const int AckFlushOneBuild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushOneBuild, updatecharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushOneBuild, buildinfo_),
  };
  AckFlushOneBuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFlushOneBuild_descriptor_,
      AckFlushOneBuild::default_instance_,
      AckFlushOneBuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushOneBuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushOneBuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFlushOneBuild));
  ReqBuildUpGrade_descriptor_ = file->message_type(7);
  static const int ReqBuildUpGrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildUpGrade, tempid_),
  };
  ReqBuildUpGrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuildUpGrade_descriptor_,
      ReqBuildUpGrade::default_instance_,
      ReqBuildUpGrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildUpGrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildUpGrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuildUpGrade));
  ReqBuildMovePlace_descriptor_ = file->message_type(8);
  static const int ReqBuildMovePlace_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildMovePlace, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildMovePlace, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildMovePlace, moveflg_),
  };
  ReqBuildMovePlace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuildMovePlace_descriptor_,
      ReqBuildMovePlace::default_instance_,
      ReqBuildMovePlace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildMovePlace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildMovePlace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuildMovePlace));
  ReqBuildBuilding_descriptor_ = file->message_type(9);
  static const int ReqBuildBuilding_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildBuilding, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildBuilding, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildBuilding, moveflg_),
  };
  ReqBuildBuilding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuildBuilding_descriptor_,
      ReqBuildBuilding::default_instance_,
      ReqBuildBuilding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildBuilding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildBuilding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuildBuilding));
  ReqBuildRoad_descriptor_ = file->message_type(10);
  static const int ReqBuildRoad_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildRoad, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildRoad, point_),
  };
  ReqBuildRoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuildRoad_descriptor_,
      ReqBuildRoad::default_instance_,
      ReqBuildRoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildRoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildRoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuildRoad));
  ReqClearRoad_descriptor_ = file->message_type(11);
  static const int ReqClearRoad_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClearRoad, tempid_),
  };
  ReqClearRoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqClearRoad_descriptor_,
      ReqClearRoad::default_instance_,
      ReqClearRoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClearRoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClearRoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqClearRoad));
  AckBuildOpReturnSuccess_descriptor_ = file->message_type(12);
  static const int AckBuildOpReturnSuccess_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnSuccess, updatecharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnSuccess, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnSuccess, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnSuccess, buildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnSuccess, oldpoint_),
  };
  AckBuildOpReturnSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBuildOpReturnSuccess_descriptor_,
      AckBuildOpReturnSuccess::default_instance_,
      AckBuildOpReturnSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBuildOpReturnSuccess));
  AckBuildOpReturnFail_descriptor_ = file->message_type(13);
  static const int AckBuildOpReturnFail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnFail, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnFail, commoncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnFail, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnFail, buildinfo_),
  };
  AckBuildOpReturnFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBuildOpReturnFail_descriptor_,
      AckBuildOpReturnFail::default_instance_,
      AckBuildOpReturnFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildOpReturnFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBuildOpReturnFail));
  ReqPickUpBuid_descriptor_ = file->message_type(14);
  static const int ReqPickUpBuid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickUpBuid, tempid_),
  };
  ReqPickUpBuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPickUpBuid_descriptor_,
      ReqPickUpBuid::default_instance_,
      ReqPickUpBuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickUpBuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickUpBuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPickUpBuid));
  AckRemoveBuid_descriptor_ = file->message_type(15);
  static const int AckRemoveBuid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRemoveBuid, updatecharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRemoveBuid, tempid_),
  };
  AckRemoveBuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRemoveBuid_descriptor_,
      AckRemoveBuid::default_instance_,
      AckRemoveBuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRemoveBuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRemoveBuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRemoveBuid));
  ReqPickOutBuid_descriptor_ = file->message_type(16);
  static const int ReqPickOutBuid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickOutBuid, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickOutBuid, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickOutBuid, moveflg_),
  };
  ReqPickOutBuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPickOutBuid_descriptor_,
      ReqPickOutBuid::default_instance_,
      ReqPickOutBuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickOutBuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickOutBuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPickOutBuid));
  ReqClickRewardBuid_descriptor_ = file->message_type(17);
  static const int ReqClickRewardBuid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClickRewardBuid, tempid_),
  };
  ReqClickRewardBuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqClickRewardBuid_descriptor_,
      ReqClickRewardBuid::default_instance_,
      ReqClickRewardBuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClickRewardBuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClickRewardBuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqClickRewardBuid));
  Worker_descriptor_ = file->message_type(18);
  static const int Worker_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Worker, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Worker, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Worker, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Worker, lastsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Worker, build_),
  };
  Worker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Worker_descriptor_,
      Worker::default_instance_,
      Worker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Worker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Worker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Worker));
  ReqWorker_descriptor_ = file->message_type(19);
  static const int ReqWorker_offsets_[1] = {
  };
  ReqWorker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWorker_descriptor_,
      ReqWorker::default_instance_,
      ReqWorker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWorker));
  AckUpdateWorker_descriptor_ = file->message_type(20);
  static const int AckUpdateWorker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateWorker, worker_),
  };
  AckUpdateWorker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateWorker_descriptor_,
      AckUpdateWorker::default_instance_,
      AckUpdateWorker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateWorker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateWorker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateWorker));
  AckWorker_descriptor_ = file->message_type(21);
  static const int AckWorker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWorker, worker_),
  };
  AckWorker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckWorker_descriptor_,
      AckWorker::default_instance_,
      AckWorker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWorker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWorker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckWorker));
  ReqResetWorker_descriptor_ = file->message_type(22);
  static const int ReqResetWorker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResetWorker, workerid_),
  };
  ReqResetWorker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqResetWorker_descriptor_,
      ReqResetWorker::default_instance_,
      ReqResetWorker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResetWorker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResetWorker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqResetWorker));
  ReqRecycleItem_descriptor_ = file->message_type(23);
  static const int ReqRecycleItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecycleItem, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecycleItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecycleItem, itemnum_),
  };
  ReqRecycleItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRecycleItem_descriptor_,
      ReqRecycleItem::default_instance_,
      ReqRecycleItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecycleItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecycleItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRecycleItem));
  ProduceBase_descriptor_ = file->message_type(24);
  static const int ProduceBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceBase, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceBase, value_),
  };
  ProduceBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProduceBase_descriptor_,
      ProduceBase::default_instance_,
      ProduceBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProduceBase));
  ReqBuildProduce_descriptor_ = file->message_type(25);
  static const int ReqBuildProduce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildProduce, tempid_),
  };
  ReqBuildProduce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuildProduce_descriptor_,
      ReqBuildProduce::default_instance_,
      ReqBuildProduce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildProduce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuildProduce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuildProduce));
  BuildProduce_descriptor_ = file->message_type(26);
  static const int BuildProduce_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildProduce, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildProduce, produce_),
  };
  BuildProduce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildProduce_descriptor_,
      BuildProduce::default_instance_,
      BuildProduce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildProduce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildProduce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildProduce));
  AckBuildProduce_descriptor_ = file->message_type(27);
  static const int AckBuildProduce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildProduce, produce_),
  };
  AckBuildProduce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBuildProduce_descriptor_,
      AckBuildProduce::default_instance_,
      AckBuildProduce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildProduce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuildProduce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBuildProduce));
  AckUpdateRubbish_descriptor_ = file->message_type(28);
  static const int AckUpdateRubbish_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateRubbish, updatecharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateRubbish, rubbish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateRubbish, optype_),
  };
  AckUpdateRubbish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateRubbish_descriptor_,
      AckUpdateRubbish::default_instance_,
      AckUpdateRubbish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateRubbish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateRubbish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateRubbish));
  BufferData_descriptor_ = file->message_type(29);
  static const int BufferData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, bufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, srctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, value_),
  };
  BufferData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BufferData_descriptor_,
      BufferData::default_instance_,
      BufferData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BufferData));
  BufferInfo_descriptor_ = file->message_type(30);
  static const int BufferInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, bufferdata_),
  };
  BufferInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BufferInfo_descriptor_,
      BufferInfo::default_instance_,
      BufferInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BufferInfo));
  AckUpdateBuffer_descriptor_ = file->message_type(31);
  static const int AckUpdateBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateBuffer, bufferinfo_),
  };
  AckUpdateBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateBuffer_descriptor_,
      AckUpdateBuffer::default_instance_,
      AckUpdateBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateBuffer));
  BuildStatueType_descriptor_ = file->enum_type(0);
  BuildSuccessCodeType_descriptor_ = file->enum_type(1);
  BuildFailCodeType_descriptor_ = file->enum_type(2);
  BufferSrcType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_build_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WareHouseBuildBase_descriptor_, &WareHouseBuildBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildBase_descriptor_, &BuildBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAllBuild_descriptor_, &ReqAllBuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFlushAllBuild_descriptor_, &AckFlushAllBuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOneBuild_descriptor_, &ReqOneBuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFlushOneBuild_descriptor_, &AckFlushOneBuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuildUpGrade_descriptor_, &ReqBuildUpGrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuildMovePlace_descriptor_, &ReqBuildMovePlace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuildBuilding_descriptor_, &ReqBuildBuilding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuildRoad_descriptor_, &ReqBuildRoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqClearRoad_descriptor_, &ReqClearRoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBuildOpReturnSuccess_descriptor_, &AckBuildOpReturnSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBuildOpReturnFail_descriptor_, &AckBuildOpReturnFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPickUpBuid_descriptor_, &ReqPickUpBuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRemoveBuid_descriptor_, &AckRemoveBuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPickOutBuid_descriptor_, &ReqPickOutBuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqClickRewardBuid_descriptor_, &ReqClickRewardBuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Worker_descriptor_, &Worker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWorker_descriptor_, &ReqWorker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateWorker_descriptor_, &AckUpdateWorker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckWorker_descriptor_, &AckWorker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqResetWorker_descriptor_, &ReqResetWorker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRecycleItem_descriptor_, &ReqRecycleItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProduceBase_descriptor_, &ProduceBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuildProduce_descriptor_, &ReqBuildProduce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildProduce_descriptor_, &BuildProduce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBuildProduce_descriptor_, &AckBuildProduce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateRubbish_descriptor_, &AckUpdateRubbish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BufferData_descriptor_, &BufferData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BufferInfo_descriptor_, &BufferInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateBuffer_descriptor_, &AckUpdateBuffer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_build_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete WareHouseBuildBase::default_instance_;
  delete WareHouseBuildBase_reflection_;
  delete BuildBase::default_instance_;
  delete BuildBase_reflection_;
  delete ReqAllBuild::default_instance_;
  delete ReqAllBuild_reflection_;
  delete AckFlushAllBuild::default_instance_;
  delete AckFlushAllBuild_reflection_;
  delete ReqOneBuild::default_instance_;
  delete ReqOneBuild_reflection_;
  delete AckFlushOneBuild::default_instance_;
  delete AckFlushOneBuild_reflection_;
  delete ReqBuildUpGrade::default_instance_;
  delete ReqBuildUpGrade_reflection_;
  delete ReqBuildMovePlace::default_instance_;
  delete ReqBuildMovePlace_reflection_;
  delete ReqBuildBuilding::default_instance_;
  delete ReqBuildBuilding_reflection_;
  delete ReqBuildRoad::default_instance_;
  delete ReqBuildRoad_reflection_;
  delete ReqClearRoad::default_instance_;
  delete ReqClearRoad_reflection_;
  delete AckBuildOpReturnSuccess::default_instance_;
  delete AckBuildOpReturnSuccess_reflection_;
  delete AckBuildOpReturnFail::default_instance_;
  delete AckBuildOpReturnFail_reflection_;
  delete ReqPickUpBuid::default_instance_;
  delete ReqPickUpBuid_reflection_;
  delete AckRemoveBuid::default_instance_;
  delete AckRemoveBuid_reflection_;
  delete ReqPickOutBuid::default_instance_;
  delete ReqPickOutBuid_reflection_;
  delete ReqClickRewardBuid::default_instance_;
  delete ReqClickRewardBuid_reflection_;
  delete Worker::default_instance_;
  delete Worker_reflection_;
  delete ReqWorker::default_instance_;
  delete ReqWorker_reflection_;
  delete AckUpdateWorker::default_instance_;
  delete AckUpdateWorker_reflection_;
  delete AckWorker::default_instance_;
  delete AckWorker_reflection_;
  delete ReqResetWorker::default_instance_;
  delete ReqResetWorker_reflection_;
  delete ReqRecycleItem::default_instance_;
  delete ReqRecycleItem_reflection_;
  delete ProduceBase::default_instance_;
  delete ProduceBase_reflection_;
  delete ReqBuildProduce::default_instance_;
  delete ReqBuildProduce_reflection_;
  delete BuildProduce::default_instance_;
  delete BuildProduce_reflection_;
  delete AckBuildProduce::default_instance_;
  delete AckBuildProduce_reflection_;
  delete AckUpdateRubbish::default_instance_;
  delete AckUpdateRubbish_reflection_;
  delete BufferData::default_instance_;
  delete BufferData_reflection_;
  delete BufferInfo::default_instance_;
  delete BufferInfo_reflection_;
  delete AckUpdateBuffer::default_instance_;
  delete AckUpdateBuffer_reflection_;
}

void protobuf_AddDesc_build_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013build.proto\022\021HelloKittyMsgData\032\014common"
    ".proto\"\035\n\005Point\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"\204\001"
    "\n\022WareHouseBuildBase\022\016\n\006cellid\030\001 \002(\r\022\014\n\004"
    "type\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022\016\n\006status\030\004 \002("
    "\r\022\023\n\013producetime\030\005 \002(\r\022\017\n\007durtime\030\006 \002(\r\022"
    "\013\n\003num\030\007 \002(\r\"\313\001\n\tBuildBase\022\016\n\006tempid\030\001 \002"
    "(\004\022\014\n\004type\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022\'\n\005point"
    "\030\004 \002(\0132\030.HelloKittyMsgData.Point\022\016\n\006stat"
    "us\030\005 \002(\r\022\017\n\007durtime\030\006 \002(\r\022\023\n\013producetime"
    "\030\007 \002(\r\022\033\n\014rotationmark\030\010 \002(\010:\005false\022\025\n\006a"
    "ctive\030\t \002(\010:\005false\"\r\n\013ReqAllBuild\"C\n\020Ack"
    "FlushAllBuild\022/\n\tbuildinfo\030\001 \003(\0132\034.Hello"
    "KittyMsgData.BuildBase\"\035\n\013ReqOneBuild\022\016\n"
    "\006tempid\030\001 \002(\004\"Y\n\020AckFlushOneBuild\022\024\n\014upd"
    "atecharid\030\001 \002(\004\022/\n\tbuildinfo\030\002 \002(\0132\034.Hel"
    "loKittyMsgData.BuildBase\"!\n\017ReqBuildUpGr"
    "ade\022\016\n\006tempid\030\001 \002(\004\"c\n\021ReqBuildMovePlace"
    "\022\016\n\006tempid\030\001 \002(\004\022\'\n\005point\030\002 \002(\0132\030.HelloK"
    "ittyMsgData.Point\022\025\n\007moveflg\030\003 \002(\010:\004true"
    "\"`\n\020ReqBuildBuilding\022\014\n\004type\030\001 \002(\r\022\'\n\005po"
    "int\030\002 \002(\0132\030.HelloKittyMsgData.Point\022\025\n\007m"
    "oveflg\030\003 \002(\010:\004true\"E\n\014ReqBuildRoad\022\014\n\004ty"
    "pe\030\001 \002(\r\022\'\n\005point\030\002 \003(\0132\030.HelloKittyMsgD"
    "ata.Point\"\036\n\014ReqClearRoad\022\016\n\006tempid\030\001 \003("
    "\004\"\323\001\n\027AckBuildOpReturnSuccess\022\024\n\014updatec"
    "harid\030\001 \002(\004\022\016\n\006tempid\030\002 \002(\004\0225\n\004code\030\003 \002("
    "\0162\'.HelloKittyMsgData.BuildSuccessCodeTy"
    "pe\022/\n\tbuildinfo\030\004 \002(\0132\034.HelloKittyMsgDat"
    "a.BuildBase\022*\n\010oldpoint\030\005 \002(\0132\030.HelloKit"
    "tyMsgData.Point\"\301\001\n\024AckBuildOpReturnFail"
    "\022\016\n\006tempid\030\001 \002(\004\0224\n\ncommoncode\030\002 \002(\0162 .H"
    "elloKittyMsgData.ErrorCodeType\0222\n\004code\030\003"
    " \002(\0162$.HelloKittyMsgData.BuildFailCodeTy"
    "pe\022/\n\tbuildinfo\030\004 \002(\0132\034.HelloKittyMsgDat"
    "a.BuildBase\"\037\n\rReqPickUpBuid\022\016\n\006tempid\030\001"
    " \002(\004\"5\n\rAckRemoveBuid\022\024\n\014updatecharid\030\001 "
    "\002(\004\022\016\n\006tempid\030\002 \002(\004\"`\n\016ReqPickOutBuid\022\016\n"
    "\006cellid\030\001 \002(\r\022\'\n\005point\030\002 \002(\0132\030.HelloKitt"
    "yMsgData.Point\022\025\n\007moveflg\030\003 \002(\010:\004true\"$\n"
    "\022ReqClickRewardBuid\022\016\n\006tempid\030\001 \002(\004\"S\n\006W"
    "orker\022\n\n\002id\030\001 \002(\r\022\021\n\tstarttime\030\002 \002(\r\022\n\n\002"
    "cd\030\003 \002(\r\022\017\n\007lastsec\030\004 \002(\r\022\r\n\005build\030\005 \002(\r"
    "\"\013\n\tReqWorker\"<\n\017AckUpdateWorker\022)\n\006work"
    "er\030\001 \002(\0132\031.HelloKittyMsgData.Worker\"6\n\tA"
    "ckWorker\022)\n\006worker\030\001 \003(\0132\031.HelloKittyMsg"
    "Data.Worker\"\"\n\016ReqResetWorker\022\020\n\010workeri"
    "d\030\001 \002(\r\"A\n\016ReqRecycleItem\022\016\n\006tempid\030\001 \002("
    "\004\022\016\n\006itemid\030\002 \002(\r\022\017\n\007itemnum\030\003 \002(\r\",\n\013Pr"
    "oduceBase\022\016\n\006itemid\030\001 \002(\r\022\r\n\005value\030\002 \002(\r"
    "\"!\n\017ReqBuildProduce\022\016\n\006tempid\030\001 \003(\004\"O\n\014B"
    "uildProduce\022\016\n\006tempid\030\001 \002(\004\022/\n\007produce\030\002"
    " \003(\0132\036.HelloKittyMsgData.ProduceBase\"C\n\017"
    "AckBuildProduce\0220\n\007produce\030\001 \003(\0132\037.Hello"
    "KittyMsgData.BuildProduce\"i\n\020AckUpdateRu"
    "bbish\022\024\n\014updatecharid\030\001 \002(\004\022/\n\007rubbish\030\002"
    " \002(\0132\036.HelloKittyMsgData.RubbishData\022\016\n\006"
    "optype\030\003 \002(\r\"\265\001\n\nBufferData\0221\n\010bufferid\030"
    "\001 \002(\0162\037.HelloKittyMsgData.BufferTypeID\022\r"
    "\n\005srcid\030\002 \002(\004\0221\n\007srctype\030\003 \002(\0162 .HelloKi"
    "ttyMsgData.BufferSrcType\022\021\n\tbegintime\030\004 "
    "\002(\r\022\020\n\010lasttime\030\005 \002(\r\022\r\n\005value\030\006 \002(\r\"O\n\n"
    "BufferInfo\022\016\n\006tempid\030\001 \002(\004\0221\n\nbufferdata"
    "\030\002 \003(\0132\035.HelloKittyMsgData.BufferData\"D\n"
    "\017AckUpdateBuffer\0221\n\nbufferinfo\030\001 \002(\0132\035.H"
    "elloKittyMsgData.BufferInfo*^\n\017BuildStat"
    "ueType\022\027\n\023Build_Status_Normal\020\001\022\033\n\027Build"
    "_Status_Wait_Click\020\002\022\025\n\021Build_Status_Sto"
    "p\020\004*b\n\024BuildSuccessCodeType\022\022\n\016Build_Up_"
    "Grade\020\000\022\016\n\nBuild_Move\020\001\022\022\n\016Build_Buildin"
    "g\020\002\022\022\n\016Build_Rotation\020\003*}\n\021BuildFailCode"
    "Type\022\021\n\rBuild_Occcupy\020\000\022\027\n\023Build_Premise"
    "_Limit\020\001\022\017\n\013Build_Error\020\002\022\024\n\020Build_Full_"
    "Level\020\003\022\025\n\021Build_Type_Enough\020\004*<\n\rBuffer"
    "SrcType\022\014\n\010BST_Item\020\000\022\r\n\tBST_Build\020\001\022\016\n\n"
    "BST_Divine\020\002", 2972);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "build.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  WareHouseBuildBase::default_instance_ = new WareHouseBuildBase();
  BuildBase::default_instance_ = new BuildBase();
  ReqAllBuild::default_instance_ = new ReqAllBuild();
  AckFlushAllBuild::default_instance_ = new AckFlushAllBuild();
  ReqOneBuild::default_instance_ = new ReqOneBuild();
  AckFlushOneBuild::default_instance_ = new AckFlushOneBuild();
  ReqBuildUpGrade::default_instance_ = new ReqBuildUpGrade();
  ReqBuildMovePlace::default_instance_ = new ReqBuildMovePlace();
  ReqBuildBuilding::default_instance_ = new ReqBuildBuilding();
  ReqBuildRoad::default_instance_ = new ReqBuildRoad();
  ReqClearRoad::default_instance_ = new ReqClearRoad();
  AckBuildOpReturnSuccess::default_instance_ = new AckBuildOpReturnSuccess();
  AckBuildOpReturnFail::default_instance_ = new AckBuildOpReturnFail();
  ReqPickUpBuid::default_instance_ = new ReqPickUpBuid();
  AckRemoveBuid::default_instance_ = new AckRemoveBuid();
  ReqPickOutBuid::default_instance_ = new ReqPickOutBuid();
  ReqClickRewardBuid::default_instance_ = new ReqClickRewardBuid();
  Worker::default_instance_ = new Worker();
  ReqWorker::default_instance_ = new ReqWorker();
  AckUpdateWorker::default_instance_ = new AckUpdateWorker();
  AckWorker::default_instance_ = new AckWorker();
  ReqResetWorker::default_instance_ = new ReqResetWorker();
  ReqRecycleItem::default_instance_ = new ReqRecycleItem();
  ProduceBase::default_instance_ = new ProduceBase();
  ReqBuildProduce::default_instance_ = new ReqBuildProduce();
  BuildProduce::default_instance_ = new BuildProduce();
  AckBuildProduce::default_instance_ = new AckBuildProduce();
  AckUpdateRubbish::default_instance_ = new AckUpdateRubbish();
  BufferData::default_instance_ = new BufferData();
  BufferInfo::default_instance_ = new BufferInfo();
  AckUpdateBuffer::default_instance_ = new AckUpdateBuffer();
  Point::default_instance_->InitAsDefaultInstance();
  WareHouseBuildBase::default_instance_->InitAsDefaultInstance();
  BuildBase::default_instance_->InitAsDefaultInstance();
  ReqAllBuild::default_instance_->InitAsDefaultInstance();
  AckFlushAllBuild::default_instance_->InitAsDefaultInstance();
  ReqOneBuild::default_instance_->InitAsDefaultInstance();
  AckFlushOneBuild::default_instance_->InitAsDefaultInstance();
  ReqBuildUpGrade::default_instance_->InitAsDefaultInstance();
  ReqBuildMovePlace::default_instance_->InitAsDefaultInstance();
  ReqBuildBuilding::default_instance_->InitAsDefaultInstance();
  ReqBuildRoad::default_instance_->InitAsDefaultInstance();
  ReqClearRoad::default_instance_->InitAsDefaultInstance();
  AckBuildOpReturnSuccess::default_instance_->InitAsDefaultInstance();
  AckBuildOpReturnFail::default_instance_->InitAsDefaultInstance();
  ReqPickUpBuid::default_instance_->InitAsDefaultInstance();
  AckRemoveBuid::default_instance_->InitAsDefaultInstance();
  ReqPickOutBuid::default_instance_->InitAsDefaultInstance();
  ReqClickRewardBuid::default_instance_->InitAsDefaultInstance();
  Worker::default_instance_->InitAsDefaultInstance();
  ReqWorker::default_instance_->InitAsDefaultInstance();
  AckUpdateWorker::default_instance_->InitAsDefaultInstance();
  AckWorker::default_instance_->InitAsDefaultInstance();
  ReqResetWorker::default_instance_->InitAsDefaultInstance();
  ReqRecycleItem::default_instance_->InitAsDefaultInstance();
  ProduceBase::default_instance_->InitAsDefaultInstance();
  ReqBuildProduce::default_instance_->InitAsDefaultInstance();
  BuildProduce::default_instance_->InitAsDefaultInstance();
  AckBuildProduce::default_instance_->InitAsDefaultInstance();
  AckUpdateRubbish::default_instance_->InitAsDefaultInstance();
  BufferData::default_instance_->InitAsDefaultInstance();
  BufferInfo::default_instance_->InitAsDefaultInstance();
  AckUpdateBuffer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_build_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_build_2eproto {
  StaticDescriptorInitializer_build_2eproto() {
    protobuf_AddDesc_build_2eproto();
  }
} static_descriptor_initializer_build_2eproto_;
const ::google::protobuf::EnumDescriptor* BuildStatueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildStatueType_descriptor_;
}
bool BuildStatueType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuildSuccessCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildSuccessCodeType_descriptor_;
}
bool BuildSuccessCodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuildFailCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildFailCodeType_descriptor_;
}
bool BuildFailCodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BufferSrcType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferSrcType_descriptor_;
}
bool BufferSrcType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WareHouseBuildBase::kCellidFieldNumber;
const int WareHouseBuildBase::kTypeFieldNumber;
const int WareHouseBuildBase::kLevelFieldNumber;
const int WareHouseBuildBase::kStatusFieldNumber;
const int WareHouseBuildBase::kProducetimeFieldNumber;
const int WareHouseBuildBase::kDurtimeFieldNumber;
const int WareHouseBuildBase::kNumFieldNumber;
#endif  // !_MSC_VER

WareHouseBuildBase::WareHouseBuildBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WareHouseBuildBase::InitAsDefaultInstance() {
}

WareHouseBuildBase::WareHouseBuildBase(const WareHouseBuildBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WareHouseBuildBase::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  type_ = 0u;
  level_ = 0u;
  status_ = 0u;
  producetime_ = 0u;
  durtime_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WareHouseBuildBase::~WareHouseBuildBase() {
  SharedDtor();
}

void WareHouseBuildBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WareHouseBuildBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WareHouseBuildBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WareHouseBuildBase_descriptor_;
}

const WareHouseBuildBase& WareHouseBuildBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

WareHouseBuildBase* WareHouseBuildBase::default_instance_ = NULL;

WareHouseBuildBase* WareHouseBuildBase::New() const {
  return new WareHouseBuildBase;
}

void WareHouseBuildBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    type_ = 0u;
    level_ = 0u;
    status_ = 0u;
    producetime_ = 0u;
    durtime_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WareHouseBuildBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_producetime;
        break;
      }

      // required uint32 producetime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_producetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producetime_)));
          set_has_producetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_durtime;
        break;
      }

      // required uint32 durtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &durtime_)));
          set_has_durtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_num;
        break;
      }

      // required uint32 num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WareHouseBuildBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellid = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // required uint32 producetime = 5;
  if (has_producetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->producetime(), output);
  }

  // required uint32 durtime = 6;
  if (has_durtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->durtime(), output);
  }

  // required uint32 num = 7;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WareHouseBuildBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellid = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // required uint32 producetime = 5;
  if (has_producetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->producetime(), target);
  }

  // required uint32 durtime = 6;
  if (has_durtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->durtime(), target);
  }

  // required uint32 num = 7;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WareHouseBuildBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellid = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 producetime = 5;
    if (has_producetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producetime());
    }

    // required uint32 durtime = 6;
    if (has_durtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->durtime());
    }

    // required uint32 num = 7;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WareHouseBuildBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WareHouseBuildBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WareHouseBuildBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WareHouseBuildBase::MergeFrom(const WareHouseBuildBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_producetime()) {
      set_producetime(from.producetime());
    }
    if (from.has_durtime()) {
      set_durtime(from.durtime());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WareHouseBuildBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WareHouseBuildBase::CopyFrom(const WareHouseBuildBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WareHouseBuildBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void WareHouseBuildBase::Swap(WareHouseBuildBase* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(status_, other->status_);
    std::swap(producetime_, other->producetime_);
    std::swap(durtime_, other->durtime_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WareHouseBuildBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WareHouseBuildBase_descriptor_;
  metadata.reflection = WareHouseBuildBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildBase::kTempidFieldNumber;
const int BuildBase::kTypeFieldNumber;
const int BuildBase::kLevelFieldNumber;
const int BuildBase::kPointFieldNumber;
const int BuildBase::kStatusFieldNumber;
const int BuildBase::kDurtimeFieldNumber;
const int BuildBase::kProducetimeFieldNumber;
const int BuildBase::kRotationmarkFieldNumber;
const int BuildBase::kActiveFieldNumber;
#endif  // !_MSC_VER

BuildBase::BuildBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildBase::InitAsDefaultInstance() {
  point_ = const_cast< ::HelloKittyMsgData::Point*>(&::HelloKittyMsgData::Point::default_instance());
}

BuildBase::BuildBase(const BuildBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildBase::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  level_ = 0u;
  point_ = NULL;
  status_ = 0u;
  durtime_ = 0u;
  producetime_ = 0u;
  rotationmark_ = false;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildBase::~BuildBase() {
  SharedDtor();
}

void BuildBase::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void BuildBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildBase_descriptor_;
}

const BuildBase& BuildBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

BuildBase* BuildBase::default_instance_ = NULL;

BuildBase* BuildBase::New() const {
  return new BuildBase;
}

void BuildBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    level_ = 0u;
    if (has_point()) {
      if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
    }
    status_ = 0u;
    durtime_ = 0u;
    producetime_ = 0u;
    rotationmark_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    active_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_point;
        break;
      }

      // required .HelloKittyMsgData.Point point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_durtime;
        break;
      }

      // required uint32 durtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &durtime_)));
          set_has_durtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_producetime;
        break;
      }

      // required uint32 producetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_producetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producetime_)));
          set_has_producetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rotationmark;
        break;
      }

      // required bool rotationmark = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotationmark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotationmark_)));
          set_has_rotationmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_active;
        break;
      }

      // required bool active = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required .HelloKittyMsgData.Point point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->point(), output);
  }

  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // required uint32 durtime = 6;
  if (has_durtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->durtime(), output);
  }

  // required uint32 producetime = 7;
  if (has_producetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->producetime(), output);
  }

  // required bool rotationmark = 8 [default = false];
  if (has_rotationmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->rotationmark(), output);
  }

  // required bool active = 9 [default = false];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required .HelloKittyMsgData.Point point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->point(), target);
  }

  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // required uint32 durtime = 6;
  if (has_durtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->durtime(), target);
  }

  // required uint32 producetime = 7;
  if (has_producetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->producetime(), target);
  }

  // required bool rotationmark = 8 [default = false];
  if (has_rotationmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->rotationmark(), target);
  }

  // required bool active = 9 [default = false];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required .HelloKittyMsgData.Point point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 durtime = 6;
    if (has_durtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->durtime());
    }

    // required uint32 producetime = 7;
    if (has_producetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producetime());
    }

    // required bool rotationmark = 8 [default = false];
    if (has_rotationmark()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool active = 9 [default = false];
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildBase::MergeFrom(const BuildBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_point()) {
      mutable_point()->::HelloKittyMsgData::Point::MergeFrom(from.point());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_durtime()) {
      set_durtime(from.durtime());
    }
    if (from.has_producetime()) {
      set_producetime(from.producetime());
    }
    if (from.has_rotationmark()) {
      set_rotationmark(from.rotationmark());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildBase::CopyFrom(const BuildBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void BuildBase::Swap(BuildBase* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(point_, other->point_);
    std::swap(status_, other->status_);
    std::swap(durtime_, other->durtime_);
    std::swap(producetime_, other->producetime_);
    std::swap(rotationmark_, other->rotationmark_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildBase_descriptor_;
  metadata.reflection = BuildBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqAllBuild::ReqAllBuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAllBuild::InitAsDefaultInstance() {
}

ReqAllBuild::ReqAllBuild(const ReqAllBuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAllBuild::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAllBuild::~ReqAllBuild() {
  SharedDtor();
}

void ReqAllBuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAllBuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAllBuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAllBuild_descriptor_;
}

const ReqAllBuild& ReqAllBuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqAllBuild* ReqAllBuild::default_instance_ = NULL;

ReqAllBuild* ReqAllBuild::New() const {
  return new ReqAllBuild;
}

void ReqAllBuild::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAllBuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqAllBuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAllBuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAllBuild::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAllBuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAllBuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAllBuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAllBuild::MergeFrom(const ReqAllBuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAllBuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAllBuild::CopyFrom(const ReqAllBuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAllBuild::IsInitialized() const {

  return true;
}

void ReqAllBuild::Swap(ReqAllBuild* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAllBuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAllBuild_descriptor_;
  metadata.reflection = ReqAllBuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFlushAllBuild::kBuildinfoFieldNumber;
#endif  // !_MSC_VER

AckFlushAllBuild::AckFlushAllBuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFlushAllBuild::InitAsDefaultInstance() {
}

AckFlushAllBuild::AckFlushAllBuild(const AckFlushAllBuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFlushAllBuild::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFlushAllBuild::~AckFlushAllBuild() {
  SharedDtor();
}

void AckFlushAllBuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckFlushAllBuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFlushAllBuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFlushAllBuild_descriptor_;
}

const AckFlushAllBuild& AckFlushAllBuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

AckFlushAllBuild* AckFlushAllBuild::default_instance_ = NULL;

AckFlushAllBuild* AckFlushAllBuild::New() const {
  return new AckFlushAllBuild;
}

void AckFlushAllBuild::Clear() {
  buildinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFlushAllBuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.BuildBase buildinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buildinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFlushAllBuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.BuildBase buildinfo = 1;
  for (int i = 0; i < this->buildinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buildinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFlushAllBuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.BuildBase buildinfo = 1;
  for (int i = 0; i < this->buildinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buildinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFlushAllBuild::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.BuildBase buildinfo = 1;
  total_size += 1 * this->buildinfo_size();
  for (int i = 0; i < this->buildinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFlushAllBuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFlushAllBuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFlushAllBuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFlushAllBuild::MergeFrom(const AckFlushAllBuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildinfo_.MergeFrom(from.buildinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFlushAllBuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFlushAllBuild::CopyFrom(const AckFlushAllBuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFlushAllBuild::IsInitialized() const {

  for (int i = 0; i < buildinfo_size(); i++) {
    if (!this->buildinfo(i).IsInitialized()) return false;
  }
  return true;
}

void AckFlushAllBuild::Swap(AckFlushAllBuild* other) {
  if (other != this) {
    buildinfo_.Swap(&other->buildinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFlushAllBuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFlushAllBuild_descriptor_;
  metadata.reflection = AckFlushAllBuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOneBuild::kTempidFieldNumber;
#endif  // !_MSC_VER

ReqOneBuild::ReqOneBuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOneBuild::InitAsDefaultInstance() {
}

ReqOneBuild::ReqOneBuild(const ReqOneBuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOneBuild::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOneBuild::~ReqOneBuild() {
  SharedDtor();
}

void ReqOneBuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOneBuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOneBuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOneBuild_descriptor_;
}

const ReqOneBuild& ReqOneBuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqOneBuild* ReqOneBuild::default_instance_ = NULL;

ReqOneBuild* ReqOneBuild::New() const {
  return new ReqOneBuild;
}

void ReqOneBuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOneBuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOneBuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOneBuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOneBuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOneBuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOneBuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOneBuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOneBuild::MergeFrom(const ReqOneBuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOneBuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOneBuild::CopyFrom(const ReqOneBuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOneBuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOneBuild::Swap(ReqOneBuild* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOneBuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOneBuild_descriptor_;
  metadata.reflection = ReqOneBuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFlushOneBuild::kUpdatecharidFieldNumber;
const int AckFlushOneBuild::kBuildinfoFieldNumber;
#endif  // !_MSC_VER

AckFlushOneBuild::AckFlushOneBuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFlushOneBuild::InitAsDefaultInstance() {
  buildinfo_ = const_cast< ::HelloKittyMsgData::BuildBase*>(&::HelloKittyMsgData::BuildBase::default_instance());
}

AckFlushOneBuild::AckFlushOneBuild(const AckFlushOneBuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFlushOneBuild::SharedCtor() {
  _cached_size_ = 0;
  updatecharid_ = GOOGLE_ULONGLONG(0);
  buildinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFlushOneBuild::~AckFlushOneBuild() {
  SharedDtor();
}

void AckFlushOneBuild::SharedDtor() {
  if (this != default_instance_) {
    delete buildinfo_;
  }
}

void AckFlushOneBuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFlushOneBuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFlushOneBuild_descriptor_;
}

const AckFlushOneBuild& AckFlushOneBuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

AckFlushOneBuild* AckFlushOneBuild::default_instance_ = NULL;

AckFlushOneBuild* AckFlushOneBuild::New() const {
  return new AckFlushOneBuild;
}

void AckFlushOneBuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    updatecharid_ = GOOGLE_ULONGLONG(0);
    if (has_buildinfo()) {
      if (buildinfo_ != NULL) buildinfo_->::HelloKittyMsgData::BuildBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFlushOneBuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 updatecharid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatecharid_)));
          set_has_updatecharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buildinfo;
        break;
      }

      // required .HelloKittyMsgData.BuildBase buildinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buildinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFlushOneBuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 updatecharid = 1;
  if (has_updatecharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->updatecharid(), output);
  }

  // required .HelloKittyMsgData.BuildBase buildinfo = 2;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buildinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFlushOneBuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 updatecharid = 1;
  if (has_updatecharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->updatecharid(), target);
  }

  // required .HelloKittyMsgData.BuildBase buildinfo = 2;
  if (has_buildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buildinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFlushOneBuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 updatecharid = 1;
    if (has_updatecharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatecharid());
    }

    // required .HelloKittyMsgData.BuildBase buildinfo = 2;
    if (has_buildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFlushOneBuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFlushOneBuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFlushOneBuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFlushOneBuild::MergeFrom(const AckFlushOneBuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatecharid()) {
      set_updatecharid(from.updatecharid());
    }
    if (from.has_buildinfo()) {
      mutable_buildinfo()->::HelloKittyMsgData::BuildBase::MergeFrom(from.buildinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFlushOneBuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFlushOneBuild::CopyFrom(const AckFlushOneBuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFlushOneBuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_buildinfo()) {
    if (!this->buildinfo().IsInitialized()) return false;
  }
  return true;
}

void AckFlushOneBuild::Swap(AckFlushOneBuild* other) {
  if (other != this) {
    std::swap(updatecharid_, other->updatecharid_);
    std::swap(buildinfo_, other->buildinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFlushOneBuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFlushOneBuild_descriptor_;
  metadata.reflection = AckFlushOneBuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBuildUpGrade::kTempidFieldNumber;
#endif  // !_MSC_VER

ReqBuildUpGrade::ReqBuildUpGrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuildUpGrade::InitAsDefaultInstance() {
}

ReqBuildUpGrade::ReqBuildUpGrade(const ReqBuildUpGrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuildUpGrade::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuildUpGrade::~ReqBuildUpGrade() {
  SharedDtor();
}

void ReqBuildUpGrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBuildUpGrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuildUpGrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuildUpGrade_descriptor_;
}

const ReqBuildUpGrade& ReqBuildUpGrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqBuildUpGrade* ReqBuildUpGrade::default_instance_ = NULL;

ReqBuildUpGrade* ReqBuildUpGrade::New() const {
  return new ReqBuildUpGrade;
}

void ReqBuildUpGrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuildUpGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBuildUpGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuildUpGrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuildUpGrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuildUpGrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuildUpGrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuildUpGrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuildUpGrade::MergeFrom(const ReqBuildUpGrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuildUpGrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuildUpGrade::CopyFrom(const ReqBuildUpGrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuildUpGrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqBuildUpGrade::Swap(ReqBuildUpGrade* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuildUpGrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuildUpGrade_descriptor_;
  metadata.reflection = ReqBuildUpGrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBuildMovePlace::kTempidFieldNumber;
const int ReqBuildMovePlace::kPointFieldNumber;
const int ReqBuildMovePlace::kMoveflgFieldNumber;
#endif  // !_MSC_VER

ReqBuildMovePlace::ReqBuildMovePlace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuildMovePlace::InitAsDefaultInstance() {
  point_ = const_cast< ::HelloKittyMsgData::Point*>(&::HelloKittyMsgData::Point::default_instance());
}

ReqBuildMovePlace::ReqBuildMovePlace(const ReqBuildMovePlace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuildMovePlace::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  point_ = NULL;
  moveflg_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuildMovePlace::~ReqBuildMovePlace() {
  SharedDtor();
}

void ReqBuildMovePlace::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void ReqBuildMovePlace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuildMovePlace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuildMovePlace_descriptor_;
}

const ReqBuildMovePlace& ReqBuildMovePlace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqBuildMovePlace* ReqBuildMovePlace::default_instance_ = NULL;

ReqBuildMovePlace* ReqBuildMovePlace::New() const {
  return new ReqBuildMovePlace;
}

void ReqBuildMovePlace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    if (has_point()) {
      if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
    }
    moveflg_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuildMovePlace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // required .HelloKittyMsgData.Point point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moveflg;
        break;
      }

      // required bool moveflg = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveflg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &moveflg_)));
          set_has_moveflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBuildMovePlace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required .HelloKittyMsgData.Point point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(), output);
  }

  // required bool moveflg = 3 [default = true];
  if (has_moveflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->moveflg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuildMovePlace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required .HelloKittyMsgData.Point point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point(), target);
  }

  // required bool moveflg = 3 [default = true];
  if (has_moveflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->moveflg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuildMovePlace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.Point point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // required bool moveflg = 3 [default = true];
    if (has_moveflg()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuildMovePlace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuildMovePlace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuildMovePlace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuildMovePlace::MergeFrom(const ReqBuildMovePlace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_point()) {
      mutable_point()->::HelloKittyMsgData::Point::MergeFrom(from.point());
    }
    if (from.has_moveflg()) {
      set_moveflg(from.moveflg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuildMovePlace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuildMovePlace::CopyFrom(const ReqBuildMovePlace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuildMovePlace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void ReqBuildMovePlace::Swap(ReqBuildMovePlace* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(point_, other->point_);
    std::swap(moveflg_, other->moveflg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuildMovePlace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuildMovePlace_descriptor_;
  metadata.reflection = ReqBuildMovePlace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBuildBuilding::kTypeFieldNumber;
const int ReqBuildBuilding::kPointFieldNumber;
const int ReqBuildBuilding::kMoveflgFieldNumber;
#endif  // !_MSC_VER

ReqBuildBuilding::ReqBuildBuilding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuildBuilding::InitAsDefaultInstance() {
  point_ = const_cast< ::HelloKittyMsgData::Point*>(&::HelloKittyMsgData::Point::default_instance());
}

ReqBuildBuilding::ReqBuildBuilding(const ReqBuildBuilding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuildBuilding::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  point_ = NULL;
  moveflg_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuildBuilding::~ReqBuildBuilding() {
  SharedDtor();
}

void ReqBuildBuilding::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void ReqBuildBuilding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuildBuilding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuildBuilding_descriptor_;
}

const ReqBuildBuilding& ReqBuildBuilding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqBuildBuilding* ReqBuildBuilding::default_instance_ = NULL;

ReqBuildBuilding* ReqBuildBuilding::New() const {
  return new ReqBuildBuilding;
}

void ReqBuildBuilding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_point()) {
      if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
    }
    moveflg_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuildBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // required .HelloKittyMsgData.Point point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moveflg;
        break;
      }

      // required bool moveflg = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveflg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &moveflg_)));
          set_has_moveflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBuildBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required .HelloKittyMsgData.Point point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(), output);
  }

  // required bool moveflg = 3 [default = true];
  if (has_moveflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->moveflg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuildBuilding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required .HelloKittyMsgData.Point point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point(), target);
  }

  // required bool moveflg = 3 [default = true];
  if (has_moveflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->moveflg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuildBuilding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .HelloKittyMsgData.Point point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // required bool moveflg = 3 [default = true];
    if (has_moveflg()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuildBuilding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuildBuilding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuildBuilding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuildBuilding::MergeFrom(const ReqBuildBuilding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_point()) {
      mutable_point()->::HelloKittyMsgData::Point::MergeFrom(from.point());
    }
    if (from.has_moveflg()) {
      set_moveflg(from.moveflg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuildBuilding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuildBuilding::CopyFrom(const ReqBuildBuilding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuildBuilding::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void ReqBuildBuilding::Swap(ReqBuildBuilding* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(point_, other->point_);
    std::swap(moveflg_, other->moveflg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuildBuilding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuildBuilding_descriptor_;
  metadata.reflection = ReqBuildBuilding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBuildRoad::kTypeFieldNumber;
const int ReqBuildRoad::kPointFieldNumber;
#endif  // !_MSC_VER

ReqBuildRoad::ReqBuildRoad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuildRoad::InitAsDefaultInstance() {
}

ReqBuildRoad::ReqBuildRoad(const ReqBuildRoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuildRoad::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuildRoad::~ReqBuildRoad() {
  SharedDtor();
}

void ReqBuildRoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBuildRoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuildRoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuildRoad_descriptor_;
}

const ReqBuildRoad& ReqBuildRoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqBuildRoad* ReqBuildRoad::default_instance_ = NULL;

ReqBuildRoad* ReqBuildRoad::New() const {
  return new ReqBuildRoad;
}

void ReqBuildRoad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuildRoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // repeated .HelloKittyMsgData.Point point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBuildRoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .HelloKittyMsgData.Point point = 2;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuildRoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .HelloKittyMsgData.Point point = 2;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuildRoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .HelloKittyMsgData.Point point = 2;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuildRoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuildRoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuildRoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuildRoad::MergeFrom(const ReqBuildRoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuildRoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuildRoad::CopyFrom(const ReqBuildRoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuildRoad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < point_size(); i++) {
    if (!this->point(i).IsInitialized()) return false;
  }
  return true;
}

void ReqBuildRoad::Swap(ReqBuildRoad* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    point_.Swap(&other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuildRoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuildRoad_descriptor_;
  metadata.reflection = ReqBuildRoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqClearRoad::kTempidFieldNumber;
#endif  // !_MSC_VER

ReqClearRoad::ReqClearRoad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqClearRoad::InitAsDefaultInstance() {
}

ReqClearRoad::ReqClearRoad(const ReqClearRoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqClearRoad::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqClearRoad::~ReqClearRoad() {
  SharedDtor();
}

void ReqClearRoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqClearRoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClearRoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClearRoad_descriptor_;
}

const ReqClearRoad& ReqClearRoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqClearRoad* ReqClearRoad::default_instance_ = NULL;

ReqClearRoad* ReqClearRoad::New() const {
  return new ReqClearRoad;
}

void ReqClearRoad::Clear() {
  tempid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqClearRoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_tempid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tempid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_tempid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqClearRoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 tempid = 1;
  for (int i = 0; i < this->tempid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->tempid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqClearRoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 tempid = 1;
  for (int i = 0; i < this->tempid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->tempid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqClearRoad::ByteSize() const {
  int total_size = 0;

  // repeated uint64 tempid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->tempid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tempid(i));
    }
    total_size += 1 * this->tempid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClearRoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqClearRoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqClearRoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqClearRoad::MergeFrom(const ReqClearRoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  tempid_.MergeFrom(from.tempid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqClearRoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClearRoad::CopyFrom(const ReqClearRoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClearRoad::IsInitialized() const {

  return true;
}

void ReqClearRoad::Swap(ReqClearRoad* other) {
  if (other != this) {
    tempid_.Swap(&other->tempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqClearRoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClearRoad_descriptor_;
  metadata.reflection = ReqClearRoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBuildOpReturnSuccess::kUpdatecharidFieldNumber;
const int AckBuildOpReturnSuccess::kTempidFieldNumber;
const int AckBuildOpReturnSuccess::kCodeFieldNumber;
const int AckBuildOpReturnSuccess::kBuildinfoFieldNumber;
const int AckBuildOpReturnSuccess::kOldpointFieldNumber;
#endif  // !_MSC_VER

AckBuildOpReturnSuccess::AckBuildOpReturnSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBuildOpReturnSuccess::InitAsDefaultInstance() {
  buildinfo_ = const_cast< ::HelloKittyMsgData::BuildBase*>(&::HelloKittyMsgData::BuildBase::default_instance());
  oldpoint_ = const_cast< ::HelloKittyMsgData::Point*>(&::HelloKittyMsgData::Point::default_instance());
}

AckBuildOpReturnSuccess::AckBuildOpReturnSuccess(const AckBuildOpReturnSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBuildOpReturnSuccess::SharedCtor() {
  _cached_size_ = 0;
  updatecharid_ = GOOGLE_ULONGLONG(0);
  tempid_ = GOOGLE_ULONGLONG(0);
  code_ = 0;
  buildinfo_ = NULL;
  oldpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBuildOpReturnSuccess::~AckBuildOpReturnSuccess() {
  SharedDtor();
}

void AckBuildOpReturnSuccess::SharedDtor() {
  if (this != default_instance_) {
    delete buildinfo_;
    delete oldpoint_;
  }
}

void AckBuildOpReturnSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBuildOpReturnSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBuildOpReturnSuccess_descriptor_;
}

const AckBuildOpReturnSuccess& AckBuildOpReturnSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

AckBuildOpReturnSuccess* AckBuildOpReturnSuccess::default_instance_ = NULL;

AckBuildOpReturnSuccess* AckBuildOpReturnSuccess::New() const {
  return new AckBuildOpReturnSuccess;
}

void AckBuildOpReturnSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    updatecharid_ = GOOGLE_ULONGLONG(0);
    tempid_ = GOOGLE_ULONGLONG(0);
    code_ = 0;
    if (has_buildinfo()) {
      if (buildinfo_ != NULL) buildinfo_->::HelloKittyMsgData::BuildBase::Clear();
    }
    if (has_oldpoint()) {
      if (oldpoint_ != NULL) oldpoint_->::HelloKittyMsgData::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBuildOpReturnSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 updatecharid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatecharid_)));
          set_has_updatecharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tempid;
        break;
      }

      // required uint64 tempid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // required .HelloKittyMsgData.BuildSuccessCodeType code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::BuildSuccessCodeType_IsValid(value)) {
            set_code(static_cast< ::HelloKittyMsgData::BuildSuccessCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buildinfo;
        break;
      }

      // required .HelloKittyMsgData.BuildBase buildinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buildinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_oldpoint;
        break;
      }

      // required .HelloKittyMsgData.Point oldpoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBuildOpReturnSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 updatecharid = 1;
  if (has_updatecharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->updatecharid(), output);
  }

  // required uint64 tempid = 2;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tempid(), output);
  }

  // required .HelloKittyMsgData.BuildSuccessCodeType code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->code(), output);
  }

  // required .HelloKittyMsgData.BuildBase buildinfo = 4;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buildinfo(), output);
  }

  // required .HelloKittyMsgData.Point oldpoint = 5;
  if (has_oldpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->oldpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBuildOpReturnSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 updatecharid = 1;
  if (has_updatecharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->updatecharid(), target);
  }

  // required uint64 tempid = 2;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tempid(), target);
  }

  // required .HelloKittyMsgData.BuildSuccessCodeType code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->code(), target);
  }

  // required .HelloKittyMsgData.BuildBase buildinfo = 4;
  if (has_buildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buildinfo(), target);
  }

  // required .HelloKittyMsgData.Point oldpoint = 5;
  if (has_oldpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->oldpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBuildOpReturnSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 updatecharid = 1;
    if (has_updatecharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatecharid());
    }

    // required uint64 tempid = 2;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.BuildSuccessCodeType code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // required .HelloKittyMsgData.BuildBase buildinfo = 4;
    if (has_buildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildinfo());
    }

    // required .HelloKittyMsgData.Point oldpoint = 5;
    if (has_oldpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBuildOpReturnSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBuildOpReturnSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBuildOpReturnSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBuildOpReturnSuccess::MergeFrom(const AckBuildOpReturnSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatecharid()) {
      set_updatecharid(from.updatecharid());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_buildinfo()) {
      mutable_buildinfo()->::HelloKittyMsgData::BuildBase::MergeFrom(from.buildinfo());
    }
    if (from.has_oldpoint()) {
      mutable_oldpoint()->::HelloKittyMsgData::Point::MergeFrom(from.oldpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBuildOpReturnSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBuildOpReturnSuccess::CopyFrom(const AckBuildOpReturnSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBuildOpReturnSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_buildinfo()) {
    if (!this->buildinfo().IsInitialized()) return false;
  }
  if (has_oldpoint()) {
    if (!this->oldpoint().IsInitialized()) return false;
  }
  return true;
}

void AckBuildOpReturnSuccess::Swap(AckBuildOpReturnSuccess* other) {
  if (other != this) {
    std::swap(updatecharid_, other->updatecharid_);
    std::swap(tempid_, other->tempid_);
    std::swap(code_, other->code_);
    std::swap(buildinfo_, other->buildinfo_);
    std::swap(oldpoint_, other->oldpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBuildOpReturnSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBuildOpReturnSuccess_descriptor_;
  metadata.reflection = AckBuildOpReturnSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBuildOpReturnFail::kTempidFieldNumber;
const int AckBuildOpReturnFail::kCommoncodeFieldNumber;
const int AckBuildOpReturnFail::kCodeFieldNumber;
const int AckBuildOpReturnFail::kBuildinfoFieldNumber;
#endif  // !_MSC_VER

AckBuildOpReturnFail::AckBuildOpReturnFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBuildOpReturnFail::InitAsDefaultInstance() {
  buildinfo_ = const_cast< ::HelloKittyMsgData::BuildBase*>(&::HelloKittyMsgData::BuildBase::default_instance());
}

AckBuildOpReturnFail::AckBuildOpReturnFail(const AckBuildOpReturnFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBuildOpReturnFail::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  commoncode_ = 0;
  code_ = 0;
  buildinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBuildOpReturnFail::~AckBuildOpReturnFail() {
  SharedDtor();
}

void AckBuildOpReturnFail::SharedDtor() {
  if (this != default_instance_) {
    delete buildinfo_;
  }
}

void AckBuildOpReturnFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBuildOpReturnFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBuildOpReturnFail_descriptor_;
}

const AckBuildOpReturnFail& AckBuildOpReturnFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

AckBuildOpReturnFail* AckBuildOpReturnFail::default_instance_ = NULL;

AckBuildOpReturnFail* AckBuildOpReturnFail::New() const {
  return new AckBuildOpReturnFail;
}

void AckBuildOpReturnFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    commoncode_ = 0;
    code_ = 0;
    if (has_buildinfo()) {
      if (buildinfo_ != NULL) buildinfo_->::HelloKittyMsgData::BuildBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBuildOpReturnFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_commoncode;
        break;
      }

      // required .HelloKittyMsgData.ErrorCodeType commoncode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commoncode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::ErrorCodeType_IsValid(value)) {
            set_commoncode(static_cast< ::HelloKittyMsgData::ErrorCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // required .HelloKittyMsgData.BuildFailCodeType code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::BuildFailCodeType_IsValid(value)) {
            set_code(static_cast< ::HelloKittyMsgData::BuildFailCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buildinfo;
        break;
      }

      // required .HelloKittyMsgData.BuildBase buildinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buildinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBuildOpReturnFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required .HelloKittyMsgData.ErrorCodeType commoncode = 2;
  if (has_commoncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->commoncode(), output);
  }

  // required .HelloKittyMsgData.BuildFailCodeType code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->code(), output);
  }

  // required .HelloKittyMsgData.BuildBase buildinfo = 4;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buildinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBuildOpReturnFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required .HelloKittyMsgData.ErrorCodeType commoncode = 2;
  if (has_commoncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->commoncode(), target);
  }

  // required .HelloKittyMsgData.BuildFailCodeType code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->code(), target);
  }

  // required .HelloKittyMsgData.BuildBase buildinfo = 4;
  if (has_buildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buildinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBuildOpReturnFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.ErrorCodeType commoncode = 2;
    if (has_commoncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commoncode());
    }

    // required .HelloKittyMsgData.BuildFailCodeType code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // required .HelloKittyMsgData.BuildBase buildinfo = 4;
    if (has_buildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBuildOpReturnFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBuildOpReturnFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBuildOpReturnFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBuildOpReturnFail::MergeFrom(const AckBuildOpReturnFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_commoncode()) {
      set_commoncode(from.commoncode());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_buildinfo()) {
      mutable_buildinfo()->::HelloKittyMsgData::BuildBase::MergeFrom(from.buildinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBuildOpReturnFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBuildOpReturnFail::CopyFrom(const AckBuildOpReturnFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBuildOpReturnFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_buildinfo()) {
    if (!this->buildinfo().IsInitialized()) return false;
  }
  return true;
}

void AckBuildOpReturnFail::Swap(AckBuildOpReturnFail* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(commoncode_, other->commoncode_);
    std::swap(code_, other->code_);
    std::swap(buildinfo_, other->buildinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBuildOpReturnFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBuildOpReturnFail_descriptor_;
  metadata.reflection = AckBuildOpReturnFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPickUpBuid::kTempidFieldNumber;
#endif  // !_MSC_VER

ReqPickUpBuid::ReqPickUpBuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPickUpBuid::InitAsDefaultInstance() {
}

ReqPickUpBuid::ReqPickUpBuid(const ReqPickUpBuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPickUpBuid::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPickUpBuid::~ReqPickUpBuid() {
  SharedDtor();
}

void ReqPickUpBuid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPickUpBuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPickUpBuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPickUpBuid_descriptor_;
}

const ReqPickUpBuid& ReqPickUpBuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqPickUpBuid* ReqPickUpBuid::default_instance_ = NULL;

ReqPickUpBuid* ReqPickUpBuid::New() const {
  return new ReqPickUpBuid;
}

void ReqPickUpBuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPickUpBuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPickUpBuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPickUpBuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPickUpBuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPickUpBuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPickUpBuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPickUpBuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPickUpBuid::MergeFrom(const ReqPickUpBuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPickUpBuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPickUpBuid::CopyFrom(const ReqPickUpBuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPickUpBuid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqPickUpBuid::Swap(ReqPickUpBuid* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPickUpBuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPickUpBuid_descriptor_;
  metadata.reflection = ReqPickUpBuid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRemoveBuid::kUpdatecharidFieldNumber;
const int AckRemoveBuid::kTempidFieldNumber;
#endif  // !_MSC_VER

AckRemoveBuid::AckRemoveBuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRemoveBuid::InitAsDefaultInstance() {
}

AckRemoveBuid::AckRemoveBuid(const AckRemoveBuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRemoveBuid::SharedCtor() {
  _cached_size_ = 0;
  updatecharid_ = GOOGLE_ULONGLONG(0);
  tempid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRemoveBuid::~AckRemoveBuid() {
  SharedDtor();
}

void AckRemoveBuid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRemoveBuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRemoveBuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRemoveBuid_descriptor_;
}

const AckRemoveBuid& AckRemoveBuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

AckRemoveBuid* AckRemoveBuid::default_instance_ = NULL;

AckRemoveBuid* AckRemoveBuid::New() const {
  return new AckRemoveBuid;
}

void AckRemoveBuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    updatecharid_ = GOOGLE_ULONGLONG(0);
    tempid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRemoveBuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 updatecharid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatecharid_)));
          set_has_updatecharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tempid;
        break;
      }

      // required uint64 tempid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRemoveBuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 updatecharid = 1;
  if (has_updatecharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->updatecharid(), output);
  }

  // required uint64 tempid = 2;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tempid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRemoveBuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 updatecharid = 1;
  if (has_updatecharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->updatecharid(), target);
  }

  // required uint64 tempid = 2;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tempid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRemoveBuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 updatecharid = 1;
    if (has_updatecharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatecharid());
    }

    // required uint64 tempid = 2;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRemoveBuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRemoveBuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRemoveBuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRemoveBuid::MergeFrom(const AckRemoveBuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatecharid()) {
      set_updatecharid(from.updatecharid());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRemoveBuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRemoveBuid::CopyFrom(const AckRemoveBuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRemoveBuid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckRemoveBuid::Swap(AckRemoveBuid* other) {
  if (other != this) {
    std::swap(updatecharid_, other->updatecharid_);
    std::swap(tempid_, other->tempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRemoveBuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRemoveBuid_descriptor_;
  metadata.reflection = AckRemoveBuid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPickOutBuid::kCellidFieldNumber;
const int ReqPickOutBuid::kPointFieldNumber;
const int ReqPickOutBuid::kMoveflgFieldNumber;
#endif  // !_MSC_VER

ReqPickOutBuid::ReqPickOutBuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPickOutBuid::InitAsDefaultInstance() {
  point_ = const_cast< ::HelloKittyMsgData::Point*>(&::HelloKittyMsgData::Point::default_instance());
}

ReqPickOutBuid::ReqPickOutBuid(const ReqPickOutBuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPickOutBuid::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  point_ = NULL;
  moveflg_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPickOutBuid::~ReqPickOutBuid() {
  SharedDtor();
}

void ReqPickOutBuid::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void ReqPickOutBuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPickOutBuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPickOutBuid_descriptor_;
}

const ReqPickOutBuid& ReqPickOutBuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqPickOutBuid* ReqPickOutBuid::default_instance_ = NULL;

ReqPickOutBuid* ReqPickOutBuid::New() const {
  return new ReqPickOutBuid;
}

void ReqPickOutBuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    if (has_point()) {
      if (point_ != NULL) point_->::HelloKittyMsgData::Point::Clear();
    }
    moveflg_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPickOutBuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // required .HelloKittyMsgData.Point point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moveflg;
        break;
      }

      // required bool moveflg = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveflg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &moveflg_)));
          set_has_moveflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPickOutBuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellid = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required .HelloKittyMsgData.Point point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(), output);
  }

  // required bool moveflg = 3 [default = true];
  if (has_moveflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->moveflg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPickOutBuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellid = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required .HelloKittyMsgData.Point point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point(), target);
  }

  // required bool moveflg = 3 [default = true];
  if (has_moveflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->moveflg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPickOutBuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellid = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required .HelloKittyMsgData.Point point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // required bool moveflg = 3 [default = true];
    if (has_moveflg()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPickOutBuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPickOutBuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPickOutBuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPickOutBuid::MergeFrom(const ReqPickOutBuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_point()) {
      mutable_point()->::HelloKittyMsgData::Point::MergeFrom(from.point());
    }
    if (from.has_moveflg()) {
      set_moveflg(from.moveflg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPickOutBuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPickOutBuid::CopyFrom(const ReqPickOutBuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPickOutBuid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void ReqPickOutBuid::Swap(ReqPickOutBuid* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(point_, other->point_);
    std::swap(moveflg_, other->moveflg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPickOutBuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPickOutBuid_descriptor_;
  metadata.reflection = ReqPickOutBuid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqClickRewardBuid::kTempidFieldNumber;
#endif  // !_MSC_VER

ReqClickRewardBuid::ReqClickRewardBuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqClickRewardBuid::InitAsDefaultInstance() {
}

ReqClickRewardBuid::ReqClickRewardBuid(const ReqClickRewardBuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqClickRewardBuid::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqClickRewardBuid::~ReqClickRewardBuid() {
  SharedDtor();
}

void ReqClickRewardBuid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqClickRewardBuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClickRewardBuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClickRewardBuid_descriptor_;
}

const ReqClickRewardBuid& ReqClickRewardBuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqClickRewardBuid* ReqClickRewardBuid::default_instance_ = NULL;

ReqClickRewardBuid* ReqClickRewardBuid::New() const {
  return new ReqClickRewardBuid;
}

void ReqClickRewardBuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqClickRewardBuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqClickRewardBuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqClickRewardBuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqClickRewardBuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClickRewardBuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqClickRewardBuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqClickRewardBuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqClickRewardBuid::MergeFrom(const ReqClickRewardBuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqClickRewardBuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClickRewardBuid::CopyFrom(const ReqClickRewardBuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClickRewardBuid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqClickRewardBuid::Swap(ReqClickRewardBuid* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqClickRewardBuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClickRewardBuid_descriptor_;
  metadata.reflection = ReqClickRewardBuid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Worker::kIdFieldNumber;
const int Worker::kStarttimeFieldNumber;
const int Worker::kCdFieldNumber;
const int Worker::kLastsecFieldNumber;
const int Worker::kBuildFieldNumber;
#endif  // !_MSC_VER

Worker::Worker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Worker::InitAsDefaultInstance() {
}

Worker::Worker(const Worker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Worker::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  starttime_ = 0u;
  cd_ = 0u;
  lastsec_ = 0u;
  build_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Worker::~Worker() {
  SharedDtor();
}

void Worker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Worker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Worker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Worker_descriptor_;
}

const Worker& Worker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

Worker* Worker::default_instance_ = NULL;

Worker* Worker::New() const {
  return new Worker;
}

void Worker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    starttime_ = 0u;
    cd_ = 0u;
    lastsec_ = 0u;
    build_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Worker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starttime;
        break;
      }

      // required uint32 starttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // required uint32 cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastsec;
        break;
      }

      // required uint32 lastsec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastsec_)));
          set_has_lastsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_build;
        break;
      }

      // required uint32 build = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_)));
          set_has_build();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Worker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 starttime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starttime(), output);
  }

  // required uint32 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cd(), output);
  }

  // required uint32 lastsec = 4;
  if (has_lastsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastsec(), output);
  }

  // required uint32 build = 5;
  if (has_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->build(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Worker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 starttime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starttime(), target);
  }

  // required uint32 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cd(), target);
  }

  // required uint32 lastsec = 4;
  if (has_lastsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lastsec(), target);
  }

  // required uint32 build = 5;
  if (has_build()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->build(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Worker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 starttime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // required uint32 lastsec = 4;
    if (has_lastsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastsec());
    }

    // required uint32 build = 5;
    if (has_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->build());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Worker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Worker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Worker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Worker::MergeFrom(const Worker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_lastsec()) {
      set_lastsec(from.lastsec());
    }
    if (from.has_build()) {
      set_build(from.build());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Worker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Worker::CopyFrom(const Worker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Worker::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Worker::Swap(Worker* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(starttime_, other->starttime_);
    std::swap(cd_, other->cd_);
    std::swap(lastsec_, other->lastsec_);
    std::swap(build_, other->build_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Worker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Worker_descriptor_;
  metadata.reflection = Worker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqWorker::ReqWorker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqWorker::InitAsDefaultInstance() {
}

ReqWorker::ReqWorker(const ReqWorker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqWorker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWorker::~ReqWorker() {
  SharedDtor();
}

void ReqWorker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorker_descriptor_;
}

const ReqWorker& ReqWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqWorker* ReqWorker::default_instance_ = NULL;

ReqWorker* ReqWorker::New() const {
  return new ReqWorker;
}

void ReqWorker::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqWorker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqWorker::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWorker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWorker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWorker::MergeFrom(const ReqWorker& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWorker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorker::CopyFrom(const ReqWorker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWorker::IsInitialized() const {

  return true;
}

void ReqWorker::Swap(ReqWorker* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorker_descriptor_;
  metadata.reflection = ReqWorker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateWorker::kWorkerFieldNumber;
#endif  // !_MSC_VER

AckUpdateWorker::AckUpdateWorker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateWorker::InitAsDefaultInstance() {
  worker_ = const_cast< ::HelloKittyMsgData::Worker*>(&::HelloKittyMsgData::Worker::default_instance());
}

AckUpdateWorker::AckUpdateWorker(const AckUpdateWorker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateWorker::SharedCtor() {
  _cached_size_ = 0;
  worker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateWorker::~AckUpdateWorker() {
  SharedDtor();
}

void AckUpdateWorker::SharedDtor() {
  if (this != default_instance_) {
    delete worker_;
  }
}

void AckUpdateWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateWorker_descriptor_;
}

const AckUpdateWorker& AckUpdateWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

AckUpdateWorker* AckUpdateWorker::default_instance_ = NULL;

AckUpdateWorker* AckUpdateWorker::New() const {
  return new AckUpdateWorker;
}

void AckUpdateWorker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_worker()) {
      if (worker_ != NULL) worker_->::HelloKittyMsgData::Worker::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.Worker worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.Worker worker = 1;
  if (has_worker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateWorker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.Worker worker = 1;
  if (has_worker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateWorker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.Worker worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateWorker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateWorker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateWorker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateWorker::MergeFrom(const AckUpdateWorker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worker()) {
      mutable_worker()->::HelloKittyMsgData::Worker::MergeFrom(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateWorker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateWorker::CopyFrom(const AckUpdateWorker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateWorker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_worker()) {
    if (!this->worker().IsInitialized()) return false;
  }
  return true;
}

void AckUpdateWorker::Swap(AckUpdateWorker* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateWorker_descriptor_;
  metadata.reflection = AckUpdateWorker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckWorker::kWorkerFieldNumber;
#endif  // !_MSC_VER

AckWorker::AckWorker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckWorker::InitAsDefaultInstance() {
}

AckWorker::AckWorker(const AckWorker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckWorker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckWorker::~AckWorker() {
  SharedDtor();
}

void AckWorker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckWorker_descriptor_;
}

const AckWorker& AckWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

AckWorker* AckWorker::default_instance_ = NULL;

AckWorker* AckWorker::New() const {
  return new AckWorker;
}

void AckWorker::Clear() {
  worker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.Worker worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_worker;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.Worker worker = 1;
  for (int i = 0; i < this->worker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worker(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckWorker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.Worker worker = 1;
  for (int i = 0; i < this->worker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worker(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckWorker::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.Worker worker = 1;
  total_size += 1 * this->worker_size();
  for (int i = 0; i < this->worker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worker(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckWorker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckWorker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckWorker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckWorker::MergeFrom(const AckWorker& from) {
  GOOGLE_CHECK_NE(&from, this);
  worker_.MergeFrom(from.worker_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckWorker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWorker::CopyFrom(const AckWorker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWorker::IsInitialized() const {

  for (int i = 0; i < worker_size(); i++) {
    if (!this->worker(i).IsInitialized()) return false;
  }
  return true;
}

void AckWorker::Swap(AckWorker* other) {
  if (other != this) {
    worker_.Swap(&other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckWorker_descriptor_;
  metadata.reflection = AckWorker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqResetWorker::kWorkeridFieldNumber;
#endif  // !_MSC_VER

ReqResetWorker::ReqResetWorker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqResetWorker::InitAsDefaultInstance() {
}

ReqResetWorker::ReqResetWorker(const ReqResetWorker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqResetWorker::SharedCtor() {
  _cached_size_ = 0;
  workerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqResetWorker::~ReqResetWorker() {
  SharedDtor();
}

void ReqResetWorker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqResetWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqResetWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqResetWorker_descriptor_;
}

const ReqResetWorker& ReqResetWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqResetWorker* ReqResetWorker::default_instance_ = NULL;

ReqResetWorker* ReqResetWorker::New() const {
  return new ReqResetWorker;
}

void ReqResetWorker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    workerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqResetWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 workerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workerid_)));
          set_has_workerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqResetWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 workerid = 1;
  if (has_workerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->workerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqResetWorker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 workerid = 1;
  if (has_workerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->workerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqResetWorker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 workerid = 1;
    if (has_workerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqResetWorker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqResetWorker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqResetWorker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqResetWorker::MergeFrom(const ReqResetWorker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workerid()) {
      set_workerid(from.workerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqResetWorker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqResetWorker::CopyFrom(const ReqResetWorker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqResetWorker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqResetWorker::Swap(ReqResetWorker* other) {
  if (other != this) {
    std::swap(workerid_, other->workerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqResetWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqResetWorker_descriptor_;
  metadata.reflection = ReqResetWorker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRecycleItem::kTempidFieldNumber;
const int ReqRecycleItem::kItemidFieldNumber;
const int ReqRecycleItem::kItemnumFieldNumber;
#endif  // !_MSC_VER

ReqRecycleItem::ReqRecycleItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRecycleItem::InitAsDefaultInstance() {
}

ReqRecycleItem::ReqRecycleItem(const ReqRecycleItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRecycleItem::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRecycleItem::~ReqRecycleItem() {
  SharedDtor();
}

void ReqRecycleItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRecycleItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRecycleItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRecycleItem_descriptor_;
}

const ReqRecycleItem& ReqRecycleItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqRecycleItem* ReqRecycleItem::default_instance_ = NULL;

ReqRecycleItem* ReqRecycleItem::New() const {
  return new ReqRecycleItem;
}

void ReqRecycleItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    itemid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRecycleItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // required uint32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemnum;
        break;
      }

      // required uint32 itemnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRecycleItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required uint32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // required uint32 itemnum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRecycleItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required uint32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // required uint32 itemnum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRecycleItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required uint32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 itemnum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRecycleItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRecycleItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRecycleItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRecycleItem::MergeFrom(const ReqRecycleItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRecycleItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRecycleItem::CopyFrom(const ReqRecycleItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRecycleItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqRecycleItem::Swap(ReqRecycleItem* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRecycleItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRecycleItem_descriptor_;
  metadata.reflection = ReqRecycleItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProduceBase::kItemidFieldNumber;
const int ProduceBase::kValueFieldNumber;
#endif  // !_MSC_VER

ProduceBase::ProduceBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProduceBase::InitAsDefaultInstance() {
}

ProduceBase::ProduceBase(const ProduceBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProduceBase::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProduceBase::~ProduceBase() {
  SharedDtor();
}

void ProduceBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProduceBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProduceBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProduceBase_descriptor_;
}

const ProduceBase& ProduceBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ProduceBase* ProduceBase::default_instance_ = NULL;

ProduceBase* ProduceBase::New() const {
  return new ProduceBase;
}

void ProduceBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProduceBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProduceBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProduceBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProduceBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProduceBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProduceBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProduceBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProduceBase::MergeFrom(const ProduceBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProduceBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProduceBase::CopyFrom(const ProduceBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProduceBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProduceBase::Swap(ProduceBase* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProduceBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProduceBase_descriptor_;
  metadata.reflection = ProduceBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBuildProduce::kTempidFieldNumber;
#endif  // !_MSC_VER

ReqBuildProduce::ReqBuildProduce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuildProduce::InitAsDefaultInstance() {
}

ReqBuildProduce::ReqBuildProduce(const ReqBuildProduce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuildProduce::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuildProduce::~ReqBuildProduce() {
  SharedDtor();
}

void ReqBuildProduce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBuildProduce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuildProduce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuildProduce_descriptor_;
}

const ReqBuildProduce& ReqBuildProduce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

ReqBuildProduce* ReqBuildProduce::default_instance_ = NULL;

ReqBuildProduce* ReqBuildProduce::New() const {
  return new ReqBuildProduce;
}

void ReqBuildProduce::Clear() {
  tempid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuildProduce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_tempid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tempid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_tempid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBuildProduce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 tempid = 1;
  for (int i = 0; i < this->tempid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->tempid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuildProduce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 tempid = 1;
  for (int i = 0; i < this->tempid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->tempid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuildProduce::ByteSize() const {
  int total_size = 0;

  // repeated uint64 tempid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->tempid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tempid(i));
    }
    total_size += 1 * this->tempid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuildProduce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuildProduce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuildProduce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuildProduce::MergeFrom(const ReqBuildProduce& from) {
  GOOGLE_CHECK_NE(&from, this);
  tempid_.MergeFrom(from.tempid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuildProduce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuildProduce::CopyFrom(const ReqBuildProduce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuildProduce::IsInitialized() const {

  return true;
}

void ReqBuildProduce::Swap(ReqBuildProduce* other) {
  if (other != this) {
    tempid_.Swap(&other->tempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuildProduce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuildProduce_descriptor_;
  metadata.reflection = ReqBuildProduce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildProduce::kTempidFieldNumber;
const int BuildProduce::kProduceFieldNumber;
#endif  // !_MSC_VER

BuildProduce::BuildProduce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildProduce::InitAsDefaultInstance() {
}

BuildProduce::BuildProduce(const BuildProduce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildProduce::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildProduce::~BuildProduce() {
  SharedDtor();
}

void BuildProduce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildProduce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildProduce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildProduce_descriptor_;
}

const BuildProduce& BuildProduce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

BuildProduce* BuildProduce::default_instance_ = NULL;

BuildProduce* BuildProduce::New() const {
  return new BuildProduce;
}

void BuildProduce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
  }
  produce_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildProduce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_produce;
        break;
      }

      // repeated .HelloKittyMsgData.ProduceBase produce = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_produce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_produce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_produce;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildProduce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // repeated .HelloKittyMsgData.ProduceBase produce = 2;
  for (int i = 0; i < this->produce_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->produce(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildProduce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // repeated .HelloKittyMsgData.ProduceBase produce = 2;
  for (int i = 0; i < this->produce_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->produce(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildProduce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

  }
  // repeated .HelloKittyMsgData.ProduceBase produce = 2;
  total_size += 1 * this->produce_size();
  for (int i = 0; i < this->produce_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->produce(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildProduce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildProduce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildProduce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildProduce::MergeFrom(const BuildProduce& from) {
  GOOGLE_CHECK_NE(&from, this);
  produce_.MergeFrom(from.produce_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildProduce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildProduce::CopyFrom(const BuildProduce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildProduce::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < produce_size(); i++) {
    if (!this->produce(i).IsInitialized()) return false;
  }
  return true;
}

void BuildProduce::Swap(BuildProduce* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    produce_.Swap(&other->produce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildProduce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildProduce_descriptor_;
  metadata.reflection = BuildProduce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBuildProduce::kProduceFieldNumber;
#endif  // !_MSC_VER

AckBuildProduce::AckBuildProduce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBuildProduce::InitAsDefaultInstance() {
}

AckBuildProduce::AckBuildProduce(const AckBuildProduce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBuildProduce::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBuildProduce::~AckBuildProduce() {
  SharedDtor();
}

void AckBuildProduce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBuildProduce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBuildProduce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBuildProduce_descriptor_;
}

const AckBuildProduce& AckBuildProduce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

AckBuildProduce* AckBuildProduce::default_instance_ = NULL;

AckBuildProduce* AckBuildProduce::New() const {
  return new AckBuildProduce;
}

void AckBuildProduce::Clear() {
  produce_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBuildProduce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.BuildProduce produce = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_produce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_produce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_produce;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBuildProduce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.BuildProduce produce = 1;
  for (int i = 0; i < this->produce_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->produce(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBuildProduce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.BuildProduce produce = 1;
  for (int i = 0; i < this->produce_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->produce(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBuildProduce::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.BuildProduce produce = 1;
  total_size += 1 * this->produce_size();
  for (int i = 0; i < this->produce_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->produce(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBuildProduce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBuildProduce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBuildProduce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBuildProduce::MergeFrom(const AckBuildProduce& from) {
  GOOGLE_CHECK_NE(&from, this);
  produce_.MergeFrom(from.produce_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBuildProduce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBuildProduce::CopyFrom(const AckBuildProduce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBuildProduce::IsInitialized() const {

  for (int i = 0; i < produce_size(); i++) {
    if (!this->produce(i).IsInitialized()) return false;
  }
  return true;
}

void AckBuildProduce::Swap(AckBuildProduce* other) {
  if (other != this) {
    produce_.Swap(&other->produce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBuildProduce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBuildProduce_descriptor_;
  metadata.reflection = AckBuildProduce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateRubbish::kUpdatecharidFieldNumber;
const int AckUpdateRubbish::kRubbishFieldNumber;
const int AckUpdateRubbish::kOptypeFieldNumber;
#endif  // !_MSC_VER

AckUpdateRubbish::AckUpdateRubbish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateRubbish::InitAsDefaultInstance() {
  rubbish_ = const_cast< ::HelloKittyMsgData::RubbishData*>(&::HelloKittyMsgData::RubbishData::default_instance());
}

AckUpdateRubbish::AckUpdateRubbish(const AckUpdateRubbish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateRubbish::SharedCtor() {
  _cached_size_ = 0;
  updatecharid_ = GOOGLE_ULONGLONG(0);
  rubbish_ = NULL;
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateRubbish::~AckUpdateRubbish() {
  SharedDtor();
}

void AckUpdateRubbish::SharedDtor() {
  if (this != default_instance_) {
    delete rubbish_;
  }
}

void AckUpdateRubbish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateRubbish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateRubbish_descriptor_;
}

const AckUpdateRubbish& AckUpdateRubbish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

AckUpdateRubbish* AckUpdateRubbish::default_instance_ = NULL;

AckUpdateRubbish* AckUpdateRubbish::New() const {
  return new AckUpdateRubbish;
}

void AckUpdateRubbish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    updatecharid_ = GOOGLE_ULONGLONG(0);
    if (has_rubbish()) {
      if (rubbish_ != NULL) rubbish_->::HelloKittyMsgData::RubbishData::Clear();
    }
    optype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateRubbish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 updatecharid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatecharid_)));
          set_has_updatecharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rubbish;
        break;
      }

      // required .HelloKittyMsgData.RubbishData rubbish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rubbish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rubbish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_optype;
        break;
      }

      // required uint32 optype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateRubbish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 updatecharid = 1;
  if (has_updatecharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->updatecharid(), output);
  }

  // required .HelloKittyMsgData.RubbishData rubbish = 2;
  if (has_rubbish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rubbish(), output);
  }

  // required uint32 optype = 3;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateRubbish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 updatecharid = 1;
  if (has_updatecharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->updatecharid(), target);
  }

  // required .HelloKittyMsgData.RubbishData rubbish = 2;
  if (has_rubbish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rubbish(), target);
  }

  // required uint32 optype = 3;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateRubbish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 updatecharid = 1;
    if (has_updatecharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatecharid());
    }

    // required .HelloKittyMsgData.RubbishData rubbish = 2;
    if (has_rubbish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rubbish());
    }

    // required uint32 optype = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateRubbish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateRubbish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateRubbish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateRubbish::MergeFrom(const AckUpdateRubbish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatecharid()) {
      set_updatecharid(from.updatecharid());
    }
    if (from.has_rubbish()) {
      mutable_rubbish()->::HelloKittyMsgData::RubbishData::MergeFrom(from.rubbish());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateRubbish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateRubbish::CopyFrom(const AckUpdateRubbish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateRubbish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_rubbish()) {
    if (!this->rubbish().IsInitialized()) return false;
  }
  return true;
}

void AckUpdateRubbish::Swap(AckUpdateRubbish* other) {
  if (other != this) {
    std::swap(updatecharid_, other->updatecharid_);
    std::swap(rubbish_, other->rubbish_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateRubbish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateRubbish_descriptor_;
  metadata.reflection = AckUpdateRubbish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BufferData::kBufferidFieldNumber;
const int BufferData::kSrcidFieldNumber;
const int BufferData::kSrctypeFieldNumber;
const int BufferData::kBegintimeFieldNumber;
const int BufferData::kLasttimeFieldNumber;
const int BufferData::kValueFieldNumber;
#endif  // !_MSC_VER

BufferData::BufferData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BufferData::InitAsDefaultInstance() {
}

BufferData::BufferData(const BufferData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BufferData::SharedCtor() {
  _cached_size_ = 0;
  bufferid_ = 1;
  srcid_ = GOOGLE_ULONGLONG(0);
  srctype_ = 0;
  begintime_ = 0u;
  lasttime_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BufferData::~BufferData() {
  SharedDtor();
}

void BufferData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BufferData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BufferData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferData_descriptor_;
}

const BufferData& BufferData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

BufferData* BufferData::default_instance_ = NULL;

BufferData* BufferData::New() const {
  return new BufferData;
}

void BufferData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bufferid_ = 1;
    srcid_ = GOOGLE_ULONGLONG(0);
    srctype_ = 0;
    begintime_ = 0u;
    lasttime_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BufferData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.BufferTypeID bufferid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::BufferTypeID_IsValid(value)) {
            set_bufferid(static_cast< ::HelloKittyMsgData::BufferTypeID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcid;
        break;
      }

      // required uint64 srcid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_srctype;
        break;
      }

      // required .HelloKittyMsgData.BufferSrcType srctype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srctype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::BufferSrcType_IsValid(value)) {
            set_srctype(static_cast< ::HelloKittyMsgData::BufferSrcType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_begintime;
        break;
      }

      // required uint32 begintime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lasttime;
        break;
      }

      // required uint32 lasttime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_value;
        break;
      }

      // required uint32 value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BufferData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.BufferTypeID bufferid = 1;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->bufferid(), output);
  }

  // required uint64 srcid = 2;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->srcid(), output);
  }

  // required .HelloKittyMsgData.BufferSrcType srctype = 3;
  if (has_srctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->srctype(), output);
  }

  // required uint32 begintime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->begintime(), output);
  }

  // required uint32 lasttime = 5;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lasttime(), output);
  }

  // required uint32 value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BufferData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.BufferTypeID bufferid = 1;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->bufferid(), target);
  }

  // required uint64 srcid = 2;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->srcid(), target);
  }

  // required .HelloKittyMsgData.BufferSrcType srctype = 3;
  if (has_srctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->srctype(), target);
  }

  // required uint32 begintime = 4;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->begintime(), target);
  }

  // required uint32 lasttime = 5;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lasttime(), target);
  }

  // required uint32 value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BufferData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.BufferTypeID bufferid = 1;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bufferid());
    }

    // required uint64 srcid = 2;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // required .HelloKittyMsgData.BufferSrcType srctype = 3;
    if (has_srctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->srctype());
    }

    // required uint32 begintime = 4;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // required uint32 lasttime = 5;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lasttime());
    }

    // required uint32 value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BufferData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BufferData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BufferData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BufferData::MergeFrom(const BufferData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_srctype()) {
      set_srctype(from.srctype());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BufferData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferData::CopyFrom(const BufferData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void BufferData::Swap(BufferData* other) {
  if (other != this) {
    std::swap(bufferid_, other->bufferid_);
    std::swap(srcid_, other->srcid_);
    std::swap(srctype_, other->srctype_);
    std::swap(begintime_, other->begintime_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BufferData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BufferData_descriptor_;
  metadata.reflection = BufferData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BufferInfo::kTempidFieldNumber;
const int BufferInfo::kBufferdataFieldNumber;
#endif  // !_MSC_VER

BufferInfo::BufferInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BufferInfo::InitAsDefaultInstance() {
}

BufferInfo::BufferInfo(const BufferInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BufferInfo::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BufferInfo::~BufferInfo() {
  SharedDtor();
}

void BufferInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BufferInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BufferInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferInfo_descriptor_;
}

const BufferInfo& BufferInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

BufferInfo* BufferInfo::default_instance_ = NULL;

BufferInfo* BufferInfo::New() const {
  return new BufferInfo;
}

void BufferInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
  }
  bufferdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BufferInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bufferdata;
        break;
      }

      // repeated .HelloKittyMsgData.BufferData bufferdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bufferdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bufferdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bufferdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BufferInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // repeated .HelloKittyMsgData.BufferData bufferdata = 2;
  for (int i = 0; i < this->bufferdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bufferdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BufferInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // repeated .HelloKittyMsgData.BufferData bufferdata = 2;
  for (int i = 0; i < this->bufferdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bufferdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BufferInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

  }
  // repeated .HelloKittyMsgData.BufferData bufferdata = 2;
  total_size += 1 * this->bufferdata_size();
  for (int i = 0; i < this->bufferdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bufferdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BufferInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BufferInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BufferInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BufferInfo::MergeFrom(const BufferInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  bufferdata_.MergeFrom(from.bufferdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BufferInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferInfo::CopyFrom(const BufferInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < bufferdata_size(); i++) {
    if (!this->bufferdata(i).IsInitialized()) return false;
  }
  return true;
}

void BufferInfo::Swap(BufferInfo* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    bufferdata_.Swap(&other->bufferdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BufferInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BufferInfo_descriptor_;
  metadata.reflection = BufferInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateBuffer::kBufferinfoFieldNumber;
#endif  // !_MSC_VER

AckUpdateBuffer::AckUpdateBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateBuffer::InitAsDefaultInstance() {
  bufferinfo_ = const_cast< ::HelloKittyMsgData::BufferInfo*>(&::HelloKittyMsgData::BufferInfo::default_instance());
}

AckUpdateBuffer::AckUpdateBuffer(const AckUpdateBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateBuffer::SharedCtor() {
  _cached_size_ = 0;
  bufferinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateBuffer::~AckUpdateBuffer() {
  SharedDtor();
}

void AckUpdateBuffer::SharedDtor() {
  if (this != default_instance_) {
    delete bufferinfo_;
  }
}

void AckUpdateBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateBuffer_descriptor_;
}

const AckUpdateBuffer& AckUpdateBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2eproto();
  return *default_instance_;
}

AckUpdateBuffer* AckUpdateBuffer::default_instance_ = NULL;

AckUpdateBuffer* AckUpdateBuffer::New() const {
  return new AckUpdateBuffer;
}

void AckUpdateBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bufferinfo()) {
      if (bufferinfo_ != NULL) bufferinfo_->::HelloKittyMsgData::BufferInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.BufferInfo bufferinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bufferinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.BufferInfo bufferinfo = 1;
  if (has_bufferinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bufferinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.BufferInfo bufferinfo = 1;
  if (has_bufferinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bufferinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.BufferInfo bufferinfo = 1;
    if (has_bufferinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bufferinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateBuffer::MergeFrom(const AckUpdateBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bufferinfo()) {
      mutable_bufferinfo()->::HelloKittyMsgData::BufferInfo::MergeFrom(from.bufferinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateBuffer::CopyFrom(const AckUpdateBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_bufferinfo()) {
    if (!this->bufferinfo().IsInitialized()) return false;
  }
  return true;
}

void AckUpdateBuffer::Swap(AckUpdateBuffer* other) {
  if (other != this) {
    std::swap(bufferinfo_, other->bufferinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateBuffer_descriptor_;
  metadata.reflection = AckUpdateBuffer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
