// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: burstevent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "burstevent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* BurstEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BurstEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBurstEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBurstEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateBurstEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateBurstEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpBurstEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpBurstEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BurstEventStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BurstEventOpType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_burstevent_2eproto() {
  protobuf_AddDesc_burstevent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "burstevent.proto");
  GOOGLE_CHECK(file != NULL);
  BurstEvent_descriptor_ = file->message_type(0);
  static const int BurstEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BurstEvent, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BurstEvent, npckey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BurstEvent, rewardkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BurstEvent, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BurstEvent, begintime_),
  };
  BurstEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BurstEvent_descriptor_,
      BurstEvent::default_instance_,
      BurstEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BurstEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BurstEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BurstEvent));
  ReqBurstEvent_descriptor_ = file->message_type(1);
  static const int ReqBurstEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBurstEvent, tempid_),
  };
  ReqBurstEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBurstEvent_descriptor_,
      ReqBurstEvent::default_instance_,
      ReqBurstEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBurstEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBurstEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBurstEvent));
  AckUpdateBurstEvent_descriptor_ = file->message_type(2);
  static const int AckUpdateBurstEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateBurstEvent, eventlist_),
  };
  AckUpdateBurstEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateBurstEvent_descriptor_,
      AckUpdateBurstEvent::default_instance_,
      AckUpdateBurstEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateBurstEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateBurstEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateBurstEvent));
  ReqOpBurstEvent_descriptor_ = file->message_type(3);
  static const int ReqOpBurstEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpBurstEvent, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpBurstEvent, optype_),
  };
  ReqOpBurstEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpBurstEvent_descriptor_,
      ReqOpBurstEvent::default_instance_,
      ReqOpBurstEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpBurstEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpBurstEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpBurstEvent));
  BurstEventStatus_descriptor_ = file->enum_type(0);
  BurstEventOpType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_burstevent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BurstEvent_descriptor_, &BurstEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBurstEvent_descriptor_, &ReqBurstEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateBurstEvent_descriptor_, &AckUpdateBurstEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpBurstEvent_descriptor_, &ReqOpBurstEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_burstevent_2eproto() {
  delete BurstEvent::default_instance_;
  delete BurstEvent_reflection_;
  delete ReqBurstEvent::default_instance_;
  delete ReqBurstEvent_reflection_;
  delete AckUpdateBurstEvent::default_instance_;
  delete AckUpdateBurstEvent_reflection_;
  delete ReqOpBurstEvent::default_instance_;
  delete ReqOpBurstEvent_reflection_;
}

void protobuf_AddDesc_burstevent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020burstevent.proto\022\021HelloKittyMsgData\"\207\001"
    "\n\nBurstEvent\022\016\n\006tempid\030\001 \002(\004\022\016\n\006npckey\030\002"
    " \002(\r\022\021\n\trewardkey\030\003 \002(\r\0223\n\006status\030\004 \002(\0162"
    "#.HelloKittyMsgData.BurstEventStatus\022\021\n\t"
    "begintime\030\005 \002(\r\"\"\n\rReqBurstEvent\022\021\n\006temp"
    "id\030\001 \001(\004:\0010\"G\n\023AckUpdateBurstEvent\0220\n\tev"
    "entList\030\001 \003(\0132\035.HelloKittyMsgData.BurstE"
    "vent\"V\n\017ReqOpBurstEvent\022\016\n\006tempid\030\001 \002(\004\022"
    "3\n\006optype\030\002 \002(\0162#.HelloKittyMsgData.Burs"
    "tEventOpType*[\n\020BurstEventStatus\022\016\n\nBES_"
    "Accept\020\000\022\022\n\016BES_Del_Finish\020\001\022\020\n\014BES_Del_"
    "Road\020\002\022\021\n\rBES_Del_Other\020\003*4\n\020BurstEventO"
    "pType\022\017\n\013BEOT_Submit\020\000\022\017\n\013BEOT_Object\020\001", 519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "burstevent.proto", &protobuf_RegisterTypes);
  BurstEvent::default_instance_ = new BurstEvent();
  ReqBurstEvent::default_instance_ = new ReqBurstEvent();
  AckUpdateBurstEvent::default_instance_ = new AckUpdateBurstEvent();
  ReqOpBurstEvent::default_instance_ = new ReqOpBurstEvent();
  BurstEvent::default_instance_->InitAsDefaultInstance();
  ReqBurstEvent::default_instance_->InitAsDefaultInstance();
  AckUpdateBurstEvent::default_instance_->InitAsDefaultInstance();
  ReqOpBurstEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_burstevent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_burstevent_2eproto {
  StaticDescriptorInitializer_burstevent_2eproto() {
    protobuf_AddDesc_burstevent_2eproto();
  }
} static_descriptor_initializer_burstevent_2eproto_;
const ::google::protobuf::EnumDescriptor* BurstEventStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BurstEventStatus_descriptor_;
}
bool BurstEventStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BurstEventOpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BurstEventOpType_descriptor_;
}
bool BurstEventOpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BurstEvent::kTempidFieldNumber;
const int BurstEvent::kNpckeyFieldNumber;
const int BurstEvent::kRewardkeyFieldNumber;
const int BurstEvent::kStatusFieldNumber;
const int BurstEvent::kBegintimeFieldNumber;
#endif  // !_MSC_VER

BurstEvent::BurstEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BurstEvent::InitAsDefaultInstance() {
}

BurstEvent::BurstEvent(const BurstEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BurstEvent::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  npckey_ = 0u;
  rewardkey_ = 0u;
  status_ = 0;
  begintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BurstEvent::~BurstEvent() {
  SharedDtor();
}

void BurstEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BurstEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BurstEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BurstEvent_descriptor_;
}

const BurstEvent& BurstEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_burstevent_2eproto();
  return *default_instance_;
}

BurstEvent* BurstEvent::default_instance_ = NULL;

BurstEvent* BurstEvent::New() const {
  return new BurstEvent;
}

void BurstEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    npckey_ = 0u;
    rewardkey_ = 0u;
    status_ = 0;
    begintime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BurstEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npckey;
        break;
      }

      // required uint32 npckey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npckey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npckey_)));
          set_has_npckey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardkey;
        break;
      }

      // required uint32 rewardkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardkey_)));
          set_has_rewardkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .HelloKittyMsgData.BurstEventStatus status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::BurstEventStatus_IsValid(value)) {
            set_status(static_cast< ::HelloKittyMsgData::BurstEventStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_begintime;
        break;
      }

      // required uint32 begintime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BurstEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required uint32 npckey = 2;
  if (has_npckey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npckey(), output);
  }

  // required uint32 rewardkey = 3;
  if (has_rewardkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rewardkey(), output);
  }

  // required .HelloKittyMsgData.BurstEventStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // required uint32 begintime = 5;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BurstEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required uint32 npckey = 2;
  if (has_npckey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npckey(), target);
  }

  // required uint32 rewardkey = 3;
  if (has_rewardkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rewardkey(), target);
  }

  // required .HelloKittyMsgData.BurstEventStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // required uint32 begintime = 5;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BurstEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required uint32 npckey = 2;
    if (has_npckey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npckey());
    }

    // required uint32 rewardkey = 3;
    if (has_rewardkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardkey());
    }

    // required .HelloKittyMsgData.BurstEventStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 begintime = 5;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BurstEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BurstEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BurstEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BurstEvent::MergeFrom(const BurstEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_npckey()) {
      set_npckey(from.npckey());
    }
    if (from.has_rewardkey()) {
      set_rewardkey(from.rewardkey());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BurstEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BurstEvent::CopyFrom(const BurstEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurstEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BurstEvent::Swap(BurstEvent* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(npckey_, other->npckey_);
    std::swap(rewardkey_, other->rewardkey_);
    std::swap(status_, other->status_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BurstEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BurstEvent_descriptor_;
  metadata.reflection = BurstEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBurstEvent::kTempidFieldNumber;
#endif  // !_MSC_VER

ReqBurstEvent::ReqBurstEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBurstEvent::InitAsDefaultInstance() {
}

ReqBurstEvent::ReqBurstEvent(const ReqBurstEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBurstEvent::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBurstEvent::~ReqBurstEvent() {
  SharedDtor();
}

void ReqBurstEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBurstEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBurstEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBurstEvent_descriptor_;
}

const ReqBurstEvent& ReqBurstEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_burstevent_2eproto();
  return *default_instance_;
}

ReqBurstEvent* ReqBurstEvent::default_instance_ = NULL;

ReqBurstEvent* ReqBurstEvent::New() const {
  return new ReqBurstEvent;
}

void ReqBurstEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBurstEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tempid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBurstEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tempid = 1 [default = 0];
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBurstEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tempid = 1 [default = 0];
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBurstEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tempid = 1 [default = 0];
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBurstEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBurstEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBurstEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBurstEvent::MergeFrom(const ReqBurstEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBurstEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBurstEvent::CopyFrom(const ReqBurstEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBurstEvent::IsInitialized() const {

  return true;
}

void ReqBurstEvent::Swap(ReqBurstEvent* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBurstEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBurstEvent_descriptor_;
  metadata.reflection = ReqBurstEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateBurstEvent::kEventListFieldNumber;
#endif  // !_MSC_VER

AckUpdateBurstEvent::AckUpdateBurstEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateBurstEvent::InitAsDefaultInstance() {
}

AckUpdateBurstEvent::AckUpdateBurstEvent(const AckUpdateBurstEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateBurstEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateBurstEvent::~AckUpdateBurstEvent() {
  SharedDtor();
}

void AckUpdateBurstEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateBurstEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateBurstEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateBurstEvent_descriptor_;
}

const AckUpdateBurstEvent& AckUpdateBurstEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_burstevent_2eproto();
  return *default_instance_;
}

AckUpdateBurstEvent* AckUpdateBurstEvent::default_instance_ = NULL;

AckUpdateBurstEvent* AckUpdateBurstEvent::New() const {
  return new AckUpdateBurstEvent;
}

void AckUpdateBurstEvent::Clear() {
  eventlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateBurstEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.BurstEvent eventList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_eventList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateBurstEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.BurstEvent eventList = 1;
  for (int i = 0; i < this->eventlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eventlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateBurstEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.BurstEvent eventList = 1;
  for (int i = 0; i < this->eventlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->eventlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateBurstEvent::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.BurstEvent eventList = 1;
  total_size += 1 * this->eventlist_size();
  for (int i = 0; i < this->eventlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateBurstEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateBurstEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateBurstEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateBurstEvent::MergeFrom(const AckUpdateBurstEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventlist_.MergeFrom(from.eventlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateBurstEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateBurstEvent::CopyFrom(const AckUpdateBurstEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateBurstEvent::IsInitialized() const {

  for (int i = 0; i < eventlist_size(); i++) {
    if (!this->eventlist(i).IsInitialized()) return false;
  }
  return true;
}

void AckUpdateBurstEvent::Swap(AckUpdateBurstEvent* other) {
  if (other != this) {
    eventlist_.Swap(&other->eventlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateBurstEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateBurstEvent_descriptor_;
  metadata.reflection = AckUpdateBurstEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpBurstEvent::kTempidFieldNumber;
const int ReqOpBurstEvent::kOptypeFieldNumber;
#endif  // !_MSC_VER

ReqOpBurstEvent::ReqOpBurstEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpBurstEvent::InitAsDefaultInstance() {
}

ReqOpBurstEvent::ReqOpBurstEvent(const ReqOpBurstEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpBurstEvent::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpBurstEvent::~ReqOpBurstEvent() {
  SharedDtor();
}

void ReqOpBurstEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpBurstEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpBurstEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpBurstEvent_descriptor_;
}

const ReqOpBurstEvent& ReqOpBurstEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_burstevent_2eproto();
  return *default_instance_;
}

ReqOpBurstEvent* ReqOpBurstEvent::default_instance_ = NULL;

ReqOpBurstEvent* ReqOpBurstEvent::New() const {
  return new ReqOpBurstEvent;
}

void ReqOpBurstEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    optype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpBurstEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_optype;
        break;
      }

      // required .HelloKittyMsgData.BurstEventOpType optype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::BurstEventOpType_IsValid(value)) {
            set_optype(static_cast< ::HelloKittyMsgData::BurstEventOpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpBurstEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required .HelloKittyMsgData.BurstEventOpType optype = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpBurstEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required .HelloKittyMsgData.BurstEventOpType optype = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpBurstEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.BurstEventOpType optype = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpBurstEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpBurstEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpBurstEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpBurstEvent::MergeFrom(const ReqOpBurstEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpBurstEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpBurstEvent::CopyFrom(const ReqOpBurstEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpBurstEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqOpBurstEvent::Swap(ReqOpBurstEvent* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpBurstEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpBurstEvent_descriptor_;
  metadata.reflection = ReqOpBurstEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
