// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef PROTOBUF_friend_2eproto__INCLUDED
#define PROTOBUF_friend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "event.pb.h"
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friend_2eproto();
void protobuf_AssignDesc_friend_2eproto();
void protobuf_ShutdownFile_friend_2eproto();

class MemberRelation;
class ReqAddFriend;
class AckAddFriend;
class ReqKickFriend;
class AckKickFriend;
class ReqRelationList;
class AckRelationList;
class FriendFansChangeLine;

enum RlationTypeServer {
  RlationTypeServer_Friend = 0
};
bool RlationTypeServer_IsValid(int value);
const RlationTypeServer RlationTypeServer_MIN = RlationTypeServer_Friend;
const RlationTypeServer RlationTypeServer_MAX = RlationTypeServer_Friend;
const int RlationTypeServer_ARRAYSIZE = RlationTypeServer_MAX + 1;

const ::google::protobuf::EnumDescriptor* RlationTypeServer_descriptor();
inline const ::std::string& RlationTypeServer_Name(RlationTypeServer value) {
  return ::google::protobuf::internal::NameOfEnum(
    RlationTypeServer_descriptor(), value);
}
inline bool RlationTypeServer_Parse(
    const ::std::string& name, RlationTypeServer* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RlationTypeServer>(
    RlationTypeServer_descriptor(), name, value);
}
enum RlationTypeClient {
  RlationTypeClient_None = 0,
  RlationTypeClient_IsFriend = 1,
  RlationTypeClient_IsFans = 2,
  RlationTypeClient_IsFriend2 = 3
};
bool RlationTypeClient_IsValid(int value);
const RlationTypeClient RlationTypeClient_MIN = RlationTypeClient_None;
const RlationTypeClient RlationTypeClient_MAX = RlationTypeClient_IsFriend2;
const int RlationTypeClient_ARRAYSIZE = RlationTypeClient_MAX + 1;

const ::google::protobuf::EnumDescriptor* RlationTypeClient_descriptor();
inline const ::std::string& RlationTypeClient_Name(RlationTypeClient value) {
  return ::google::protobuf::internal::NameOfEnum(
    RlationTypeClient_descriptor(), value);
}
inline bool RlationTypeClient_Parse(
    const ::std::string& name, RlationTypeClient* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RlationTypeClient>(
    RlationTypeClient_descriptor(), name, value);
}
enum ReqAddFriendReSult {
  ReqAddFriendReSult_Suc = 0,
  ReqAddFriendReSult_NoPerson = 1,
  ReqAddFriendReSult_IsFriendAlready = 2,
  ReqAddFriendReSult_Full = 3,
  ReqAddFriendReSult_Other = 4
};
bool ReqAddFriendReSult_IsValid(int value);
const ReqAddFriendReSult ReqAddFriendReSult_MIN = ReqAddFriendReSult_Suc;
const ReqAddFriendReSult ReqAddFriendReSult_MAX = ReqAddFriendReSult_Other;
const int ReqAddFriendReSult_ARRAYSIZE = ReqAddFriendReSult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqAddFriendReSult_descriptor();
inline const ::std::string& ReqAddFriendReSult_Name(ReqAddFriendReSult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAddFriendReSult_descriptor(), value);
}
inline bool ReqAddFriendReSult_Parse(
    const ::std::string& name, ReqAddFriendReSult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAddFriendReSult>(
    ReqAddFriendReSult_descriptor(), name, value);
}
enum ReqKickFriendReSult {
  ReqKickFriendReSult_Suc = 0,
  ReqKickFriendReSult_NoFriend = 1,
  ReqKickFriendReSult_Other = 2
};
bool ReqKickFriendReSult_IsValid(int value);
const ReqKickFriendReSult ReqKickFriendReSult_MIN = ReqKickFriendReSult_Suc;
const ReqKickFriendReSult ReqKickFriendReSult_MAX = ReqKickFriendReSult_Other;
const int ReqKickFriendReSult_ARRAYSIZE = ReqKickFriendReSult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqKickFriendReSult_descriptor();
inline const ::std::string& ReqKickFriendReSult_Name(ReqKickFriendReSult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqKickFriendReSult_descriptor(), value);
}
inline bool ReqKickFriendReSult_Parse(
    const ::std::string& name, ReqKickFriendReSult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqKickFriendReSult>(
    ReqKickFriendReSult_descriptor(), name, value);
}
enum ReqListType {
  FriendList = 0,
  FansList = 1,
  RadomList = 2
};
bool ReqListType_IsValid(int value);
const ReqListType ReqListType_MIN = FriendList;
const ReqListType ReqListType_MAX = RadomList;
const int ReqListType_ARRAYSIZE = ReqListType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqListType_descriptor();
inline const ::std::string& ReqListType_Name(ReqListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqListType_descriptor(), value);
}
inline bool ReqListType_Parse(
    const ::std::string& name, ReqListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqListType>(
    ReqListType_descriptor(), name, value);
}
enum FriendLineState {
  FriendLineState_OnLine = 0,
  FriendLineState_OffLine = 1,
  FriendLineState_AddFriend = 2,
  FriendLineState_KickFriend = 3,
  FriendLineState_EventHappen = 4,
  FriendLineState_EventClose = 5
};
bool FriendLineState_IsValid(int value);
const FriendLineState FriendLineState_MIN = FriendLineState_OnLine;
const FriendLineState FriendLineState_MAX = FriendLineState_EventClose;
const int FriendLineState_ARRAYSIZE = FriendLineState_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendLineState_descriptor();
inline const ::std::string& FriendLineState_Name(FriendLineState value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendLineState_descriptor(), value);
}
inline bool FriendLineState_Parse(
    const ::std::string& name, FriendLineState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendLineState>(
    FriendLineState_descriptor(), name, value);
}
// ===================================================================

class MemberRelation : public ::google::protobuf::Message {
 public:
  MemberRelation();
  virtual ~MemberRelation();

  MemberRelation(const MemberRelation& from);

  inline MemberRelation& operator=(const MemberRelation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberRelation& default_instance();

  void Swap(MemberRelation* other);

  // implements Message ----------------------------------------------

  MemberRelation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemberRelation& from);
  void MergeFrom(const MemberRelation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // required string Playername = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required .HelloKittyMsgData.RlationTypeClient TypeRalation = 3;
  inline bool has_typeralation() const;
  inline void clear_typeralation();
  static const int kTypeRalationFieldNumber = 3;
  inline ::HelloKittyMsgData::RlationTypeClient typeralation() const;
  inline void set_typeralation(::HelloKittyMsgData::RlationTypeClient value);

  // optional .HelloKittyMsgData.PlayerEvent Event = 4;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 4;
  inline const ::HelloKittyMsgData::PlayerEvent& event() const;
  inline ::HelloKittyMsgData::PlayerEvent* mutable_event();
  inline ::HelloKittyMsgData::PlayerEvent* release_event();
  inline void set_allocated_event(::HelloKittyMsgData::PlayerEvent* event);

  // required uint32 LoginOutTimer = 5;
  inline bool has_loginouttimer() const;
  inline void clear_loginouttimer();
  static const int kLoginOutTimerFieldNumber = 5;
  inline ::google::protobuf::uint32 loginouttimer() const;
  inline void set_loginouttimer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.MemberRelation)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_typeralation();
  inline void clear_has_typeralation();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_loginouttimer();
  inline void clear_has_loginouttimer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::std::string* playername_;
  ::HelloKittyMsgData::PlayerEvent* event_;
  int typeralation_;
  ::google::protobuf::uint32 loginouttimer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static MemberRelation* default_instance_;
};
// -------------------------------------------------------------------

class ReqAddFriend : public ::google::protobuf::Message {
 public:
  ReqAddFriend();
  virtual ~ReqAddFriend();

  ReqAddFriend(const ReqAddFriend& from);

  inline ReqAddFriend& operator=(const ReqAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAddFriend& default_instance();

  void Swap(ReqAddFriend* other);

  // implements Message ----------------------------------------------

  ReqAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAddFriend& from);
  void MergeFrom(const ReqAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqAddFriend)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static ReqAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class AckAddFriend : public ::google::protobuf::Message {
 public:
  AckAddFriend();
  virtual ~AckAddFriend();

  AckAddFriend(const AckAddFriend& from);

  inline AckAddFriend& operator=(const AckAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckAddFriend& default_instance();

  void Swap(AckAddFriend* other);

  // implements Message ----------------------------------------------

  AckAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckAddFriend& from);
  void MergeFrom(const AckAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.ReqAddFriendReSult ReSult = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kReSultFieldNumber = 1;
  inline ::HelloKittyMsgData::ReqAddFriendReSult result() const;
  inline void set_result(::HelloKittyMsgData::ReqAddFriendReSult value);

  // required .HelloKittyMsgData.MemberRelation AckMember = 2;
  inline bool has_ackmember() const;
  inline void clear_ackmember();
  static const int kAckMemberFieldNumber = 2;
  inline const ::HelloKittyMsgData::MemberRelation& ackmember() const;
  inline ::HelloKittyMsgData::MemberRelation* mutable_ackmember();
  inline ::HelloKittyMsgData::MemberRelation* release_ackmember();
  inline void set_allocated_ackmember(::HelloKittyMsgData::MemberRelation* ackmember);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckAddFriend)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ackmember();
  inline void clear_has_ackmember();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::MemberRelation* ackmember_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static AckAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class ReqKickFriend : public ::google::protobuf::Message {
 public:
  ReqKickFriend();
  virtual ~ReqKickFriend();

  ReqKickFriend(const ReqKickFriend& from);

  inline ReqKickFriend& operator=(const ReqKickFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqKickFriend& default_instance();

  void Swap(ReqKickFriend* other);

  // implements Message ----------------------------------------------

  ReqKickFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqKickFriend& from);
  void MergeFrom(const ReqKickFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 PlayerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqKickFriend)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static ReqKickFriend* default_instance_;
};
// -------------------------------------------------------------------

class AckKickFriend : public ::google::protobuf::Message {
 public:
  AckKickFriend();
  virtual ~AckKickFriend();

  AckKickFriend(const AckKickFriend& from);

  inline AckKickFriend& operator=(const AckKickFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckKickFriend& default_instance();

  void Swap(AckKickFriend* other);

  // implements Message ----------------------------------------------

  AckKickFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckKickFriend& from);
  void MergeFrom(const AckKickFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.ReqKickFriendReSult ReSult = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kReSultFieldNumber = 1;
  inline ::HelloKittyMsgData::ReqKickFriendReSult result() const;
  inline void set_result(::HelloKittyMsgData::ReqKickFriendReSult value);

  // required .HelloKittyMsgData.MemberRelation AckMember = 2;
  inline bool has_ackmember() const;
  inline void clear_ackmember();
  static const int kAckMemberFieldNumber = 2;
  inline const ::HelloKittyMsgData::MemberRelation& ackmember() const;
  inline ::HelloKittyMsgData::MemberRelation* mutable_ackmember();
  inline ::HelloKittyMsgData::MemberRelation* release_ackmember();
  inline void set_allocated_ackmember(::HelloKittyMsgData::MemberRelation* ackmember);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckKickFriend)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ackmember();
  inline void clear_has_ackmember();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::MemberRelation* ackmember_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static AckKickFriend* default_instance_;
};
// -------------------------------------------------------------------

class ReqRelationList : public ::google::protobuf::Message {
 public:
  ReqRelationList();
  virtual ~ReqRelationList();

  ReqRelationList(const ReqRelationList& from);

  inline ReqRelationList& operator=(const ReqRelationList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRelationList& default_instance();

  void Swap(ReqRelationList* other);

  // implements Message ----------------------------------------------

  ReqRelationList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRelationList& from);
  void MergeFrom(const ReqRelationList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.ReqListType ListType = 1;
  inline bool has_listtype() const;
  inline void clear_listtype();
  static const int kListTypeFieldNumber = 1;
  inline ::HelloKittyMsgData::ReqListType listtype() const;
  inline void set_listtype(::HelloKittyMsgData::ReqListType value);

  // required uint32 PageMax = 2;
  inline bool has_pagemax() const;
  inline void clear_pagemax();
  static const int kPageMaxFieldNumber = 2;
  inline ::google::protobuf::uint32 pagemax() const;
  inline void set_pagemax(::google::protobuf::uint32 value);

  // required uint32 PageNo = 3;
  inline bool has_pageno() const;
  inline void clear_pageno();
  static const int kPageNoFieldNumber = 3;
  inline ::google::protobuf::uint32 pageno() const;
  inline void set_pageno(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqRelationList)
 private:
  inline void set_has_listtype();
  inline void clear_has_listtype();
  inline void set_has_pagemax();
  inline void clear_has_pagemax();
  inline void set_has_pageno();
  inline void clear_has_pageno();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int listtype_;
  ::google::protobuf::uint32 pagemax_;
  ::google::protobuf::uint32 pageno_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static ReqRelationList* default_instance_;
};
// -------------------------------------------------------------------

class AckRelationList : public ::google::protobuf::Message {
 public:
  AckRelationList();
  virtual ~AckRelationList();

  AckRelationList(const AckRelationList& from);

  inline AckRelationList& operator=(const AckRelationList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckRelationList& default_instance();

  void Swap(AckRelationList* other);

  // implements Message ----------------------------------------------

  AckRelationList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckRelationList& from);
  void MergeFrom(const AckRelationList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.ReqListType ListType = 1;
  inline bool has_listtype() const;
  inline void clear_listtype();
  static const int kListTypeFieldNumber = 1;
  inline ::HelloKittyMsgData::ReqListType listtype() const;
  inline void set_listtype(::HelloKittyMsgData::ReqListType value);

  // required uint32 AllPageNo = 2;
  inline bool has_allpageno() const;
  inline void clear_allpageno();
  static const int kAllPageNoFieldNumber = 2;
  inline ::google::protobuf::uint32 allpageno() const;
  inline void set_allpageno(::google::protobuf::uint32 value);

  // required uint32 PageNo = 3;
  inline bool has_pageno() const;
  inline void clear_pageno();
  static const int kPageNoFieldNumber = 3;
  inline ::google::protobuf::uint32 pageno() const;
  inline void set_pageno(::google::protobuf::uint32 value);

  // required uint32 PageMax = 4;
  inline bool has_pagemax() const;
  inline void clear_pagemax();
  static const int kPageMaxFieldNumber = 4;
  inline ::google::protobuf::uint32 pagemax() const;
  inline void set_pagemax(::google::protobuf::uint32 value);

  // repeated .HelloKittyMsgData.MemberRelation vecMember = 5;
  inline int vecmember_size() const;
  inline void clear_vecmember();
  static const int kVecMemberFieldNumber = 5;
  inline const ::HelloKittyMsgData::MemberRelation& vecmember(int index) const;
  inline ::HelloKittyMsgData::MemberRelation* mutable_vecmember(int index);
  inline ::HelloKittyMsgData::MemberRelation* add_vecmember();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::MemberRelation >&
      vecmember() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::MemberRelation >*
      mutable_vecmember();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckRelationList)
 private:
  inline void set_has_listtype();
  inline void clear_has_listtype();
  inline void set_has_allpageno();
  inline void clear_has_allpageno();
  inline void set_has_pageno();
  inline void clear_has_pageno();
  inline void set_has_pagemax();
  inline void clear_has_pagemax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int listtype_;
  ::google::protobuf::uint32 allpageno_;
  ::google::protobuf::uint32 pageno_;
  ::google::protobuf::uint32 pagemax_;
  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::MemberRelation > vecmember_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static AckRelationList* default_instance_;
};
// -------------------------------------------------------------------

class FriendFansChangeLine : public ::google::protobuf::Message {
 public:
  FriendFansChangeLine();
  virtual ~FriendFansChangeLine();

  FriendFansChangeLine(const FriendFansChangeLine& from);

  inline FriendFansChangeLine& operator=(const FriendFansChangeLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendFansChangeLine& default_instance();

  void Swap(FriendFansChangeLine* other);

  // implements Message ----------------------------------------------

  FriendFansChangeLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendFansChangeLine& from);
  void MergeFrom(const FriendFansChangeLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.FriendLineState linestate = 1;
  inline bool has_linestate() const;
  inline void clear_linestate();
  static const int kLinestateFieldNumber = 1;
  inline ::HelloKittyMsgData::FriendLineState linestate() const;
  inline void set_linestate(::HelloKittyMsgData::FriendLineState value);

  // required .HelloKittyMsgData.MemberRelation Member = 2;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 2;
  inline const ::HelloKittyMsgData::MemberRelation& member() const;
  inline ::HelloKittyMsgData::MemberRelation* mutable_member();
  inline ::HelloKittyMsgData::MemberRelation* release_member();
  inline void set_allocated_member(::HelloKittyMsgData::MemberRelation* member);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.FriendFansChangeLine)
 private:
  inline void set_has_linestate();
  inline void clear_has_linestate();
  inline void set_has_member();
  inline void clear_has_member();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::MemberRelation* member_;
  int linestate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendFansChangeLine* default_instance_;
};
// ===================================================================


// ===================================================================

// MemberRelation

// required uint64 PlayerId = 1;
inline bool MemberRelation::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberRelation::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberRelation::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberRelation::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 MemberRelation::playerid() const {
  return playerid_;
}
inline void MemberRelation::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string Playername = 2;
inline bool MemberRelation::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberRelation::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberRelation::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberRelation::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& MemberRelation::playername() const {
  return *playername_;
}
inline void MemberRelation::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MemberRelation::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MemberRelation::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MemberRelation::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* MemberRelation::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MemberRelation::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .HelloKittyMsgData.RlationTypeClient TypeRalation = 3;
inline bool MemberRelation::has_typeralation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemberRelation::set_has_typeralation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemberRelation::clear_has_typeralation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemberRelation::clear_typeralation() {
  typeralation_ = 0;
  clear_has_typeralation();
}
inline ::HelloKittyMsgData::RlationTypeClient MemberRelation::typeralation() const {
  return static_cast< ::HelloKittyMsgData::RlationTypeClient >(typeralation_);
}
inline void MemberRelation::set_typeralation(::HelloKittyMsgData::RlationTypeClient value) {
  assert(::HelloKittyMsgData::RlationTypeClient_IsValid(value));
  set_has_typeralation();
  typeralation_ = value;
}

// optional .HelloKittyMsgData.PlayerEvent Event = 4;
inline bool MemberRelation::has_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemberRelation::set_has_event() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemberRelation::clear_has_event() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemberRelation::clear_event() {
  if (event_ != NULL) event_->::HelloKittyMsgData::PlayerEvent::Clear();
  clear_has_event();
}
inline const ::HelloKittyMsgData::PlayerEvent& MemberRelation::event() const {
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
inline ::HelloKittyMsgData::PlayerEvent* MemberRelation::mutable_event() {
  set_has_event();
  if (event_ == NULL) event_ = new ::HelloKittyMsgData::PlayerEvent;
  return event_;
}
inline ::HelloKittyMsgData::PlayerEvent* MemberRelation::release_event() {
  clear_has_event();
  ::HelloKittyMsgData::PlayerEvent* temp = event_;
  event_ = NULL;
  return temp;
}
inline void MemberRelation::set_allocated_event(::HelloKittyMsgData::PlayerEvent* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
}

// required uint32 LoginOutTimer = 5;
inline bool MemberRelation::has_loginouttimer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemberRelation::set_has_loginouttimer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MemberRelation::clear_has_loginouttimer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MemberRelation::clear_loginouttimer() {
  loginouttimer_ = 0u;
  clear_has_loginouttimer();
}
inline ::google::protobuf::uint32 MemberRelation::loginouttimer() const {
  return loginouttimer_;
}
inline void MemberRelation::set_loginouttimer(::google::protobuf::uint32 value) {
  set_has_loginouttimer();
  loginouttimer_ = value;
}

// -------------------------------------------------------------------

// ReqAddFriend

// required uint64 PlayerId = 1;
inline bool ReqAddFriend::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAddFriend::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAddFriend::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAddFriend::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 ReqAddFriend::playerid() const {
  return playerid_;
}
inline void ReqAddFriend::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// AckAddFriend

// required .HelloKittyMsgData.ReqAddFriendReSult ReSult = 1;
inline bool AckAddFriend::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckAddFriend::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckAddFriend::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckAddFriend::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::HelloKittyMsgData::ReqAddFriendReSult AckAddFriend::result() const {
  return static_cast< ::HelloKittyMsgData::ReqAddFriendReSult >(result_);
}
inline void AckAddFriend::set_result(::HelloKittyMsgData::ReqAddFriendReSult value) {
  assert(::HelloKittyMsgData::ReqAddFriendReSult_IsValid(value));
  set_has_result();
  result_ = value;
}

// required .HelloKittyMsgData.MemberRelation AckMember = 2;
inline bool AckAddFriend::has_ackmember() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckAddFriend::set_has_ackmember() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckAddFriend::clear_has_ackmember() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckAddFriend::clear_ackmember() {
  if (ackmember_ != NULL) ackmember_->::HelloKittyMsgData::MemberRelation::Clear();
  clear_has_ackmember();
}
inline const ::HelloKittyMsgData::MemberRelation& AckAddFriend::ackmember() const {
  return ackmember_ != NULL ? *ackmember_ : *default_instance_->ackmember_;
}
inline ::HelloKittyMsgData::MemberRelation* AckAddFriend::mutable_ackmember() {
  set_has_ackmember();
  if (ackmember_ == NULL) ackmember_ = new ::HelloKittyMsgData::MemberRelation;
  return ackmember_;
}
inline ::HelloKittyMsgData::MemberRelation* AckAddFriend::release_ackmember() {
  clear_has_ackmember();
  ::HelloKittyMsgData::MemberRelation* temp = ackmember_;
  ackmember_ = NULL;
  return temp;
}
inline void AckAddFriend::set_allocated_ackmember(::HelloKittyMsgData::MemberRelation* ackmember) {
  delete ackmember_;
  ackmember_ = ackmember;
  if (ackmember) {
    set_has_ackmember();
  } else {
    clear_has_ackmember();
  }
}

// -------------------------------------------------------------------

// ReqKickFriend

// required uint64 PlayerId = 1;
inline bool ReqKickFriend::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqKickFriend::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqKickFriend::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqKickFriend::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 ReqKickFriend::playerid() const {
  return playerid_;
}
inline void ReqKickFriend::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// AckKickFriend

// required .HelloKittyMsgData.ReqKickFriendReSult ReSult = 1;
inline bool AckKickFriend::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckKickFriend::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckKickFriend::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckKickFriend::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::HelloKittyMsgData::ReqKickFriendReSult AckKickFriend::result() const {
  return static_cast< ::HelloKittyMsgData::ReqKickFriendReSult >(result_);
}
inline void AckKickFriend::set_result(::HelloKittyMsgData::ReqKickFriendReSult value) {
  assert(::HelloKittyMsgData::ReqKickFriendReSult_IsValid(value));
  set_has_result();
  result_ = value;
}

// required .HelloKittyMsgData.MemberRelation AckMember = 2;
inline bool AckKickFriend::has_ackmember() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckKickFriend::set_has_ackmember() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckKickFriend::clear_has_ackmember() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckKickFriend::clear_ackmember() {
  if (ackmember_ != NULL) ackmember_->::HelloKittyMsgData::MemberRelation::Clear();
  clear_has_ackmember();
}
inline const ::HelloKittyMsgData::MemberRelation& AckKickFriend::ackmember() const {
  return ackmember_ != NULL ? *ackmember_ : *default_instance_->ackmember_;
}
inline ::HelloKittyMsgData::MemberRelation* AckKickFriend::mutable_ackmember() {
  set_has_ackmember();
  if (ackmember_ == NULL) ackmember_ = new ::HelloKittyMsgData::MemberRelation;
  return ackmember_;
}
inline ::HelloKittyMsgData::MemberRelation* AckKickFriend::release_ackmember() {
  clear_has_ackmember();
  ::HelloKittyMsgData::MemberRelation* temp = ackmember_;
  ackmember_ = NULL;
  return temp;
}
inline void AckKickFriend::set_allocated_ackmember(::HelloKittyMsgData::MemberRelation* ackmember) {
  delete ackmember_;
  ackmember_ = ackmember;
  if (ackmember) {
    set_has_ackmember();
  } else {
    clear_has_ackmember();
  }
}

// -------------------------------------------------------------------

// ReqRelationList

// required .HelloKittyMsgData.ReqListType ListType = 1;
inline bool ReqRelationList::has_listtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRelationList::set_has_listtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRelationList::clear_has_listtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRelationList::clear_listtype() {
  listtype_ = 0;
  clear_has_listtype();
}
inline ::HelloKittyMsgData::ReqListType ReqRelationList::listtype() const {
  return static_cast< ::HelloKittyMsgData::ReqListType >(listtype_);
}
inline void ReqRelationList::set_listtype(::HelloKittyMsgData::ReqListType value) {
  assert(::HelloKittyMsgData::ReqListType_IsValid(value));
  set_has_listtype();
  listtype_ = value;
}

// required uint32 PageMax = 2;
inline bool ReqRelationList::has_pagemax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRelationList::set_has_pagemax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqRelationList::clear_has_pagemax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqRelationList::clear_pagemax() {
  pagemax_ = 0u;
  clear_has_pagemax();
}
inline ::google::protobuf::uint32 ReqRelationList::pagemax() const {
  return pagemax_;
}
inline void ReqRelationList::set_pagemax(::google::protobuf::uint32 value) {
  set_has_pagemax();
  pagemax_ = value;
}

// required uint32 PageNo = 3;
inline bool ReqRelationList::has_pageno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqRelationList::set_has_pageno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqRelationList::clear_has_pageno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqRelationList::clear_pageno() {
  pageno_ = 0u;
  clear_has_pageno();
}
inline ::google::protobuf::uint32 ReqRelationList::pageno() const {
  return pageno_;
}
inline void ReqRelationList::set_pageno(::google::protobuf::uint32 value) {
  set_has_pageno();
  pageno_ = value;
}

// -------------------------------------------------------------------

// AckRelationList

// required .HelloKittyMsgData.ReqListType ListType = 1;
inline bool AckRelationList::has_listtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckRelationList::set_has_listtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckRelationList::clear_has_listtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckRelationList::clear_listtype() {
  listtype_ = 0;
  clear_has_listtype();
}
inline ::HelloKittyMsgData::ReqListType AckRelationList::listtype() const {
  return static_cast< ::HelloKittyMsgData::ReqListType >(listtype_);
}
inline void AckRelationList::set_listtype(::HelloKittyMsgData::ReqListType value) {
  assert(::HelloKittyMsgData::ReqListType_IsValid(value));
  set_has_listtype();
  listtype_ = value;
}

// required uint32 AllPageNo = 2;
inline bool AckRelationList::has_allpageno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckRelationList::set_has_allpageno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckRelationList::clear_has_allpageno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckRelationList::clear_allpageno() {
  allpageno_ = 0u;
  clear_has_allpageno();
}
inline ::google::protobuf::uint32 AckRelationList::allpageno() const {
  return allpageno_;
}
inline void AckRelationList::set_allpageno(::google::protobuf::uint32 value) {
  set_has_allpageno();
  allpageno_ = value;
}

// required uint32 PageNo = 3;
inline bool AckRelationList::has_pageno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckRelationList::set_has_pageno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckRelationList::clear_has_pageno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckRelationList::clear_pageno() {
  pageno_ = 0u;
  clear_has_pageno();
}
inline ::google::protobuf::uint32 AckRelationList::pageno() const {
  return pageno_;
}
inline void AckRelationList::set_pageno(::google::protobuf::uint32 value) {
  set_has_pageno();
  pageno_ = value;
}

// required uint32 PageMax = 4;
inline bool AckRelationList::has_pagemax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckRelationList::set_has_pagemax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckRelationList::clear_has_pagemax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckRelationList::clear_pagemax() {
  pagemax_ = 0u;
  clear_has_pagemax();
}
inline ::google::protobuf::uint32 AckRelationList::pagemax() const {
  return pagemax_;
}
inline void AckRelationList::set_pagemax(::google::protobuf::uint32 value) {
  set_has_pagemax();
  pagemax_ = value;
}

// repeated .HelloKittyMsgData.MemberRelation vecMember = 5;
inline int AckRelationList::vecmember_size() const {
  return vecmember_.size();
}
inline void AckRelationList::clear_vecmember() {
  vecmember_.Clear();
}
inline const ::HelloKittyMsgData::MemberRelation& AckRelationList::vecmember(int index) const {
  return vecmember_.Get(index);
}
inline ::HelloKittyMsgData::MemberRelation* AckRelationList::mutable_vecmember(int index) {
  return vecmember_.Mutable(index);
}
inline ::HelloKittyMsgData::MemberRelation* AckRelationList::add_vecmember() {
  return vecmember_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::MemberRelation >&
AckRelationList::vecmember() const {
  return vecmember_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::MemberRelation >*
AckRelationList::mutable_vecmember() {
  return &vecmember_;
}

// -------------------------------------------------------------------

// FriendFansChangeLine

// required .HelloKittyMsgData.FriendLineState linestate = 1;
inline bool FriendFansChangeLine::has_linestate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendFansChangeLine::set_has_linestate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendFansChangeLine::clear_has_linestate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendFansChangeLine::clear_linestate() {
  linestate_ = 0;
  clear_has_linestate();
}
inline ::HelloKittyMsgData::FriendLineState FriendFansChangeLine::linestate() const {
  return static_cast< ::HelloKittyMsgData::FriendLineState >(linestate_);
}
inline void FriendFansChangeLine::set_linestate(::HelloKittyMsgData::FriendLineState value) {
  assert(::HelloKittyMsgData::FriendLineState_IsValid(value));
  set_has_linestate();
  linestate_ = value;
}

// required .HelloKittyMsgData.MemberRelation Member = 2;
inline bool FriendFansChangeLine::has_member() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendFansChangeLine::set_has_member() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendFansChangeLine::clear_has_member() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendFansChangeLine::clear_member() {
  if (member_ != NULL) member_->::HelloKittyMsgData::MemberRelation::Clear();
  clear_has_member();
}
inline const ::HelloKittyMsgData::MemberRelation& FriendFansChangeLine::member() const {
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::HelloKittyMsgData::MemberRelation* FriendFansChangeLine::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::HelloKittyMsgData::MemberRelation;
  return member_;
}
inline ::HelloKittyMsgData::MemberRelation* FriendFansChangeLine::release_member() {
  clear_has_member();
  ::HelloKittyMsgData::MemberRelation* temp = member_;
  member_ = NULL;
  return temp;
}
inline void FriendFansChangeLine::set_allocated_member(::HelloKittyMsgData::MemberRelation* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::RlationTypeServer>() {
  return ::HelloKittyMsgData::RlationTypeServer_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::RlationTypeClient>() {
  return ::HelloKittyMsgData::RlationTypeClient_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::ReqAddFriendReSult>() {
  return ::HelloKittyMsgData::ReqAddFriendReSult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::ReqKickFriendReSult>() {
  return ::HelloKittyMsgData::ReqKickFriendReSult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::ReqListType>() {
  return ::HelloKittyMsgData::ReqListType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::FriendLineState>() {
  return ::HelloKittyMsgData::FriendLineState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friend_2eproto__INCLUDED
