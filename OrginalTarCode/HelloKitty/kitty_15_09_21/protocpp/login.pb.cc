// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* ReqVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLoginFailReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLoginFailReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLoginSuccessReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLoginSuccessReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLoginGateway_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLoginGateway_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCreateRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpReceiveWorldChatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpReceiveWorldChatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckNoticeClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckNoticeClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFlushUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFlushUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogout_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PhoneType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserPlateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginFailReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginRetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SexType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SwitchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NoticeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_login_2eproto() {
  protobuf_AddDesc_login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login.proto");
  GOOGLE_CHECK(file != NULL);
  ReqVersion_descriptor_ = file->message_type(0);
  static const int ReqVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVersion, clientversion_),
  };
  ReqVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqVersion_descriptor_,
      ReqVersion::default_instance_,
      ReqVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqVersion));
  AckVersion_descriptor_ = file->message_type(1);
  static const int AckVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVersion, version_),
  };
  AckVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckVersion_descriptor_,
      AckVersion::default_instance_,
      AckVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckVersion));
  ReqLogin_descriptor_ = file->message_type(2);
  static const int ReqLogin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, phonetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, phoneuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, gamezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, nettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, usertype_),
  };
  ReqLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogin_descriptor_,
      ReqLogin::default_instance_,
      ReqLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogin));
  AckLoginFailReturn_descriptor_ = file->message_type(3);
  static const int AckLoginFailReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginFailReturn, failreason_),
  };
  AckLoginFailReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLoginFailReturn_descriptor_,
      AckLoginFailReturn::default_instance_,
      AckLoginFailReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginFailReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginFailReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLoginFailReturn));
  AckLoginSuccessReturn_descriptor_ = file->message_type(4);
  static const int AckLoginSuccessReturn_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessReturn, logintempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessReturn, gatewayip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessReturn, gatewayport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessReturn, keyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessReturn, loginret_),
  };
  AckLoginSuccessReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLoginSuccessReturn_descriptor_,
      AckLoginSuccessReturn::default_instance_,
      AckLoginSuccessReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLoginSuccessReturn));
  ReqLoginGateway_descriptor_ = file->message_type(5);
  static const int ReqLoginGateway_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGateway, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGateway, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGateway, phonetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGateway, phoneuuid_),
  };
  ReqLoginGateway_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLoginGateway_descriptor_,
      ReqLoginGateway::default_instance_,
      ReqLoginGateway_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGateway, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGateway, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLoginGateway));
  AckGameTime_descriptor_ = file->message_type(6);
  static const int AckGameTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameTime, gametime_),
  };
  AckGameTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameTime_descriptor_,
      AckGameTime::default_instance_,
      AckGameTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameTime));
  UserBaseInfo_descriptor_ = file->message_type(7);
  static const int UserBaseInfo_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, workernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, friendval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, happyval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, randtoy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, itemwarehousecap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, sweetval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, carnival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, dress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, buildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, kittygarden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, produce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, produceitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, bufferinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, usecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, externbuffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, rubbish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, eventinit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, burstevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, familyid_),
  };
  UserBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBaseInfo_descriptor_,
      UserBaseInfo::default_instance_,
      UserBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBaseInfo));
  AckUserInfo_descriptor_ = file->message_type(8);
  static const int AckUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserInfo, hasuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserInfo, userbase_),
  };
  AckUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserInfo_descriptor_,
      AckUserInfo::default_instance_,
      AckUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserInfo));
  ReqCreateRole_descriptor_ = file->message_type(9);
  static const int ReqCreateRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, heroid_),
  };
  ReqCreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCreateRole_descriptor_,
      ReqCreateRole::default_instance_,
      ReqCreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCreateRole));
  ReqOpReceiveWorldChatCmd_descriptor_ = file->message_type(10);
  static const int ReqOpReceiveWorldChatCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpReceiveWorldChatCmd, switchflg_),
  };
  ReqOpReceiveWorldChatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpReceiveWorldChatCmd_descriptor_,
      ReqOpReceiveWorldChatCmd::default_instance_,
      ReqOpReceiveWorldChatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpReceiveWorldChatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpReceiveWorldChatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpReceiveWorldChatCmd));
  AckNoticeClient_descriptor_ = file->message_type(11);
  static const int AckNoticeClient_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNoticeClient, noticetype_),
  };
  AckNoticeClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckNoticeClient_descriptor_,
      AckNoticeClient::default_instance_,
      AckNoticeClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNoticeClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNoticeClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckNoticeClient));
  AckFlushUserInfo_descriptor_ = file->message_type(12);
  static const int AckFlushUserInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushUserInfo, userbase_),
  };
  AckFlushUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFlushUserInfo_descriptor_,
      AckFlushUserInfo::default_instance_,
      AckFlushUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFlushUserInfo));
  ReqLogout_descriptor_ = file->message_type(13);
  static const int ReqLogout_offsets_[1] = {
  };
  ReqLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogout_descriptor_,
      ReqLogout::default_instance_,
      ReqLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogout));
  PhoneType_descriptor_ = file->enum_type(0);
  NetType_descriptor_ = file->enum_type(1);
  UserPlateType_descriptor_ = file->enum_type(2);
  LoginFailReason_descriptor_ = file->enum_type(3);
  LoginRetType_descriptor_ = file->enum_type(4);
  SexType_descriptor_ = file->enum_type(5);
  SwitchType_descriptor_ = file->enum_type(6);
  NoticeType_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqVersion_descriptor_, &ReqVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckVersion_descriptor_, &AckVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogin_descriptor_, &ReqLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLoginFailReturn_descriptor_, &AckLoginFailReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLoginSuccessReturn_descriptor_, &AckLoginSuccessReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLoginGateway_descriptor_, &ReqLoginGateway::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameTime_descriptor_, &AckGameTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBaseInfo_descriptor_, &UserBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserInfo_descriptor_, &AckUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCreateRole_descriptor_, &ReqCreateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpReceiveWorldChatCmd_descriptor_, &ReqOpReceiveWorldChatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckNoticeClient_descriptor_, &AckNoticeClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFlushUserInfo_descriptor_, &AckFlushUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogout_descriptor_, &ReqLogout::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login_2eproto() {
  delete ReqVersion::default_instance_;
  delete ReqVersion_reflection_;
  delete AckVersion::default_instance_;
  delete AckVersion_reflection_;
  delete ReqLogin::default_instance_;
  delete ReqLogin_reflection_;
  delete AckLoginFailReturn::default_instance_;
  delete AckLoginFailReturn_reflection_;
  delete AckLoginSuccessReturn::default_instance_;
  delete AckLoginSuccessReturn_reflection_;
  delete ReqLoginGateway::default_instance_;
  delete ReqLoginGateway_reflection_;
  delete AckGameTime::default_instance_;
  delete AckGameTime_reflection_;
  delete UserBaseInfo::default_instance_;
  delete UserBaseInfo_reflection_;
  delete AckUserInfo::default_instance_;
  delete AckUserInfo_reflection_;
  delete ReqCreateRole::default_instance_;
  delete ReqCreateRole_reflection_;
  delete ReqOpReceiveWorldChatCmd::default_instance_;
  delete ReqOpReceiveWorldChatCmd_reflection_;
  delete AckNoticeClient::default_instance_;
  delete AckNoticeClient_reflection_;
  delete AckFlushUserInfo::default_instance_;
  delete AckFlushUserInfo_reflection_;
  delete ReqLogout::default_instance_;
  delete ReqLogout_reflection_;
}

void protobuf_AddDesc_login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_build_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_kittygarden_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_produceitem_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_usecardbuild_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_dress_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_enterkitty_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_common_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_event_2eproto();
  ::HelloKittyMsgData::protobuf_AddDesc_burstevent_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013login.proto\022\021HelloKittyMsgData\032\013build."
    "proto\032\021kittygarden.proto\032\021produceitem.pr"
    "oto\032\022usecardbuild.proto\032\013dress.proto\032\020en"
    "terkitty.proto\032\014common.proto\032\013event.prot"
    "o\032\020burstevent.proto\"#\n\nReqVersion\022\025\n\rcli"
    "entVersion\030\001 \002(\r\"\035\n\nAckVersion\022\017\n\007versio"
    "n\030\001 \002(\r\"\322\001\n\010ReqLogin\022/\n\tphoneType\030\001 \002(\0162"
    "\034.HelloKittyMsgData.PhoneType\022\021\n\tphoneUu"
    "id\030\002 \002(\t\022\020\n\010gameZone\030\003 \002(\r\022\017\n\007account\030\004 "
    "\002(\t\022+\n\007netType\030\005 \002(\0162\032.HelloKittyMsgData"
    ".NetType\0222\n\010usertype\030\006 \002(\0162 .HelloKittyM"
    "sgData.UserPlateType\"L\n\022AckLoginFailRetu"
    "rn\0226\n\nfailReason\030\001 \002(\0162\".HelloKittyMsgDa"
    "ta.LoginFailReason\"\227\001\n\025AckLoginSuccessRe"
    "turn\022\023\n\013loginTempID\030\001 \002(\r\022\021\n\tgatewayIP\030\002"
    " \002(\t\022\023\n\013gatewayPort\030\003 \002(\r\022\016\n\006keyArr\030\004 \003("
    "\r\0221\n\010loginRet\030\005 \002(\0162\037.HelloKittyMsgData."
    "LoginRetType\"\232\001\n\017ReqLoginGateway\022\017\n\007acco"
    "unt\030\001 \002(\t\0222\n\010usertype\030\002 \002(\0162 .HelloKitty"
    "MsgData.UserPlateType\022/\n\tphoneType\030\003 \002(\016"
    "2\034.HelloKittyMsgData.PhoneType\022\021\n\tphoneU"
    "uid\030\004 \002(\t\"\037\n\013AckGameTime\022\020\n\010gameTime\030\001 \002"
    "(\004\"\327\006\n\014UserBaseInfo\022\016\n\006charId\030\001 \002(\004\022\014\n\004n"
    "ame\030\002 \002(\t\022\'\n\003sex\030\003 \002(\0162\032.HelloKittyMsgDa"
    "ta.SexType\022\r\n\005level\030\004 \002(\r\022\013\n\003exp\030\005 \002(\004\022\014"
    "\n\004gold\030\006 \002(\004\022\013\n\003gem\030\007 \002(\004\022\021\n\tworkernum\030\010"
    " \002(\r\022\021\n\tfriendval\030\t \002(\r\022\020\n\010happyval\030\n \002("
    "\r\022\017\n\007randtoy\030\013 \002(\r\022\030\n\020itemwarehousecap\030\014"
    " \002(\r\022\020\n\010sweetval\030\r \002(\r\022\020\n\010carnival\030\016 \002(\r"
    "\022+\n\005dress\030\017 \002(\0132\034.HelloKittyMsgData.Dres"
    "sData\022/\n\tbuildinfo\030\020 \003(\0132\034.HelloKittyMsg"
    "Data.BuildBase\0223\n\013kittygarden\030\021 \002(\0132\036.He"
    "lloKittyMsgData.KittyGarden\0220\n\007produce\030\022"
    " \003(\0132\037.HelloKittyMsgData.BuildProduce\0229\n"
    "\013produceitem\030\023 \003(\0132$.HelloKittyMsgData.S"
    "toreFunctionCell\0221\n\nbufferinfo\030\024 \003(\0132\035.H"
    "elloKittyMsgData.BufferInfo\022/\n\007usecard\030\025"
    " \003(\0132\036.HelloKittyMsgData.UseCardInfo\0223\n\014"
    "externbuffer\030\026 \003(\0132\035.HelloKittyMsgData.B"
    "ufferData\022/\n\007rubbish\030\027 \003(\0132\036.HelloKittyM"
    "sgData.RubbishData\0220\n\teventinit\030\030 \002(\0132\035."
    "HelloKittyMsgData.Evententer\0221\n\nbursteve"
    "nt\030\031 \003(\0132\035.HelloKittyMsgData.BurstEvent\022"
    "\023\n\010familyid\030\032 \001(\004:\0010\"Q\n\013AckUserInfo\022\017\n\007h"
    "asUser\030\001 \002(\010\0221\n\010userBase\030\002 \002(\0132\037.HelloKi"
    "ttyMsgData.UserBaseInfo\"V\n\rReqCreateRole"
    "\022\014\n\004name\030\001 \002(\t\022\'\n\003sex\030\002 \002(\0162\032.HelloKitty"
    "MsgData.SexType\022\016\n\006heroId\030\003 \002(\r\"L\n\030ReqOp"
    "ReceiveWorldChatCmd\0220\n\tswitchFlg\030\001 \002(\0162\035"
    ".HelloKittyMsgData.SwitchType\"D\n\017AckNoti"
    "ceClient\0221\n\nnoticeType\030\001 \002(\0162\035.HelloKitt"
    "yMsgData.NoticeType\"E\n\020AckFlushUserInfo\022"
    "1\n\010userBase\030\001 \002(\0132\037.HelloKittyMsgData.Us"
    "erBaseInfo\"\013\n\tReqLogout*$\n\tPhoneType\022\013\n\007"
    "Android\020\000\022\n\n\006Iphone\020\001*\037\n\007NetType\022\010\n\004Tele"
    "\020\000\022\n\n\006NetCom\020\001*=\n\rUserPlateType\022\013\n\007Tence"
    "nt\020\000\022\t\n\005Baidu\020\001\022\t\n\005Qihoo\020\002\022\t\n\005Other\020\003*\300\001"
    "\n\017LoginFailReason\022\016\n\nAccountOdd\020\000\022\020\n\014Ver"
    "sionError\020\001\022\016\n\nNormalMain\020\002\022\022\n\016GatewayNo"
    "tOpen\020\003\022\014\n\010UserFull\020\004\022\021\n\rSendZoneError\020\005"
    "\022\013\n\007TimeOut\020\006\022\r\n\tUuidError\020\007\022\016\n\nNameIlle"
    "ga\020\010\022\r\n\tNameAgain\020\t\022\013\n\007NotRole\020\n*$\n\014Logi"
    "nRetType\022\n\n\006Normal\020\000\022\010\n\004Kick\020\001*\037\n\007SexTyp"
    "e\022\010\n\004Male\020\000\022\n\n\006Female\020\001*!\n\nSwitchType\022\010\n"
    "\004Open\020\000\022\t\n\005Close\020\001*!\n\nNoticeType\022\023\n\017Noti"
    "ce_Kick_Out\020\000", 2613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.proto", &protobuf_RegisterTypes);
  ReqVersion::default_instance_ = new ReqVersion();
  AckVersion::default_instance_ = new AckVersion();
  ReqLogin::default_instance_ = new ReqLogin();
  AckLoginFailReturn::default_instance_ = new AckLoginFailReturn();
  AckLoginSuccessReturn::default_instance_ = new AckLoginSuccessReturn();
  ReqLoginGateway::default_instance_ = new ReqLoginGateway();
  AckGameTime::default_instance_ = new AckGameTime();
  UserBaseInfo::default_instance_ = new UserBaseInfo();
  AckUserInfo::default_instance_ = new AckUserInfo();
  ReqCreateRole::default_instance_ = new ReqCreateRole();
  ReqOpReceiveWorldChatCmd::default_instance_ = new ReqOpReceiveWorldChatCmd();
  AckNoticeClient::default_instance_ = new AckNoticeClient();
  AckFlushUserInfo::default_instance_ = new AckFlushUserInfo();
  ReqLogout::default_instance_ = new ReqLogout();
  ReqVersion::default_instance_->InitAsDefaultInstance();
  AckVersion::default_instance_->InitAsDefaultInstance();
  ReqLogin::default_instance_->InitAsDefaultInstance();
  AckLoginFailReturn::default_instance_->InitAsDefaultInstance();
  AckLoginSuccessReturn::default_instance_->InitAsDefaultInstance();
  ReqLoginGateway::default_instance_->InitAsDefaultInstance();
  AckGameTime::default_instance_->InitAsDefaultInstance();
  UserBaseInfo::default_instance_->InitAsDefaultInstance();
  AckUserInfo::default_instance_->InitAsDefaultInstance();
  ReqCreateRole::default_instance_->InitAsDefaultInstance();
  ReqOpReceiveWorldChatCmd::default_instance_->InitAsDefaultInstance();
  AckNoticeClient::default_instance_->InitAsDefaultInstance();
  AckFlushUserInfo::default_instance_->InitAsDefaultInstance();
  ReqLogout::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2eproto {
  StaticDescriptorInitializer_login_2eproto() {
    protobuf_AddDesc_login_2eproto();
  }
} static_descriptor_initializer_login_2eproto_;
const ::google::protobuf::EnumDescriptor* PhoneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneType_descriptor_;
}
bool PhoneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetType_descriptor_;
}
bool NetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserPlateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPlateType_descriptor_;
}
bool UserPlateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginFailReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginFailReason_descriptor_;
}
bool LoginFailReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginRetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRetType_descriptor_;
}
bool LoginRetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SexType_descriptor_;
}
bool SexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SwitchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchType_descriptor_;
}
bool SwitchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NoticeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeType_descriptor_;
}
bool NoticeType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ReqVersion::kClientVersionFieldNumber;
#endif  // !_MSC_VER

ReqVersion::ReqVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqVersion::InitAsDefaultInstance() {
}

ReqVersion::ReqVersion(const ReqVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqVersion::SharedCtor() {
  _cached_size_ = 0;
  clientversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqVersion::~ReqVersion() {
  SharedDtor();
}

void ReqVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqVersion_descriptor_;
}

const ReqVersion& ReqVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ReqVersion* ReqVersion::default_instance_ = NULL;

ReqVersion* ReqVersion::New() const {
  return new ReqVersion;
}

void ReqVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientversion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientVersion = 1;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientVersion = 1;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientVersion = 1;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqVersion::MergeFrom(const ReqVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqVersion::CopyFrom(const ReqVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqVersion::Swap(ReqVersion* other) {
  if (other != this) {
    std::swap(clientversion_, other->clientversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqVersion_descriptor_;
  metadata.reflection = ReqVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckVersion::kVersionFieldNumber;
#endif  // !_MSC_VER

AckVersion::AckVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckVersion::InitAsDefaultInstance() {
}

AckVersion::AckVersion(const AckVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckVersion::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckVersion::~AckVersion() {
  SharedDtor();
}

void AckVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckVersion_descriptor_;
}

const AckVersion& AckVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

AckVersion* AckVersion::default_instance_ = NULL;

AckVersion* AckVersion::New() const {
  return new AckVersion;
}

void AckVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckVersion::MergeFrom(const AckVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckVersion::CopyFrom(const AckVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckVersion::Swap(AckVersion* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckVersion_descriptor_;
  metadata.reflection = AckVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLogin::kPhoneTypeFieldNumber;
const int ReqLogin::kPhoneUuidFieldNumber;
const int ReqLogin::kGameZoneFieldNumber;
const int ReqLogin::kAccountFieldNumber;
const int ReqLogin::kNetTypeFieldNumber;
const int ReqLogin::kUsertypeFieldNumber;
#endif  // !_MSC_VER

ReqLogin::ReqLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogin::InitAsDefaultInstance() {
}

ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogin::SharedCtor() {
  _cached_size_ = 0;
  phonetype_ = 0;
  phoneuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamezone_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nettype_ = 0;
  usertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogin::~ReqLogin() {
  SharedDtor();
}

void ReqLogin::SharedDtor() {
  if (phoneuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete phoneuuid_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_descriptor_;
}

const ReqLogin& ReqLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ReqLogin* ReqLogin::default_instance_ = NULL;

ReqLogin* ReqLogin::New() const {
  return new ReqLogin;
}

void ReqLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonetype_ = 0;
    if (has_phoneuuid()) {
      if (phoneuuid_ != &::google::protobuf::internal::kEmptyString) {
        phoneuuid_->clear();
      }
    }
    gamezone_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    nettype_ = 0;
    usertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.PhoneType phoneType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::PhoneType_IsValid(value)) {
            set_phonetype(static_cast< ::HelloKittyMsgData::PhoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phoneUuid;
        break;
      }

      // required string phoneUuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneUuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phoneuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phoneuuid().data(), this->phoneuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameZone;
        break;
      }

      // required uint32 gameZone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamezone_)));
          set_has_gamezone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // required string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_netType;
        break;
      }

      // required .HelloKittyMsgData.NetType netType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::NetType_IsValid(value)) {
            set_nettype(static_cast< ::HelloKittyMsgData::NetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usertype;
        break;
      }

      // required .HelloKittyMsgData.UserPlateType usertype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usertype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::UserPlateType_IsValid(value)) {
            set_usertype(static_cast< ::HelloKittyMsgData::UserPlateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.PhoneType phoneType = 1;
  if (has_phonetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phonetype(), output);
  }

  // required string phoneUuid = 2;
  if (has_phoneuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phoneuuid().data(), this->phoneuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phoneuuid(), output);
  }

  // required uint32 gameZone = 3;
  if (has_gamezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gamezone(), output);
  }

  // required string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  // required .HelloKittyMsgData.NetType netType = 5;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->nettype(), output);
  }

  // required .HelloKittyMsgData.UserPlateType usertype = 6;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->usertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.PhoneType phoneType = 1;
  if (has_phonetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phonetype(), target);
  }

  // required string phoneUuid = 2;
  if (has_phoneuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phoneuuid().data(), this->phoneuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phoneuuid(), target);
  }

  // required uint32 gameZone = 3;
  if (has_gamezone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gamezone(), target);
  }

  // required string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // required .HelloKittyMsgData.NetType netType = 5;
  if (has_nettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->nettype(), target);
  }

  // required .HelloKittyMsgData.UserPlateType usertype = 6;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->usertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.PhoneType phoneType = 1;
    if (has_phonetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phonetype());
    }

    // required string phoneUuid = 2;
    if (has_phoneuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phoneuuid());
    }

    // required uint32 gameZone = 3;
    if (has_gamezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamezone());
    }

    // required string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required .HelloKittyMsgData.NetType netType = 5;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nettype());
    }

    // required .HelloKittyMsgData.UserPlateType usertype = 6;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonetype()) {
      set_phonetype(from.phonetype());
    }
    if (from.has_phoneuuid()) {
      set_phoneuuid(from.phoneuuid());
    }
    if (from.has_gamezone()) {
      set_gamezone(from.gamezone());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_nettype()) {
      set_nettype(from.nettype());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other != this) {
    std::swap(phonetype_, other->phonetype_);
    std::swap(phoneuuid_, other->phoneuuid_);
    std::swap(gamezone_, other->gamezone_);
    std::swap(account_, other->account_);
    std::swap(nettype_, other->nettype_);
    std::swap(usertype_, other->usertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogin_descriptor_;
  metadata.reflection = ReqLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLoginFailReturn::kFailReasonFieldNumber;
#endif  // !_MSC_VER

AckLoginFailReturn::AckLoginFailReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLoginFailReturn::InitAsDefaultInstance() {
}

AckLoginFailReturn::AckLoginFailReturn(const AckLoginFailReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLoginFailReturn::SharedCtor() {
  _cached_size_ = 0;
  failreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLoginFailReturn::~AckLoginFailReturn() {
  SharedDtor();
}

void AckLoginFailReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLoginFailReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLoginFailReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLoginFailReturn_descriptor_;
}

const AckLoginFailReturn& AckLoginFailReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

AckLoginFailReturn* AckLoginFailReturn::default_instance_ = NULL;

AckLoginFailReturn* AckLoginFailReturn::New() const {
  return new AckLoginFailReturn;
}

void AckLoginFailReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    failreason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLoginFailReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.LoginFailReason failReason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::LoginFailReason_IsValid(value)) {
            set_failreason(static_cast< ::HelloKittyMsgData::LoginFailReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLoginFailReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.LoginFailReason failReason = 1;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->failreason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLoginFailReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.LoginFailReason failReason = 1;
  if (has_failreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->failreason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLoginFailReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.LoginFailReason failReason = 1;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->failreason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLoginFailReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLoginFailReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLoginFailReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLoginFailReturn::MergeFrom(const AckLoginFailReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLoginFailReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLoginFailReturn::CopyFrom(const AckLoginFailReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLoginFailReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckLoginFailReturn::Swap(AckLoginFailReturn* other) {
  if (other != this) {
    std::swap(failreason_, other->failreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLoginFailReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLoginFailReturn_descriptor_;
  metadata.reflection = AckLoginFailReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLoginSuccessReturn::kLoginTempIDFieldNumber;
const int AckLoginSuccessReturn::kGatewayIPFieldNumber;
const int AckLoginSuccessReturn::kGatewayPortFieldNumber;
const int AckLoginSuccessReturn::kKeyArrFieldNumber;
const int AckLoginSuccessReturn::kLoginRetFieldNumber;
#endif  // !_MSC_VER

AckLoginSuccessReturn::AckLoginSuccessReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLoginSuccessReturn::InitAsDefaultInstance() {
}

AckLoginSuccessReturn::AckLoginSuccessReturn(const AckLoginSuccessReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLoginSuccessReturn::SharedCtor() {
  _cached_size_ = 0;
  logintempid_ = 0u;
  gatewayip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gatewayport_ = 0u;
  loginret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLoginSuccessReturn::~AckLoginSuccessReturn() {
  SharedDtor();
}

void AckLoginSuccessReturn::SharedDtor() {
  if (gatewayip_ != &::google::protobuf::internal::kEmptyString) {
    delete gatewayip_;
  }
  if (this != default_instance_) {
  }
}

void AckLoginSuccessReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLoginSuccessReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLoginSuccessReturn_descriptor_;
}

const AckLoginSuccessReturn& AckLoginSuccessReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

AckLoginSuccessReturn* AckLoginSuccessReturn::default_instance_ = NULL;

AckLoginSuccessReturn* AckLoginSuccessReturn::New() const {
  return new AckLoginSuccessReturn;
}

void AckLoginSuccessReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logintempid_ = 0u;
    if (has_gatewayip()) {
      if (gatewayip_ != &::google::protobuf::internal::kEmptyString) {
        gatewayip_->clear();
      }
    }
    gatewayport_ = 0u;
    loginret_ = 0;
  }
  keyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLoginSuccessReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 loginTempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintempid_)));
          set_has_logintempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gatewayIP;
        break;
      }

      // required string gatewayIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gatewayIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gatewayip().data(), this->gatewayip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gatewayPort;
        break;
      }

      // required uint32 gatewayPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatewayPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gatewayport_)));
          set_has_gatewayport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_keyArr;
        break;
      }

      // repeated uint32 keyArr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_keyarr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keyarr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_keyArr;
        if (input->ExpectTag(40)) goto parse_loginRet;
        break;
      }

      // required .HelloKittyMsgData.LoginRetType loginRet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginRet:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::LoginRetType_IsValid(value)) {
            set_loginret(static_cast< ::HelloKittyMsgData::LoginRetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLoginSuccessReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 loginTempID = 1;
  if (has_logintempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logintempid(), output);
  }

  // required string gatewayIP = 2;
  if (has_gatewayip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gatewayip().data(), this->gatewayip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gatewayip(), output);
  }

  // required uint32 gatewayPort = 3;
  if (has_gatewayport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gatewayport(), output);
  }

  // repeated uint32 keyArr = 4;
  for (int i = 0; i < this->keyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->keyarr(i), output);
  }

  // required .HelloKittyMsgData.LoginRetType loginRet = 5;
  if (has_loginret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->loginret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLoginSuccessReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 loginTempID = 1;
  if (has_logintempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logintempid(), target);
  }

  // required string gatewayIP = 2;
  if (has_gatewayip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gatewayip().data(), this->gatewayip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gatewayip(), target);
  }

  // required uint32 gatewayPort = 3;
  if (has_gatewayport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gatewayport(), target);
  }

  // repeated uint32 keyArr = 4;
  for (int i = 0; i < this->keyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->keyarr(i), target);
  }

  // required .HelloKittyMsgData.LoginRetType loginRet = 5;
  if (has_loginret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->loginret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLoginSuccessReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 loginTempID = 1;
    if (has_logintempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintempid());
    }

    // required string gatewayIP = 2;
    if (has_gatewayip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gatewayip());
    }

    // required uint32 gatewayPort = 3;
    if (has_gatewayport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gatewayport());
    }

    // required .HelloKittyMsgData.LoginRetType loginRet = 5;
    if (has_loginret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loginret());
    }

  }
  // repeated uint32 keyArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->keyarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keyarr(i));
    }
    total_size += 1 * this->keyarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLoginSuccessReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLoginSuccessReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLoginSuccessReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLoginSuccessReturn::MergeFrom(const AckLoginSuccessReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyarr_.MergeFrom(from.keyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logintempid()) {
      set_logintempid(from.logintempid());
    }
    if (from.has_gatewayip()) {
      set_gatewayip(from.gatewayip());
    }
    if (from.has_gatewayport()) {
      set_gatewayport(from.gatewayport());
    }
    if (from.has_loginret()) {
      set_loginret(from.loginret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLoginSuccessReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLoginSuccessReturn::CopyFrom(const AckLoginSuccessReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLoginSuccessReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void AckLoginSuccessReturn::Swap(AckLoginSuccessReturn* other) {
  if (other != this) {
    std::swap(logintempid_, other->logintempid_);
    std::swap(gatewayip_, other->gatewayip_);
    std::swap(gatewayport_, other->gatewayport_);
    keyarr_.Swap(&other->keyarr_);
    std::swap(loginret_, other->loginret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLoginSuccessReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLoginSuccessReturn_descriptor_;
  metadata.reflection = AckLoginSuccessReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLoginGateway::kAccountFieldNumber;
const int ReqLoginGateway::kUsertypeFieldNumber;
const int ReqLoginGateway::kPhoneTypeFieldNumber;
const int ReqLoginGateway::kPhoneUuidFieldNumber;
#endif  // !_MSC_VER

ReqLoginGateway::ReqLoginGateway()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLoginGateway::InitAsDefaultInstance() {
}

ReqLoginGateway::ReqLoginGateway(const ReqLoginGateway& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLoginGateway::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usertype_ = 0;
  phonetype_ = 0;
  phoneuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLoginGateway::~ReqLoginGateway() {
  SharedDtor();
}

void ReqLoginGateway::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (phoneuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete phoneuuid_;
  }
  if (this != default_instance_) {
  }
}

void ReqLoginGateway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLoginGateway::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLoginGateway_descriptor_;
}

const ReqLoginGateway& ReqLoginGateway::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ReqLoginGateway* ReqLoginGateway::default_instance_ = NULL;

ReqLoginGateway* ReqLoginGateway::New() const {
  return new ReqLoginGateway;
}

void ReqLoginGateway::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    usertype_ = 0;
    phonetype_ = 0;
    if (has_phoneuuid()) {
      if (phoneuuid_ != &::google::protobuf::internal::kEmptyString) {
        phoneuuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLoginGateway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usertype;
        break;
      }

      // required .HelloKittyMsgData.UserPlateType usertype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usertype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::UserPlateType_IsValid(value)) {
            set_usertype(static_cast< ::HelloKittyMsgData::UserPlateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_phoneType;
        break;
      }

      // required .HelloKittyMsgData.PhoneType phoneType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phoneType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::PhoneType_IsValid(value)) {
            set_phonetype(static_cast< ::HelloKittyMsgData::PhoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_phoneUuid;
        break;
      }

      // required string phoneUuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneUuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phoneuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phoneuuid().data(), this->phoneuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLoginGateway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // required .HelloKittyMsgData.UserPlateType usertype = 2;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->usertype(), output);
  }

  // required .HelloKittyMsgData.PhoneType phoneType = 3;
  if (has_phonetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->phonetype(), output);
  }

  // required string phoneUuid = 4;
  if (has_phoneuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phoneuuid().data(), this->phoneuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->phoneuuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLoginGateway::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required .HelloKittyMsgData.UserPlateType usertype = 2;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->usertype(), target);
  }

  // required .HelloKittyMsgData.PhoneType phoneType = 3;
  if (has_phonetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->phonetype(), target);
  }

  // required string phoneUuid = 4;
  if (has_phoneuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phoneuuid().data(), this->phoneuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phoneuuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLoginGateway::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required .HelloKittyMsgData.UserPlateType usertype = 2;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usertype());
    }

    // required .HelloKittyMsgData.PhoneType phoneType = 3;
    if (has_phonetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phonetype());
    }

    // required string phoneUuid = 4;
    if (has_phoneuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phoneuuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLoginGateway::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLoginGateway* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLoginGateway*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLoginGateway::MergeFrom(const ReqLoginGateway& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_phonetype()) {
      set_phonetype(from.phonetype());
    }
    if (from.has_phoneuuid()) {
      set_phoneuuid(from.phoneuuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLoginGateway::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLoginGateway::CopyFrom(const ReqLoginGateway& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLoginGateway::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ReqLoginGateway::Swap(ReqLoginGateway* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(usertype_, other->usertype_);
    std::swap(phonetype_, other->phonetype_);
    std::swap(phoneuuid_, other->phoneuuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLoginGateway::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLoginGateway_descriptor_;
  metadata.reflection = ReqLoginGateway_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameTime::kGameTimeFieldNumber;
#endif  // !_MSC_VER

AckGameTime::AckGameTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameTime::InitAsDefaultInstance() {
}

AckGameTime::AckGameTime(const AckGameTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameTime::SharedCtor() {
  _cached_size_ = 0;
  gametime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameTime::~AckGameTime() {
  SharedDtor();
}

void AckGameTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGameTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameTime_descriptor_;
}

const AckGameTime& AckGameTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

AckGameTime* AckGameTime::default_instance_ = NULL;

AckGameTime* AckGameTime::New() const {
  return new AckGameTime;
}

void AckGameTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gameTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gameTime = 1;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gametime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gameTime = 1;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gametime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gameTime = 1;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gametime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameTime::MergeFrom(const AckGameTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameTime::CopyFrom(const AckGameTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGameTime::Swap(AckGameTime* other) {
  if (other != this) {
    std::swap(gametime_, other->gametime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameTime_descriptor_;
  metadata.reflection = AckGameTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBaseInfo::kCharIdFieldNumber;
const int UserBaseInfo::kNameFieldNumber;
const int UserBaseInfo::kSexFieldNumber;
const int UserBaseInfo::kLevelFieldNumber;
const int UserBaseInfo::kExpFieldNumber;
const int UserBaseInfo::kGoldFieldNumber;
const int UserBaseInfo::kGemFieldNumber;
const int UserBaseInfo::kWorkernumFieldNumber;
const int UserBaseInfo::kFriendvalFieldNumber;
const int UserBaseInfo::kHappyvalFieldNumber;
const int UserBaseInfo::kRandtoyFieldNumber;
const int UserBaseInfo::kItemwarehousecapFieldNumber;
const int UserBaseInfo::kSweetvalFieldNumber;
const int UserBaseInfo::kCarnivalFieldNumber;
const int UserBaseInfo::kDressFieldNumber;
const int UserBaseInfo::kBuildinfoFieldNumber;
const int UserBaseInfo::kKittygardenFieldNumber;
const int UserBaseInfo::kProduceFieldNumber;
const int UserBaseInfo::kProduceitemFieldNumber;
const int UserBaseInfo::kBufferinfoFieldNumber;
const int UserBaseInfo::kUsecardFieldNumber;
const int UserBaseInfo::kExternbufferFieldNumber;
const int UserBaseInfo::kRubbishFieldNumber;
const int UserBaseInfo::kEventinitFieldNumber;
const int UserBaseInfo::kBursteventFieldNumber;
const int UserBaseInfo::kFamilyidFieldNumber;
#endif  // !_MSC_VER

UserBaseInfo::UserBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserBaseInfo::InitAsDefaultInstance() {
  dress_ = const_cast< ::HelloKittyMsgData::DressData*>(&::HelloKittyMsgData::DressData::default_instance());
  kittygarden_ = const_cast< ::HelloKittyMsgData::KittyGarden*>(&::HelloKittyMsgData::KittyGarden::default_instance());
  eventinit_ = const_cast< ::HelloKittyMsgData::Evententer*>(&::HelloKittyMsgData::Evententer::default_instance());
}

UserBaseInfo::UserBaseInfo(const UserBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  gold_ = GOOGLE_ULONGLONG(0);
  gem_ = GOOGLE_ULONGLONG(0);
  workernum_ = 0u;
  friendval_ = 0u;
  happyval_ = 0u;
  randtoy_ = 0u;
  itemwarehousecap_ = 0u;
  sweetval_ = 0u;
  carnival_ = 0u;
  dress_ = NULL;
  kittygarden_ = NULL;
  eventinit_ = NULL;
  familyid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBaseInfo::~UserBaseInfo() {
  SharedDtor();
}

void UserBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete dress_;
    delete kittygarden_;
    delete eventinit_;
  }
}

void UserBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBaseInfo_descriptor_;
}

const UserBaseInfo& UserBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

UserBaseInfo* UserBaseInfo::default_instance_ = NULL;

UserBaseInfo* UserBaseInfo::New() const {
  return new UserBaseInfo;
}

void UserBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    gold_ = GOOGLE_ULONGLONG(0);
    gem_ = GOOGLE_ULONGLONG(0);
    workernum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    friendval_ = 0u;
    happyval_ = 0u;
    randtoy_ = 0u;
    itemwarehousecap_ = 0u;
    sweetval_ = 0u;
    carnival_ = 0u;
    if (has_dress()) {
      if (dress_ != NULL) dress_->::HelloKittyMsgData::DressData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_kittygarden()) {
      if (kittygarden_ != NULL) kittygarden_->::HelloKittyMsgData::KittyGarden::Clear();
    }
    if (has_eventinit()) {
      if (eventinit_ != NULL) eventinit_->::HelloKittyMsgData::Evententer::Clear();
    }
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    familyid_ = GOOGLE_ULONGLONG(0);
  }
  buildinfo_.Clear();
  produce_.Clear();
  produceitem_.Clear();
  bufferinfo_.Clear();
  usecard_.Clear();
  externbuffer_.Clear();
  rubbish_.Clear();
  burstevent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // required .HelloKittyMsgData.SexType sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::SexType_IsValid(value)) {
            set_sex(static_cast< ::HelloKittyMsgData::SexType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // required uint64 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // required uint64 gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gem;
        break;
      }

      // required uint64 gem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_workernum;
        break;
      }

      // required uint32 workernum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_workernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workernum_)));
          set_has_workernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_friendval;
        break;
      }

      // required uint32 friendval = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendval_)));
          set_has_friendval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_happyval;
        break;
      }

      // required uint32 happyval = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_happyval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &happyval_)));
          set_has_happyval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_randtoy;
        break;
      }

      // required uint32 randtoy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randtoy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randtoy_)));
          set_has_randtoy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_itemwarehousecap;
        break;
      }

      // required uint32 itemwarehousecap = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemwarehousecap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemwarehousecap_)));
          set_has_itemwarehousecap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sweetval;
        break;
      }

      // required uint32 sweetval = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweetval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sweetval_)));
          set_has_sweetval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_carnival;
        break;
      }

      // required uint32 carnival = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carnival:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carnival_)));
          set_has_carnival();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_dress;
        break;
      }

      // required .HelloKittyMsgData.DressData dress = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_buildinfo;
        break;
      }

      // repeated .HelloKittyMsgData.BuildBase buildinfo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_buildinfo;
        if (input->ExpectTag(138)) goto parse_kittygarden;
        break;
      }

      // required .HelloKittyMsgData.KittyGarden kittygarden = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kittygarden:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kittygarden()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_produce;
        break;
      }

      // repeated .HelloKittyMsgData.BuildProduce produce = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_produce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_produce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_produce;
        if (input->ExpectTag(154)) goto parse_produceitem;
        break;
      }

      // repeated .HelloKittyMsgData.StoreFunctionCell produceitem = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_produceitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_produceitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_produceitem;
        if (input->ExpectTag(162)) goto parse_bufferinfo;
        break;
      }

      // repeated .HelloKittyMsgData.BufferInfo bufferinfo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bufferinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bufferinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bufferinfo;
        if (input->ExpectTag(170)) goto parse_usecard;
        break;
      }

      // repeated .HelloKittyMsgData.UseCardInfo usecard = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usecard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_usecard;
        if (input->ExpectTag(178)) goto parse_externbuffer;
        break;
      }

      // repeated .HelloKittyMsgData.BufferData externbuffer = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_externbuffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_externbuffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_externbuffer;
        if (input->ExpectTag(186)) goto parse_rubbish;
        break;
      }

      // repeated .HelloKittyMsgData.RubbishData rubbish = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rubbish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rubbish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_rubbish;
        if (input->ExpectTag(194)) goto parse_eventinit;
        break;
      }

      // required .HelloKittyMsgData.Evententer eventinit = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventinit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventinit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_burstevent;
        break;
      }

      // repeated .HelloKittyMsgData.BurstEvent burstevent = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_burstevent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_burstevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_burstevent;
        if (input->ExpectTag(208)) goto parse_familyid;
        break;
      }

      // optional uint64 familyid = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_familyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &familyid_)));
          set_has_familyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required .HelloKittyMsgData.SexType sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sex(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint64 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->exp(), output);
  }

  // required uint64 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gold(), output);
  }

  // required uint64 gem = 7;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->gem(), output);
  }

  // required uint32 workernum = 8;
  if (has_workernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->workernum(), output);
  }

  // required uint32 friendval = 9;
  if (has_friendval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->friendval(), output);
  }

  // required uint32 happyval = 10;
  if (has_happyval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->happyval(), output);
  }

  // required uint32 randtoy = 11;
  if (has_randtoy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->randtoy(), output);
  }

  // required uint32 itemwarehousecap = 12;
  if (has_itemwarehousecap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->itemwarehousecap(), output);
  }

  // required uint32 sweetval = 13;
  if (has_sweetval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->sweetval(), output);
  }

  // required uint32 carnival = 14;
  if (has_carnival()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->carnival(), output);
  }

  // required .HelloKittyMsgData.DressData dress = 15;
  if (has_dress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->dress(), output);
  }

  // repeated .HelloKittyMsgData.BuildBase buildinfo = 16;
  for (int i = 0; i < this->buildinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->buildinfo(i), output);
  }

  // required .HelloKittyMsgData.KittyGarden kittygarden = 17;
  if (has_kittygarden()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->kittygarden(), output);
  }

  // repeated .HelloKittyMsgData.BuildProduce produce = 18;
  for (int i = 0; i < this->produce_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->produce(i), output);
  }

  // repeated .HelloKittyMsgData.StoreFunctionCell produceitem = 19;
  for (int i = 0; i < this->produceitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->produceitem(i), output);
  }

  // repeated .HelloKittyMsgData.BufferInfo bufferinfo = 20;
  for (int i = 0; i < this->bufferinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->bufferinfo(i), output);
  }

  // repeated .HelloKittyMsgData.UseCardInfo usecard = 21;
  for (int i = 0; i < this->usecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->usecard(i), output);
  }

  // repeated .HelloKittyMsgData.BufferData externbuffer = 22;
  for (int i = 0; i < this->externbuffer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->externbuffer(i), output);
  }

  // repeated .HelloKittyMsgData.RubbishData rubbish = 23;
  for (int i = 0; i < this->rubbish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->rubbish(i), output);
  }

  // required .HelloKittyMsgData.Evententer eventinit = 24;
  if (has_eventinit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->eventinit(), output);
  }

  // repeated .HelloKittyMsgData.BurstEvent burstevent = 25;
  for (int i = 0; i < this->burstevent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->burstevent(i), output);
  }

  // optional uint64 familyid = 26 [default = 0];
  if (has_familyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->familyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .HelloKittyMsgData.SexType sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sex(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint64 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->exp(), target);
  }

  // required uint64 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gold(), target);
  }

  // required uint64 gem = 7;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->gem(), target);
  }

  // required uint32 workernum = 8;
  if (has_workernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->workernum(), target);
  }

  // required uint32 friendval = 9;
  if (has_friendval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->friendval(), target);
  }

  // required uint32 happyval = 10;
  if (has_happyval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->happyval(), target);
  }

  // required uint32 randtoy = 11;
  if (has_randtoy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->randtoy(), target);
  }

  // required uint32 itemwarehousecap = 12;
  if (has_itemwarehousecap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->itemwarehousecap(), target);
  }

  // required uint32 sweetval = 13;
  if (has_sweetval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->sweetval(), target);
  }

  // required uint32 carnival = 14;
  if (has_carnival()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->carnival(), target);
  }

  // required .HelloKittyMsgData.DressData dress = 15;
  if (has_dress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->dress(), target);
  }

  // repeated .HelloKittyMsgData.BuildBase buildinfo = 16;
  for (int i = 0; i < this->buildinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->buildinfo(i), target);
  }

  // required .HelloKittyMsgData.KittyGarden kittygarden = 17;
  if (has_kittygarden()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->kittygarden(), target);
  }

  // repeated .HelloKittyMsgData.BuildProduce produce = 18;
  for (int i = 0; i < this->produce_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->produce(i), target);
  }

  // repeated .HelloKittyMsgData.StoreFunctionCell produceitem = 19;
  for (int i = 0; i < this->produceitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->produceitem(i), target);
  }

  // repeated .HelloKittyMsgData.BufferInfo bufferinfo = 20;
  for (int i = 0; i < this->bufferinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->bufferinfo(i), target);
  }

  // repeated .HelloKittyMsgData.UseCardInfo usecard = 21;
  for (int i = 0; i < this->usecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->usecard(i), target);
  }

  // repeated .HelloKittyMsgData.BufferData externbuffer = 22;
  for (int i = 0; i < this->externbuffer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->externbuffer(i), target);
  }

  // repeated .HelloKittyMsgData.RubbishData rubbish = 23;
  for (int i = 0; i < this->rubbish_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->rubbish(i), target);
  }

  // required .HelloKittyMsgData.Evententer eventinit = 24;
  if (has_eventinit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->eventinit(), target);
  }

  // repeated .HelloKittyMsgData.BurstEvent burstevent = 25;
  for (int i = 0; i < this->burstevent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->burstevent(i), target);
  }

  // optional uint64 familyid = 26 [default = 0];
  if (has_familyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->familyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .HelloKittyMsgData.SexType sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint64 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // required uint64 gem = 7;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gem());
    }

    // required uint32 workernum = 8;
    if (has_workernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workernum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 friendval = 9;
    if (has_friendval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendval());
    }

    // required uint32 happyval = 10;
    if (has_happyval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->happyval());
    }

    // required uint32 randtoy = 11;
    if (has_randtoy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randtoy());
    }

    // required uint32 itemwarehousecap = 12;
    if (has_itemwarehousecap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemwarehousecap());
    }

    // required uint32 sweetval = 13;
    if (has_sweetval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sweetval());
    }

    // required uint32 carnival = 14;
    if (has_carnival()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carnival());
    }

    // required .HelloKittyMsgData.DressData dress = 15;
    if (has_dress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dress());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .HelloKittyMsgData.KittyGarden kittygarden = 17;
    if (has_kittygarden()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kittygarden());
    }

    // required .HelloKittyMsgData.Evententer eventinit = 24;
    if (has_eventinit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventinit());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional uint64 familyid = 26 [default = 0];
    if (has_familyid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->familyid());
    }

  }
  // repeated .HelloKittyMsgData.BuildBase buildinfo = 16;
  total_size += 2 * this->buildinfo_size();
  for (int i = 0; i < this->buildinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildinfo(i));
  }

  // repeated .HelloKittyMsgData.BuildProduce produce = 18;
  total_size += 2 * this->produce_size();
  for (int i = 0; i < this->produce_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->produce(i));
  }

  // repeated .HelloKittyMsgData.StoreFunctionCell produceitem = 19;
  total_size += 2 * this->produceitem_size();
  for (int i = 0; i < this->produceitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->produceitem(i));
  }

  // repeated .HelloKittyMsgData.BufferInfo bufferinfo = 20;
  total_size += 2 * this->bufferinfo_size();
  for (int i = 0; i < this->bufferinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bufferinfo(i));
  }

  // repeated .HelloKittyMsgData.UseCardInfo usecard = 21;
  total_size += 2 * this->usecard_size();
  for (int i = 0; i < this->usecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usecard(i));
  }

  // repeated .HelloKittyMsgData.BufferData externbuffer = 22;
  total_size += 2 * this->externbuffer_size();
  for (int i = 0; i < this->externbuffer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->externbuffer(i));
  }

  // repeated .HelloKittyMsgData.RubbishData rubbish = 23;
  total_size += 2 * this->rubbish_size();
  for (int i = 0; i < this->rubbish_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rubbish(i));
  }

  // repeated .HelloKittyMsgData.BurstEvent burstevent = 25;
  total_size += 2 * this->burstevent_size();
  for (int i = 0; i < this->burstevent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->burstevent(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBaseInfo::MergeFrom(const UserBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildinfo_.MergeFrom(from.buildinfo_);
  produce_.MergeFrom(from.produce_);
  produceitem_.MergeFrom(from.produceitem_);
  bufferinfo_.MergeFrom(from.bufferinfo_);
  usecard_.MergeFrom(from.usecard_);
  externbuffer_.MergeFrom(from.externbuffer_);
  rubbish_.MergeFrom(from.rubbish_);
  burstevent_.MergeFrom(from.burstevent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_gem()) {
      set_gem(from.gem());
    }
    if (from.has_workernum()) {
      set_workernum(from.workernum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_friendval()) {
      set_friendval(from.friendval());
    }
    if (from.has_happyval()) {
      set_happyval(from.happyval());
    }
    if (from.has_randtoy()) {
      set_randtoy(from.randtoy());
    }
    if (from.has_itemwarehousecap()) {
      set_itemwarehousecap(from.itemwarehousecap());
    }
    if (from.has_sweetval()) {
      set_sweetval(from.sweetval());
    }
    if (from.has_carnival()) {
      set_carnival(from.carnival());
    }
    if (from.has_dress()) {
      mutable_dress()->::HelloKittyMsgData::DressData::MergeFrom(from.dress());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_kittygarden()) {
      mutable_kittygarden()->::HelloKittyMsgData::KittyGarden::MergeFrom(from.kittygarden());
    }
    if (from.has_eventinit()) {
      mutable_eventinit()->::HelloKittyMsgData::Evententer::MergeFrom(from.eventinit());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_familyid()) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBaseInfo::CopyFrom(const UserBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00817fff) != 0x00817fff) return false;

  if (has_dress()) {
    if (!this->dress().IsInitialized()) return false;
  }
  for (int i = 0; i < buildinfo_size(); i++) {
    if (!this->buildinfo(i).IsInitialized()) return false;
  }
  if (has_kittygarden()) {
    if (!this->kittygarden().IsInitialized()) return false;
  }
  for (int i = 0; i < produce_size(); i++) {
    if (!this->produce(i).IsInitialized()) return false;
  }
  for (int i = 0; i < produceitem_size(); i++) {
    if (!this->produceitem(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bufferinfo_size(); i++) {
    if (!this->bufferinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < usecard_size(); i++) {
    if (!this->usecard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < externbuffer_size(); i++) {
    if (!this->externbuffer(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rubbish_size(); i++) {
    if (!this->rubbish(i).IsInitialized()) return false;
  }
  if (has_eventinit()) {
    if (!this->eventinit().IsInitialized()) return false;
  }
  for (int i = 0; i < burstevent_size(); i++) {
    if (!this->burstevent(i).IsInitialized()) return false;
  }
  return true;
}

void UserBaseInfo::Swap(UserBaseInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(gem_, other->gem_);
    std::swap(workernum_, other->workernum_);
    std::swap(friendval_, other->friendval_);
    std::swap(happyval_, other->happyval_);
    std::swap(randtoy_, other->randtoy_);
    std::swap(itemwarehousecap_, other->itemwarehousecap_);
    std::swap(sweetval_, other->sweetval_);
    std::swap(carnival_, other->carnival_);
    std::swap(dress_, other->dress_);
    buildinfo_.Swap(&other->buildinfo_);
    std::swap(kittygarden_, other->kittygarden_);
    produce_.Swap(&other->produce_);
    produceitem_.Swap(&other->produceitem_);
    bufferinfo_.Swap(&other->bufferinfo_);
    usecard_.Swap(&other->usecard_);
    externbuffer_.Swap(&other->externbuffer_);
    rubbish_.Swap(&other->rubbish_);
    std::swap(eventinit_, other->eventinit_);
    burstevent_.Swap(&other->burstevent_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBaseInfo_descriptor_;
  metadata.reflection = UserBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserInfo::kHasUserFieldNumber;
const int AckUserInfo::kUserBaseFieldNumber;
#endif  // !_MSC_VER

AckUserInfo::AckUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserInfo::InitAsDefaultInstance() {
  userbase_ = const_cast< ::HelloKittyMsgData::UserBaseInfo*>(&::HelloKittyMsgData::UserBaseInfo::default_instance());
}

AckUserInfo::AckUserInfo(const AckUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserInfo::SharedCtor() {
  _cached_size_ = 0;
  hasuser_ = false;
  userbase_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserInfo::~AckUserInfo() {
  SharedDtor();
}

void AckUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userbase_;
  }
}

void AckUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserInfo_descriptor_;
}

const AckUserInfo& AckUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

AckUserInfo* AckUserInfo::default_instance_ = NULL;

AckUserInfo* AckUserInfo::New() const {
  return new AckUserInfo;
}

void AckUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasuser_ = false;
    if (has_userbase()) {
      if (userbase_ != NULL) userbase_->::HelloKittyMsgData::UserBaseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool hasUser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasuser_)));
          set_has_hasuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userBase;
        break;
      }

      // required .HelloKittyMsgData.UserBaseInfo userBase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userBase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool hasUser = 1;
  if (has_hasuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasuser(), output);
  }

  // required .HelloKittyMsgData.UserBaseInfo userBase = 2;
  if (has_userbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userbase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool hasUser = 1;
  if (has_hasuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasuser(), target);
  }

  // required .HelloKittyMsgData.UserBaseInfo userBase = 2;
  if (has_userbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userbase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool hasUser = 1;
    if (has_hasuser()) {
      total_size += 1 + 1;
    }

    // required .HelloKittyMsgData.UserBaseInfo userBase = 2;
    if (has_userbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userbase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserInfo::MergeFrom(const AckUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasuser()) {
      set_hasuser(from.hasuser());
    }
    if (from.has_userbase()) {
      mutable_userbase()->::HelloKittyMsgData::UserBaseInfo::MergeFrom(from.userbase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserInfo::CopyFrom(const AckUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_userbase()) {
    if (!this->userbase().IsInitialized()) return false;
  }
  return true;
}

void AckUserInfo::Swap(AckUserInfo* other) {
  if (other != this) {
    std::swap(hasuser_, other->hasuser_);
    std::swap(userbase_, other->userbase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserInfo_descriptor_;
  metadata.reflection = AckUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCreateRole::kNameFieldNumber;
const int ReqCreateRole::kSexFieldNumber;
const int ReqCreateRole::kHeroIdFieldNumber;
#endif  // !_MSC_VER

ReqCreateRole::ReqCreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCreateRole::InitAsDefaultInstance() {
}

ReqCreateRole::ReqCreateRole(const ReqCreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCreateRole::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCreateRole::~ReqCreateRole() {
  SharedDtor();
}

void ReqCreateRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReqCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreateRole_descriptor_;
}

const ReqCreateRole& ReqCreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ReqCreateRole* ReqCreateRole::default_instance_ = NULL;

ReqCreateRole* ReqCreateRole::New() const {
  return new ReqCreateRole;
}

void ReqCreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // required .HelloKittyMsgData.SexType sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::SexType_IsValid(value)) {
            set_sex(static_cast< ::HelloKittyMsgData::SexType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroId;
        break;
      }

      // required uint32 heroId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .HelloKittyMsgData.SexType sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sex(), output);
  }

  // required uint32 heroId = 3;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .HelloKittyMsgData.SexType sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sex(), target);
  }

  // required uint32 heroId = 3;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCreateRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .HelloKittyMsgData.SexType sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // required uint32 heroId = 3;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCreateRole::MergeFrom(const ReqCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateRole::CopyFrom(const ReqCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqCreateRole::Swap(ReqCreateRole* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCreateRole_descriptor_;
  metadata.reflection = ReqCreateRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpReceiveWorldChatCmd::kSwitchFlgFieldNumber;
#endif  // !_MSC_VER

ReqOpReceiveWorldChatCmd::ReqOpReceiveWorldChatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpReceiveWorldChatCmd::InitAsDefaultInstance() {
}

ReqOpReceiveWorldChatCmd::ReqOpReceiveWorldChatCmd(const ReqOpReceiveWorldChatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpReceiveWorldChatCmd::SharedCtor() {
  _cached_size_ = 0;
  switchflg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpReceiveWorldChatCmd::~ReqOpReceiveWorldChatCmd() {
  SharedDtor();
}

void ReqOpReceiveWorldChatCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpReceiveWorldChatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpReceiveWorldChatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpReceiveWorldChatCmd_descriptor_;
}

const ReqOpReceiveWorldChatCmd& ReqOpReceiveWorldChatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ReqOpReceiveWorldChatCmd* ReqOpReceiveWorldChatCmd::default_instance_ = NULL;

ReqOpReceiveWorldChatCmd* ReqOpReceiveWorldChatCmd::New() const {
  return new ReqOpReceiveWorldChatCmd;
}

void ReqOpReceiveWorldChatCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    switchflg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpReceiveWorldChatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.SwitchType switchFlg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::SwitchType_IsValid(value)) {
            set_switchflg(static_cast< ::HelloKittyMsgData::SwitchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpReceiveWorldChatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.SwitchType switchFlg = 1;
  if (has_switchflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->switchflg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpReceiveWorldChatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.SwitchType switchFlg = 1;
  if (has_switchflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->switchflg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpReceiveWorldChatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.SwitchType switchFlg = 1;
    if (has_switchflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->switchflg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpReceiveWorldChatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpReceiveWorldChatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpReceiveWorldChatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpReceiveWorldChatCmd::MergeFrom(const ReqOpReceiveWorldChatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switchflg()) {
      set_switchflg(from.switchflg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpReceiveWorldChatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpReceiveWorldChatCmd::CopyFrom(const ReqOpReceiveWorldChatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpReceiveWorldChatCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOpReceiveWorldChatCmd::Swap(ReqOpReceiveWorldChatCmd* other) {
  if (other != this) {
    std::swap(switchflg_, other->switchflg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpReceiveWorldChatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpReceiveWorldChatCmd_descriptor_;
  metadata.reflection = ReqOpReceiveWorldChatCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckNoticeClient::kNoticeTypeFieldNumber;
#endif  // !_MSC_VER

AckNoticeClient::AckNoticeClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckNoticeClient::InitAsDefaultInstance() {
}

AckNoticeClient::AckNoticeClient(const AckNoticeClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckNoticeClient::SharedCtor() {
  _cached_size_ = 0;
  noticetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckNoticeClient::~AckNoticeClient() {
  SharedDtor();
}

void AckNoticeClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckNoticeClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckNoticeClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckNoticeClient_descriptor_;
}

const AckNoticeClient& AckNoticeClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

AckNoticeClient* AckNoticeClient::default_instance_ = NULL;

AckNoticeClient* AckNoticeClient::New() const {
  return new AckNoticeClient;
}

void AckNoticeClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noticetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckNoticeClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.NoticeType noticeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::NoticeType_IsValid(value)) {
            set_noticetype(static_cast< ::HelloKittyMsgData::NoticeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckNoticeClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.NoticeType noticeType = 1;
  if (has_noticetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->noticetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckNoticeClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.NoticeType noticeType = 1;
  if (has_noticetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->noticetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckNoticeClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.NoticeType noticeType = 1;
    if (has_noticetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->noticetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckNoticeClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckNoticeClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckNoticeClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckNoticeClient::MergeFrom(const AckNoticeClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noticetype()) {
      set_noticetype(from.noticetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckNoticeClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckNoticeClient::CopyFrom(const AckNoticeClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckNoticeClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckNoticeClient::Swap(AckNoticeClient* other) {
  if (other != this) {
    std::swap(noticetype_, other->noticetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckNoticeClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckNoticeClient_descriptor_;
  metadata.reflection = AckNoticeClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFlushUserInfo::kUserBaseFieldNumber;
#endif  // !_MSC_VER

AckFlushUserInfo::AckFlushUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFlushUserInfo::InitAsDefaultInstance() {
  userbase_ = const_cast< ::HelloKittyMsgData::UserBaseInfo*>(&::HelloKittyMsgData::UserBaseInfo::default_instance());
}

AckFlushUserInfo::AckFlushUserInfo(const AckFlushUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFlushUserInfo::SharedCtor() {
  _cached_size_ = 0;
  userbase_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFlushUserInfo::~AckFlushUserInfo() {
  SharedDtor();
}

void AckFlushUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userbase_;
  }
}

void AckFlushUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFlushUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFlushUserInfo_descriptor_;
}

const AckFlushUserInfo& AckFlushUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

AckFlushUserInfo* AckFlushUserInfo::default_instance_ = NULL;

AckFlushUserInfo* AckFlushUserInfo::New() const {
  return new AckFlushUserInfo;
}

void AckFlushUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userbase()) {
      if (userbase_ != NULL) userbase_->::HelloKittyMsgData::UserBaseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFlushUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.UserBaseInfo userBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFlushUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.UserBaseInfo userBase = 1;
  if (has_userbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userbase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFlushUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.UserBaseInfo userBase = 1;
  if (has_userbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userbase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFlushUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.UserBaseInfo userBase = 1;
    if (has_userbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userbase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFlushUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFlushUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFlushUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFlushUserInfo::MergeFrom(const AckFlushUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userbase()) {
      mutable_userbase()->::HelloKittyMsgData::UserBaseInfo::MergeFrom(from.userbase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFlushUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFlushUserInfo::CopyFrom(const AckFlushUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFlushUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_userbase()) {
    if (!this->userbase().IsInitialized()) return false;
  }
  return true;
}

void AckFlushUserInfo::Swap(AckFlushUserInfo* other) {
  if (other != this) {
    std::swap(userbase_, other->userbase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFlushUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFlushUserInfo_descriptor_;
  metadata.reflection = AckFlushUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqLogout::ReqLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogout::InitAsDefaultInstance() {
}

ReqLogout::ReqLogout(const ReqLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogout::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogout::~ReqLogout() {
  SharedDtor();
}

void ReqLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogout_descriptor_;
}

const ReqLogout& ReqLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ReqLogout* ReqLogout::default_instance_ = NULL;

ReqLogout* ReqLogout::New() const {
  return new ReqLogout;
}

void ReqLogout::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogout::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogout::MergeFrom(const ReqLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogout::CopyFrom(const ReqLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogout::IsInitialized() const {

  return true;
}

void ReqLogout::Swap(ReqLogout* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogout_descriptor_;
  metadata.reflection = ReqLogout_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
