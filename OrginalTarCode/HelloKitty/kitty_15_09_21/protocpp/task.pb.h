// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef PROTOBUF_task_2eproto__INCLUDED
#define PROTOBUF_task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_task_2eproto();
void protobuf_AssignDesc_task_2eproto();
void protobuf_ShutdownFile_task_2eproto();

class Task;
class ReqAllTask;
class AckAllTask;
class ReqSubmitTask;
class AckUpdateTask;

enum TaskStatus {
  Task_Accept = 0,
  Task_Finish = 1,
  Task_Award = 2
};
bool TaskStatus_IsValid(int value);
const TaskStatus TaskStatus_MIN = Task_Accept;
const TaskStatus TaskStatus_MAX = Task_Award;
const int TaskStatus_ARRAYSIZE = TaskStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskStatus_descriptor();
inline const ::std::string& TaskStatus_Name(TaskStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskStatus_descriptor(), value);
}
inline bool TaskStatus_Parse(
    const ::std::string& name, TaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskStatus>(
    TaskStatus_descriptor(), name, value);
}
enum TaskType {
  Task_Type_Default = 0,
  Task_Type_Main = 1,
  Task_Type_Day = 2
};
bool TaskType_IsValid(int value);
const TaskType TaskType_MIN = Task_Type_Default;
const TaskType TaskType_MAX = Task_Type_Day;
const int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskType_descriptor();
inline const ::std::string& TaskType_Name(TaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskType_descriptor(), value);
}
inline bool TaskType_Parse(
    const ::std::string& name, TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
// ===================================================================

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required .HelloKittyMsgData.TaskStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::HelloKittyMsgData::TaskStatus status() const;
  inline void set_status(::HelloKittyMsgData::TaskStatus value);

  // required uint32 current = 3;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 3;
  inline ::google::protobuf::uint32 current() const;
  inline void set_current(::google::protobuf::uint32 value);

  // required uint32 total = 4;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 4;
  inline ::google::protobuf::uint32 total() const;
  inline void set_total(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.Task)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  int status_;
  ::google::protobuf::uint32 current_;
  ::google::protobuf::uint32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class ReqAllTask : public ::google::protobuf::Message {
 public:
  ReqAllTask();
  virtual ~ReqAllTask();

  ReqAllTask(const ReqAllTask& from);

  inline ReqAllTask& operator=(const ReqAllTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAllTask& default_instance();

  void Swap(ReqAllTask* other);

  // implements Message ----------------------------------------------

  ReqAllTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAllTask& from);
  void MergeFrom(const ReqAllTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTasktypeFieldNumber = 1;
  inline ::HelloKittyMsgData::TaskType tasktype() const;
  inline void set_tasktype(::HelloKittyMsgData::TaskType value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqAllTask)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int tasktype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static ReqAllTask* default_instance_;
};
// -------------------------------------------------------------------

class AckAllTask : public ::google::protobuf::Message {
 public:
  AckAllTask();
  virtual ~AckAllTask();

  AckAllTask(const AckAllTask& from);

  inline AckAllTask& operator=(const AckAllTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckAllTask& default_instance();

  void Swap(AckAllTask* other);

  // implements Message ----------------------------------------------

  AckAllTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckAllTask& from);
  void MergeFrom(const AckAllTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTasktypeFieldNumber = 1;
  inline ::HelloKittyMsgData::TaskType tasktype() const;
  inline void set_tasktype(::HelloKittyMsgData::TaskType value);

  // repeated .HelloKittyMsgData.Task task = 2;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 2;
  inline const ::HelloKittyMsgData::Task& task(int index) const;
  inline ::HelloKittyMsgData::Task* mutable_task(int index);
  inline ::HelloKittyMsgData::Task* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::Task >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::Task >*
      mutable_task();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckAllTask)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::Task > task_;
  int tasktype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static AckAllTask* default_instance_;
};
// -------------------------------------------------------------------

class ReqSubmitTask : public ::google::protobuf::Message {
 public:
  ReqSubmitTask();
  virtual ~ReqSubmitTask();

  ReqSubmitTask(const ReqSubmitTask& from);

  inline ReqSubmitTask& operator=(const ReqSubmitTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSubmitTask& default_instance();

  void Swap(ReqSubmitTask* other);

  // implements Message ----------------------------------------------

  ReqSubmitTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSubmitTask& from);
  void MergeFrom(const ReqSubmitTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqSubmitTask)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static ReqSubmitTask* default_instance_;
};
// -------------------------------------------------------------------

class AckUpdateTask : public ::google::protobuf::Message {
 public:
  AckUpdateTask();
  virtual ~AckUpdateTask();

  AckUpdateTask(const AckUpdateTask& from);

  inline AckUpdateTask& operator=(const AckUpdateTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpdateTask& default_instance();

  void Swap(AckUpdateTask* other);

  // implements Message ----------------------------------------------

  AckUpdateTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUpdateTask& from);
  void MergeFrom(const AckUpdateTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.Task task = 1;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::HelloKittyMsgData::Task& task() const;
  inline ::HelloKittyMsgData::Task* mutable_task();
  inline ::HelloKittyMsgData::Task* release_task();
  inline void set_allocated_task(::HelloKittyMsgData::Task* task);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckUpdateTask)
 private:
  inline void set_has_task();
  inline void clear_has_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::Task* task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static AckUpdateTask* default_instance_;
};
// ===================================================================


// ===================================================================

// Task

// required uint64 id = 1;
inline bool Task::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Task::id() const {
  return id_;
}
inline void Task::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required .HelloKittyMsgData.TaskStatus status = 2;
inline bool Task::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::HelloKittyMsgData::TaskStatus Task::status() const {
  return static_cast< ::HelloKittyMsgData::TaskStatus >(status_);
}
inline void Task::set_status(::HelloKittyMsgData::TaskStatus value) {
  assert(::HelloKittyMsgData::TaskStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint32 current = 3;
inline bool Task::has_current() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_current() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_current() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_current() {
  current_ = 0u;
  clear_has_current();
}
inline ::google::protobuf::uint32 Task::current() const {
  return current_;
}
inline void Task::set_current(::google::protobuf::uint32 value) {
  set_has_current();
  current_ = value;
}

// required uint32 total = 4;
inline bool Task::has_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 Task::total() const {
  return total_;
}
inline void Task::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
}

// -------------------------------------------------------------------

// ReqAllTask

// optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
inline bool ReqAllTask::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAllTask::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAllTask::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAllTask::clear_tasktype() {
  tasktype_ = 0;
  clear_has_tasktype();
}
inline ::HelloKittyMsgData::TaskType ReqAllTask::tasktype() const {
  return static_cast< ::HelloKittyMsgData::TaskType >(tasktype_);
}
inline void ReqAllTask::set_tasktype(::HelloKittyMsgData::TaskType value) {
  assert(::HelloKittyMsgData::TaskType_IsValid(value));
  set_has_tasktype();
  tasktype_ = value;
}

// -------------------------------------------------------------------

// AckAllTask

// optional .HelloKittyMsgData.TaskType tasktype = 1 [default = Task_Type_Default];
inline bool AckAllTask::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckAllTask::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckAllTask::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckAllTask::clear_tasktype() {
  tasktype_ = 0;
  clear_has_tasktype();
}
inline ::HelloKittyMsgData::TaskType AckAllTask::tasktype() const {
  return static_cast< ::HelloKittyMsgData::TaskType >(tasktype_);
}
inline void AckAllTask::set_tasktype(::HelloKittyMsgData::TaskType value) {
  assert(::HelloKittyMsgData::TaskType_IsValid(value));
  set_has_tasktype();
  tasktype_ = value;
}

// repeated .HelloKittyMsgData.Task task = 2;
inline int AckAllTask::task_size() const {
  return task_.size();
}
inline void AckAllTask::clear_task() {
  task_.Clear();
}
inline const ::HelloKittyMsgData::Task& AckAllTask::task(int index) const {
  return task_.Get(index);
}
inline ::HelloKittyMsgData::Task* AckAllTask::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::HelloKittyMsgData::Task* AckAllTask::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::Task >&
AckAllTask::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::Task >*
AckAllTask::mutable_task() {
  return &task_;
}

// -------------------------------------------------------------------

// ReqSubmitTask

// required uint64 id = 1;
inline bool ReqSubmitTask::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSubmitTask::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSubmitTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSubmitTask::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ReqSubmitTask::id() const {
  return id_;
}
inline void ReqSubmitTask::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// AckUpdateTask

// required .HelloKittyMsgData.Task task = 1;
inline bool AckUpdateTask::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUpdateTask::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUpdateTask::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUpdateTask::clear_task() {
  if (task_ != NULL) task_->::HelloKittyMsgData::Task::Clear();
  clear_has_task();
}
inline const ::HelloKittyMsgData::Task& AckUpdateTask::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::HelloKittyMsgData::Task* AckUpdateTask::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::HelloKittyMsgData::Task;
  return task_;
}
inline ::HelloKittyMsgData::Task* AckUpdateTask::release_task() {
  clear_has_task();
  ::HelloKittyMsgData::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline void AckUpdateTask::set_allocated_task(::HelloKittyMsgData::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::TaskStatus>() {
  return ::HelloKittyMsgData::TaskStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelloKittyMsgData::TaskType>() {
  return ::HelloKittyMsgData::TaskType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_task_2eproto__INCLUDED
