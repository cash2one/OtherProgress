// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* PbStoreItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbStoreItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbSaleCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbSaleCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPbSaleCeilFlush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPbSaleCeilFlush_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbSaleBooth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbSaleBooth_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFlushSaleBooth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFlushSaleBooth_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSallPutItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSallPutItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSellPaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSellPaper_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellPaperCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellPaperCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSellPaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSellPaper_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellPaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellPaper_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckTradeOpFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckTradeOpFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAdvertise_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAdvertise_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSallSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSallSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPurchase_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SaleCellStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OpCellType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RandPaperType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradeFailCodeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_trade_2eproto() {
  protobuf_AddDesc_trade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trade.proto");
  GOOGLE_CHECK(file != NULL);
  PbStoreItem_descriptor_ = file->message_type(0);
  static const int PbStoreItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbStoreItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbStoreItem, itemcount_),
  };
  PbStoreItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbStoreItem_descriptor_,
      PbStoreItem::default_instance_,
      PbStoreItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbStoreItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbStoreItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbStoreItem));
  PbSaleCell_descriptor_ = file->message_type(1);
  static const int PbSaleCell_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, advertise_),
  };
  PbSaleCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbSaleCell_descriptor_,
      PbSaleCell::default_instance_,
      PbSaleCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbSaleCell));
  AckPbSaleCeilFlush_descriptor_ = file->message_type(2);
  static const int AckPbSaleCeilFlush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPbSaleCeilFlush, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPbSaleCeilFlush, salecell_),
  };
  AckPbSaleCeilFlush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPbSaleCeilFlush_descriptor_,
      AckPbSaleCeilFlush::default_instance_,
      AckPbSaleCeilFlush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPbSaleCeilFlush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPbSaleCeilFlush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPbSaleCeilFlush));
  PbSaleBooth_descriptor_ = file->message_type(3);
  static const int PbSaleBooth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleBooth, salecell_),
  };
  PbSaleBooth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbSaleBooth_descriptor_,
      PbSaleBooth::default_instance_,
      PbSaleBooth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleBooth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSaleBooth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbSaleBooth));
  AckFlushSaleBooth_descriptor_ = file->message_type(4);
  static const int AckFlushSaleBooth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushSaleBooth, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushSaleBooth, salebooth_),
  };
  AckFlushSaleBooth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFlushSaleBooth_descriptor_,
      AckFlushSaleBooth::default_instance_,
      AckFlushSaleBooth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushSaleBooth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFlushSaleBooth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFlushSaleBooth));
  ReqSallPutItem_descriptor_ = file->message_type(5);
  static const int ReqSallPutItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallPutItem, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallPutItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallPutItem, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallPutItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallPutItem, advertise_),
  };
  ReqSallPutItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSallPutItem_descriptor_,
      ReqSallPutItem::default_instance_,
      ReqSallPutItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallPutItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallPutItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSallPutItem));
  ReqOpCell_descriptor_ = file->message_type(6);
  static const int ReqOpCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpCell, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpCell, optype_),
  };
  ReqOpCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpCell_descriptor_,
      ReqOpCell::default_instance_,
      ReqOpCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpCell));
  ReqSellPaper_descriptor_ = file->message_type(7);
  static const int ReqSellPaper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSellPaper, randtype_),
  };
  ReqSellPaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSellPaper_descriptor_,
      ReqSellPaper::default_instance_,
      ReqSellPaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSellPaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSellPaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSellPaper));
  SellPaperCell_descriptor_ = file->message_type(8);
  static const int SellPaperCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaperCell, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaperCell, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaperCell, salecell_),
  };
  SellPaperCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellPaperCell_descriptor_,
      SellPaperCell::default_instance_,
      SellPaperCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaperCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaperCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellPaperCell));
  AckSellPaper_descriptor_ = file->message_type(9);
  static const int AckSellPaper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSellPaper, sellpaper_),
  };
  AckSellPaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSellPaper_descriptor_,
      AckSellPaper::default_instance_,
      AckSellPaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSellPaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSellPaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSellPaper));
  SellPaper_descriptor_ = file->message_type(10);
  static const int SellPaper_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaper, randtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaper, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaper, papercell_),
  };
  SellPaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellPaper_descriptor_,
      SellPaper::default_instance_,
      SellPaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellPaper));
  AckTradeOpFail_descriptor_ = file->message_type(11);
  static const int AckTradeOpFail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTradeOpFail, commoncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTradeOpFail, code_),
  };
  AckTradeOpFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckTradeOpFail_descriptor_,
      AckTradeOpFail::default_instance_,
      AckTradeOpFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTradeOpFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTradeOpFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckTradeOpFail));
  ReqAdvertise_descriptor_ = file->message_type(12);
  static const int ReqAdvertise_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAdvertise, cellid_),
  };
  ReqAdvertise_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAdvertise_descriptor_,
      ReqAdvertise::default_instance_,
      ReqAdvertise_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAdvertise, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAdvertise, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAdvertise));
  ReqSallSystem_descriptor_ = file->message_type(13);
  static const int ReqSallSystem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallSystem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallSystem, itemcount_),
  };
  ReqSallSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSallSystem_descriptor_,
      ReqSallSystem::default_instance_,
      ReqSallSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSallSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSallSystem));
  ReqPurchase_descriptor_ = file->message_type(14);
  static const int ReqPurchase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPurchase, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPurchase, cellid_),
  };
  ReqPurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPurchase_descriptor_,
      ReqPurchase::default_instance_,
      ReqPurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPurchase));
  SaleCellStatusType_descriptor_ = file->enum_type(0);
  OpCellType_descriptor_ = file->enum_type(1);
  RandPaperType_descriptor_ = file->enum_type(2);
  TradeFailCodeType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbStoreItem_descriptor_, &PbStoreItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbSaleCell_descriptor_, &PbSaleCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPbSaleCeilFlush_descriptor_, &AckPbSaleCeilFlush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbSaleBooth_descriptor_, &PbSaleBooth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFlushSaleBooth_descriptor_, &AckFlushSaleBooth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSallPutItem_descriptor_, &ReqSallPutItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpCell_descriptor_, &ReqOpCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSellPaper_descriptor_, &ReqSellPaper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellPaperCell_descriptor_, &SellPaperCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSellPaper_descriptor_, &AckSellPaper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellPaper_descriptor_, &SellPaper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckTradeOpFail_descriptor_, &AckTradeOpFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAdvertise_descriptor_, &ReqAdvertise::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSallSystem_descriptor_, &ReqSallSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPurchase_descriptor_, &ReqPurchase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trade_2eproto() {
  delete PbStoreItem::default_instance_;
  delete PbStoreItem_reflection_;
  delete PbSaleCell::default_instance_;
  delete PbSaleCell_reflection_;
  delete AckPbSaleCeilFlush::default_instance_;
  delete AckPbSaleCeilFlush_reflection_;
  delete PbSaleBooth::default_instance_;
  delete PbSaleBooth_reflection_;
  delete AckFlushSaleBooth::default_instance_;
  delete AckFlushSaleBooth_reflection_;
  delete ReqSallPutItem::default_instance_;
  delete ReqSallPutItem_reflection_;
  delete ReqOpCell::default_instance_;
  delete ReqOpCell_reflection_;
  delete ReqSellPaper::default_instance_;
  delete ReqSellPaper_reflection_;
  delete SellPaperCell::default_instance_;
  delete SellPaperCell_reflection_;
  delete AckSellPaper::default_instance_;
  delete AckSellPaper_reflection_;
  delete SellPaper::default_instance_;
  delete SellPaper_reflection_;
  delete AckTradeOpFail::default_instance_;
  delete AckTradeOpFail_reflection_;
  delete ReqAdvertise::default_instance_;
  delete ReqAdvertise_reflection_;
  delete ReqSallSystem::default_instance_;
  delete ReqSallSystem_reflection_;
  delete ReqPurchase::default_instance_;
  delete ReqPurchase_reflection_;
}

void protobuf_AddDesc_trade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013trade.proto\022\021HelloKittyMsgData\032\014common"
    ".proto\"0\n\013PbStoreItem\022\016\n\006itemId\030\001 \002(\r\022\021\n"
    "\titemCount\030\002 \002(\r\"\322\001\n\nPbSaleCell\022\021\n\006cellI"
    "d\030\001 \002(\r:\0010\022\021\n\006itemId\030\002 \002(\r:\0010\022\024\n\titemCou"
    "nt\030\003 \002(\r:\0010\022\020\n\005price\030\004 \002(\r:\0010\022H\n\006status\030"
    "\005 \002(\0162%.HelloKittyMsgData.SaleCellStatus"
    "Type:\021Sale_Status_Empty\022\022\n\010nickName\030\006 \002("
    "\t:\000\022\030\n\tadvertise\030\007 \002(\010:\005false\"U\n\022AckPbSa"
    "leCeilFlush\022\016\n\006charid\030\001 \002(\004\022/\n\010saleCell\030"
    "\002 \002(\0132\035.HelloKittyMsgData.PbSaleCell\">\n\013"
    "PbSaleBooth\022/\n\010saleCell\030\001 \003(\0132\035.HelloKit"
    "tyMsgData.PbSaleCell\"V\n\021AckFlushSaleBoot"
    "h\022\016\n\006charid\030\001 \002(\004\0221\n\tsaleBooth\030\002 \001(\0132\036.H"
    "elloKittyMsgData.PbSaleBooth\"e\n\016ReqSallP"
    "utItem\022\016\n\006cellId\030\001 \002(\r\022\016\n\006itemId\030\002 \002(\r\022\021"
    "\n\titemCount\030\003 \002(\r\022\r\n\005price\030\004 \002(\r\022\021\n\tadve"
    "rtise\030\005 \002(\010\"J\n\tReqOpCell\022\016\n\006cellId\030\001 \002(\r"
    "\022-\n\006optype\030\002 \002(\0162\035.HelloKittyMsgData.OpC"
    "ellType\"B\n\014ReqSellPaper\0222\n\010randtype\030\001 \002("
    "\0162 .HelloKittyMsgData.RandPaperType\"b\n\rS"
    "ellPaperCell\022\016\n\006charid\030\001 \002(\004\022\020\n\010nickname"
    "\030\002 \002(\t\022/\n\010salecell\030\003 \002(\0132\035.HelloKittyMsg"
    "Data.PbSaleCell\"\?\n\014AckSellPaper\022/\n\tsellp"
    "aper\030\001 \002(\0132\034.HelloKittyMsgData.SellPaper"
    "\"\210\001\n\tSellPaper\0222\n\010randtype\030\001 \002(\0162 .Hello"
    "KittyMsgData.RandPaperType\022\022\n\ncreateTime"
    "\030\002 \002(\r\0223\n\tpaperCell\030\003 \003(\0132 .HelloKittyMs"
    "gData.SellPaperCell\"z\n\016AckTradeOpFail\0224\n"
    "\ncommoncode\030\001 \002(\0162 .HelloKittyMsgData.Er"
    "rorCodeType\0222\n\004code\030\002 \002(\0162$.HelloKittyMs"
    "gData.TradeFailCodeType\"\036\n\014ReqAdvertise\022"
    "\016\n\006cellId\030\001 \002(\r\"5\n\rReqSallSystem\022\016\n\006item"
    "id\030\001 \002(\r\022\024\n\titemCount\030\002 \002(\r:\0010\"-\n\013ReqPur"
    "chase\022\016\n\006charid\030\001 \002(\004\022\016\n\006cellid\030\002 \002(\r*v\n"
    "\022SaleCellStatusType\022\025\n\021Sale_Status_Empty"
    "\020\000\022\030\n\024Sale_Status_For_Sale\020\001\022\030\n\024Sale_Sta"
    "tus_Sale_End\020\002\022\025\n\021Sale_Status_Close\020\003*Q\n"
    "\nOpCellType\022\025\n\021Op_Type_Open_Cell\020\000\022\025\n\021Op"
    "_Type_Down_Item\020\001\022\025\n\021Op_Type_Get_Money\020\002"
    "*4\n\rRandPaperType\022\022\n\016Rand_Passer_By\020\000\022\017\n"
    "\013Rand_Friend\020\001*\304\001\n\021TradeFailCodeType\022\020\n\014"
    "Trade_Occupy\020\000\022\022\n\016Trade_Op_Close\020\001\022\026\n\022Tr"
    "ade_Op_Not_Empty\020\002\022\034\n\030Trade_Op_Item_Not_"
    "Enough\020\003\022\022\n\016Trade_Op_Empty\020\004\022\021\n\rTrade_Op"
    "_Full\020\005\022\021\n\rTrade_Op_Open\020\006\022\031\n\025Trade_Adve"
    "rtise_Again\020\007", 1813);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trade.proto", &protobuf_RegisterTypes);
  PbStoreItem::default_instance_ = new PbStoreItem();
  PbSaleCell::default_instance_ = new PbSaleCell();
  AckPbSaleCeilFlush::default_instance_ = new AckPbSaleCeilFlush();
  PbSaleBooth::default_instance_ = new PbSaleBooth();
  AckFlushSaleBooth::default_instance_ = new AckFlushSaleBooth();
  ReqSallPutItem::default_instance_ = new ReqSallPutItem();
  ReqOpCell::default_instance_ = new ReqOpCell();
  ReqSellPaper::default_instance_ = new ReqSellPaper();
  SellPaperCell::default_instance_ = new SellPaperCell();
  AckSellPaper::default_instance_ = new AckSellPaper();
  SellPaper::default_instance_ = new SellPaper();
  AckTradeOpFail::default_instance_ = new AckTradeOpFail();
  ReqAdvertise::default_instance_ = new ReqAdvertise();
  ReqSallSystem::default_instance_ = new ReqSallSystem();
  ReqPurchase::default_instance_ = new ReqPurchase();
  PbStoreItem::default_instance_->InitAsDefaultInstance();
  PbSaleCell::default_instance_->InitAsDefaultInstance();
  AckPbSaleCeilFlush::default_instance_->InitAsDefaultInstance();
  PbSaleBooth::default_instance_->InitAsDefaultInstance();
  AckFlushSaleBooth::default_instance_->InitAsDefaultInstance();
  ReqSallPutItem::default_instance_->InitAsDefaultInstance();
  ReqOpCell::default_instance_->InitAsDefaultInstance();
  ReqSellPaper::default_instance_->InitAsDefaultInstance();
  SellPaperCell::default_instance_->InitAsDefaultInstance();
  AckSellPaper::default_instance_->InitAsDefaultInstance();
  SellPaper::default_instance_->InitAsDefaultInstance();
  AckTradeOpFail::default_instance_->InitAsDefaultInstance();
  ReqAdvertise::default_instance_->InitAsDefaultInstance();
  ReqSallSystem::default_instance_->InitAsDefaultInstance();
  ReqPurchase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trade_2eproto {
  StaticDescriptorInitializer_trade_2eproto() {
    protobuf_AddDesc_trade_2eproto();
  }
} static_descriptor_initializer_trade_2eproto_;
const ::google::protobuf::EnumDescriptor* SaleCellStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaleCellStatusType_descriptor_;
}
bool SaleCellStatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpCellType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpCellType_descriptor_;
}
bool OpCellType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RandPaperType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandPaperType_descriptor_;
}
bool RandPaperType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradeFailCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeFailCodeType_descriptor_;
}
bool TradeFailCodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PbStoreItem::kItemIdFieldNumber;
const int PbStoreItem::kItemCountFieldNumber;
#endif  // !_MSC_VER

PbStoreItem::PbStoreItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbStoreItem::InitAsDefaultInstance() {
}

PbStoreItem::PbStoreItem(const PbStoreItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbStoreItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbStoreItem::~PbStoreItem() {
  SharedDtor();
}

void PbStoreItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbStoreItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbStoreItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbStoreItem_descriptor_;
}

const PbStoreItem& PbStoreItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

PbStoreItem* PbStoreItem::default_instance_ = NULL;

PbStoreItem* PbStoreItem::New() const {
  return new PbStoreItem;
}

void PbStoreItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbStoreItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemCount;
        break;
      }

      // required uint32 itemCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbStoreItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required uint32 itemCount = 2;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbStoreItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // required uint32 itemCount = 2;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbStoreItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 itemCount = 2;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbStoreItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbStoreItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbStoreItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbStoreItem::MergeFrom(const PbStoreItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbStoreItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbStoreItem::CopyFrom(const PbStoreItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbStoreItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbStoreItem::Swap(PbStoreItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbStoreItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbStoreItem_descriptor_;
  metadata.reflection = PbStoreItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbSaleCell::kCellIdFieldNumber;
const int PbSaleCell::kItemIdFieldNumber;
const int PbSaleCell::kItemCountFieldNumber;
const int PbSaleCell::kPriceFieldNumber;
const int PbSaleCell::kStatusFieldNumber;
const int PbSaleCell::kNickNameFieldNumber;
const int PbSaleCell::kAdvertiseFieldNumber;
#endif  // !_MSC_VER

PbSaleCell::PbSaleCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbSaleCell::InitAsDefaultInstance() {
}

PbSaleCell::PbSaleCell(const PbSaleCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbSaleCell::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  itemid_ = 0u;
  itemcount_ = 0u;
  price_ = 0u;
  status_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  advertise_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbSaleCell::~PbSaleCell() {
  SharedDtor();
}

void PbSaleCell::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void PbSaleCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbSaleCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbSaleCell_descriptor_;
}

const PbSaleCell& PbSaleCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

PbSaleCell* PbSaleCell::default_instance_ = NULL;

PbSaleCell* PbSaleCell::New() const {
  return new PbSaleCell;
}

void PbSaleCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    itemid_ = 0u;
    itemcount_ = 0u;
    price_ = 0u;
    status_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    advertise_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbSaleCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required uint32 itemId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemCount;
        break;
      }

      // required uint32 itemCount = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // required uint32 price = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required .HelloKittyMsgData.SaleCellStatusType status = 5 [default = Sale_Status_Empty];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::SaleCellStatusType_IsValid(value)) {
            set_status(static_cast< ::HelloKittyMsgData::SaleCellStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nickName;
        break;
      }

      // required string nickName = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_advertise;
        break;
      }

      // required bool advertise = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advertise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advertise_)));
          set_has_advertise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbSaleCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1 [default = 0];
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint32 itemId = 2 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // required uint32 itemCount = 3 [default = 0];
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemcount(), output);
  }

  // required uint32 price = 4 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  // required .HelloKittyMsgData.SaleCellStatusType status = 5 [default = Sale_Status_Empty];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // required string nickName = 6 [default = ""];
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nickname(), output);
  }

  // required bool advertise = 7 [default = false];
  if (has_advertise()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->advertise(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbSaleCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1 [default = 0];
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint32 itemId = 2 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // required uint32 itemCount = 3 [default = 0];
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemcount(), target);
  }

  // required uint32 price = 4 [default = 0];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  // required .HelloKittyMsgData.SaleCellStatusType status = 5 [default = Sale_Status_Empty];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // required string nickName = 6 [default = ""];
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nickname(), target);
  }

  // required bool advertise = 7 [default = false];
  if (has_advertise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->advertise(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbSaleCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1 [default = 0];
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint32 itemId = 2 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 itemCount = 3 [default = 0];
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

    // required uint32 price = 4 [default = 0];
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required .HelloKittyMsgData.SaleCellStatusType status = 5 [default = Sale_Status_Empty];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string nickName = 6 [default = ""];
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required bool advertise = 7 [default = false];
    if (has_advertise()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbSaleCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbSaleCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbSaleCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbSaleCell::MergeFrom(const PbSaleCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_advertise()) {
      set_advertise(from.advertise());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbSaleCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbSaleCell::CopyFrom(const PbSaleCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbSaleCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void PbSaleCell::Swap(PbSaleCell* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(price_, other->price_);
    std::swap(status_, other->status_);
    std::swap(nickname_, other->nickname_);
    std::swap(advertise_, other->advertise_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbSaleCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbSaleCell_descriptor_;
  metadata.reflection = PbSaleCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPbSaleCeilFlush::kCharidFieldNumber;
const int AckPbSaleCeilFlush::kSaleCellFieldNumber;
#endif  // !_MSC_VER

AckPbSaleCeilFlush::AckPbSaleCeilFlush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPbSaleCeilFlush::InitAsDefaultInstance() {
  salecell_ = const_cast< ::HelloKittyMsgData::PbSaleCell*>(&::HelloKittyMsgData::PbSaleCell::default_instance());
}

AckPbSaleCeilFlush::AckPbSaleCeilFlush(const AckPbSaleCeilFlush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPbSaleCeilFlush::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  salecell_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPbSaleCeilFlush::~AckPbSaleCeilFlush() {
  SharedDtor();
}

void AckPbSaleCeilFlush::SharedDtor() {
  if (this != default_instance_) {
    delete salecell_;
  }
}

void AckPbSaleCeilFlush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPbSaleCeilFlush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPbSaleCeilFlush_descriptor_;
}

const AckPbSaleCeilFlush& AckPbSaleCeilFlush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

AckPbSaleCeilFlush* AckPbSaleCeilFlush::default_instance_ = NULL;

AckPbSaleCeilFlush* AckPbSaleCeilFlush::New() const {
  return new AckPbSaleCeilFlush;
}

void AckPbSaleCeilFlush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_salecell()) {
      if (salecell_ != NULL) salecell_->::HelloKittyMsgData::PbSaleCell::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPbSaleCeilFlush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_saleCell;
        break;
      }

      // required .HelloKittyMsgData.PbSaleCell saleCell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saleCell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salecell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPbSaleCeilFlush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required .HelloKittyMsgData.PbSaleCell saleCell = 2;
  if (has_salecell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->salecell(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPbSaleCeilFlush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required .HelloKittyMsgData.PbSaleCell saleCell = 2;
  if (has_salecell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->salecell(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPbSaleCeilFlush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required .HelloKittyMsgData.PbSaleCell saleCell = 2;
    if (has_salecell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salecell());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPbSaleCeilFlush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPbSaleCeilFlush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPbSaleCeilFlush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPbSaleCeilFlush::MergeFrom(const AckPbSaleCeilFlush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_salecell()) {
      mutable_salecell()->::HelloKittyMsgData::PbSaleCell::MergeFrom(from.salecell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPbSaleCeilFlush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPbSaleCeilFlush::CopyFrom(const AckPbSaleCeilFlush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPbSaleCeilFlush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_salecell()) {
    if (!this->salecell().IsInitialized()) return false;
  }
  return true;
}

void AckPbSaleCeilFlush::Swap(AckPbSaleCeilFlush* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(salecell_, other->salecell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPbSaleCeilFlush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPbSaleCeilFlush_descriptor_;
  metadata.reflection = AckPbSaleCeilFlush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbSaleBooth::kSaleCellFieldNumber;
#endif  // !_MSC_VER

PbSaleBooth::PbSaleBooth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbSaleBooth::InitAsDefaultInstance() {
}

PbSaleBooth::PbSaleBooth(const PbSaleBooth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbSaleBooth::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbSaleBooth::~PbSaleBooth() {
  SharedDtor();
}

void PbSaleBooth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbSaleBooth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbSaleBooth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbSaleBooth_descriptor_;
}

const PbSaleBooth& PbSaleBooth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

PbSaleBooth* PbSaleBooth::default_instance_ = NULL;

PbSaleBooth* PbSaleBooth::New() const {
  return new PbSaleBooth;
}

void PbSaleBooth::Clear() {
  salecell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbSaleBooth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.PbSaleCell saleCell = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saleCell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_salecell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_saleCell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbSaleBooth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.PbSaleCell saleCell = 1;
  for (int i = 0; i < this->salecell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->salecell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbSaleBooth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.PbSaleCell saleCell = 1;
  for (int i = 0; i < this->salecell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->salecell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbSaleBooth::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.PbSaleCell saleCell = 1;
  total_size += 1 * this->salecell_size();
  for (int i = 0; i < this->salecell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->salecell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbSaleBooth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbSaleBooth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbSaleBooth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbSaleBooth::MergeFrom(const PbSaleBooth& from) {
  GOOGLE_CHECK_NE(&from, this);
  salecell_.MergeFrom(from.salecell_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbSaleBooth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbSaleBooth::CopyFrom(const PbSaleBooth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbSaleBooth::IsInitialized() const {

  for (int i = 0; i < salecell_size(); i++) {
    if (!this->salecell(i).IsInitialized()) return false;
  }
  return true;
}

void PbSaleBooth::Swap(PbSaleBooth* other) {
  if (other != this) {
    salecell_.Swap(&other->salecell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbSaleBooth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbSaleBooth_descriptor_;
  metadata.reflection = PbSaleBooth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFlushSaleBooth::kCharidFieldNumber;
const int AckFlushSaleBooth::kSaleBoothFieldNumber;
#endif  // !_MSC_VER

AckFlushSaleBooth::AckFlushSaleBooth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFlushSaleBooth::InitAsDefaultInstance() {
  salebooth_ = const_cast< ::HelloKittyMsgData::PbSaleBooth*>(&::HelloKittyMsgData::PbSaleBooth::default_instance());
}

AckFlushSaleBooth::AckFlushSaleBooth(const AckFlushSaleBooth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFlushSaleBooth::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  salebooth_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFlushSaleBooth::~AckFlushSaleBooth() {
  SharedDtor();
}

void AckFlushSaleBooth::SharedDtor() {
  if (this != default_instance_) {
    delete salebooth_;
  }
}

void AckFlushSaleBooth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFlushSaleBooth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFlushSaleBooth_descriptor_;
}

const AckFlushSaleBooth& AckFlushSaleBooth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

AckFlushSaleBooth* AckFlushSaleBooth::default_instance_ = NULL;

AckFlushSaleBooth* AckFlushSaleBooth::New() const {
  return new AckFlushSaleBooth;
}

void AckFlushSaleBooth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_salebooth()) {
      if (salebooth_ != NULL) salebooth_->::HelloKittyMsgData::PbSaleBooth::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFlushSaleBooth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_saleBooth;
        break;
      }

      // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saleBooth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salebooth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFlushSaleBooth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 2;
  if (has_salebooth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->salebooth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFlushSaleBooth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 2;
  if (has_salebooth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->salebooth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFlushSaleBooth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .HelloKittyMsgData.PbSaleBooth saleBooth = 2;
    if (has_salebooth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salebooth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFlushSaleBooth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFlushSaleBooth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFlushSaleBooth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFlushSaleBooth::MergeFrom(const AckFlushSaleBooth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_salebooth()) {
      mutable_salebooth()->::HelloKittyMsgData::PbSaleBooth::MergeFrom(from.salebooth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFlushSaleBooth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFlushSaleBooth::CopyFrom(const AckFlushSaleBooth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFlushSaleBooth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_salebooth()) {
    if (!this->salebooth().IsInitialized()) return false;
  }
  return true;
}

void AckFlushSaleBooth::Swap(AckFlushSaleBooth* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(salebooth_, other->salebooth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFlushSaleBooth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFlushSaleBooth_descriptor_;
  metadata.reflection = AckFlushSaleBooth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSallPutItem::kCellIdFieldNumber;
const int ReqSallPutItem::kItemIdFieldNumber;
const int ReqSallPutItem::kItemCountFieldNumber;
const int ReqSallPutItem::kPriceFieldNumber;
const int ReqSallPutItem::kAdvertiseFieldNumber;
#endif  // !_MSC_VER

ReqSallPutItem::ReqSallPutItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSallPutItem::InitAsDefaultInstance() {
}

ReqSallPutItem::ReqSallPutItem(const ReqSallPutItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSallPutItem::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  itemid_ = 0u;
  itemcount_ = 0u;
  price_ = 0u;
  advertise_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSallPutItem::~ReqSallPutItem() {
  SharedDtor();
}

void ReqSallPutItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSallPutItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSallPutItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSallPutItem_descriptor_;
}

const ReqSallPutItem& ReqSallPutItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

ReqSallPutItem* ReqSallPutItem::default_instance_ = NULL;

ReqSallPutItem* ReqSallPutItem::New() const {
  return new ReqSallPutItem;
}

void ReqSallPutItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    itemid_ = 0u;
    itemcount_ = 0u;
    price_ = 0u;
    advertise_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSallPutItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemCount;
        break;
      }

      // required uint32 itemCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // required uint32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_advertise;
        break;
      }

      // required bool advertise = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advertise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advertise_)));
          set_has_advertise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSallPutItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // required uint32 itemCount = 3;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemcount(), output);
  }

  // required uint32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  // required bool advertise = 5;
  if (has_advertise()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->advertise(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSallPutItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // required uint32 itemCount = 3;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemcount(), target);
  }

  // required uint32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  // required bool advertise = 5;
  if (has_advertise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->advertise(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSallPutItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 itemCount = 3;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

    // required uint32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required bool advertise = 5;
    if (has_advertise()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSallPutItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSallPutItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSallPutItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSallPutItem::MergeFrom(const ReqSallPutItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_advertise()) {
      set_advertise(from.advertise());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSallPutItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSallPutItem::CopyFrom(const ReqSallPutItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSallPutItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ReqSallPutItem::Swap(ReqSallPutItem* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(price_, other->price_);
    std::swap(advertise_, other->advertise_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSallPutItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSallPutItem_descriptor_;
  metadata.reflection = ReqSallPutItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpCell::kCellIdFieldNumber;
const int ReqOpCell::kOptypeFieldNumber;
#endif  // !_MSC_VER

ReqOpCell::ReqOpCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpCell::InitAsDefaultInstance() {
}

ReqOpCell::ReqOpCell(const ReqOpCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpCell::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpCell::~ReqOpCell() {
  SharedDtor();
}

void ReqOpCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpCell_descriptor_;
}

const ReqOpCell& ReqOpCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

ReqOpCell* ReqOpCell::default_instance_ = NULL;

ReqOpCell* ReqOpCell::New() const {
  return new ReqOpCell;
}

void ReqOpCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
    optype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_optype;
        break;
      }

      // required .HelloKittyMsgData.OpCellType optype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::OpCellType_IsValid(value)) {
            set_optype(static_cast< ::HelloKittyMsgData::OpCellType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  // required .HelloKittyMsgData.OpCellType optype = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  // required .HelloKittyMsgData.OpCellType optype = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // required .HelloKittyMsgData.OpCellType optype = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpCell::MergeFrom(const ReqOpCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpCell::CopyFrom(const ReqOpCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqOpCell::Swap(ReqOpCell* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpCell_descriptor_;
  metadata.reflection = ReqOpCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSellPaper::kRandtypeFieldNumber;
#endif  // !_MSC_VER

ReqSellPaper::ReqSellPaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSellPaper::InitAsDefaultInstance() {
}

ReqSellPaper::ReqSellPaper(const ReqSellPaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSellPaper::SharedCtor() {
  _cached_size_ = 0;
  randtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSellPaper::~ReqSellPaper() {
  SharedDtor();
}

void ReqSellPaper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSellPaper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSellPaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSellPaper_descriptor_;
}

const ReqSellPaper& ReqSellPaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

ReqSellPaper* ReqSellPaper::default_instance_ = NULL;

ReqSellPaper* ReqSellPaper::New() const {
  return new ReqSellPaper;
}

void ReqSellPaper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    randtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSellPaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.RandPaperType randtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::RandPaperType_IsValid(value)) {
            set_randtype(static_cast< ::HelloKittyMsgData::RandPaperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSellPaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.RandPaperType randtype = 1;
  if (has_randtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->randtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSellPaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.RandPaperType randtype = 1;
  if (has_randtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->randtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSellPaper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.RandPaperType randtype = 1;
    if (has_randtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->randtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSellPaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSellPaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSellPaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSellPaper::MergeFrom(const ReqSellPaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randtype()) {
      set_randtype(from.randtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSellPaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSellPaper::CopyFrom(const ReqSellPaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSellPaper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqSellPaper::Swap(ReqSellPaper* other) {
  if (other != this) {
    std::swap(randtype_, other->randtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSellPaper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSellPaper_descriptor_;
  metadata.reflection = ReqSellPaper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellPaperCell::kCharidFieldNumber;
const int SellPaperCell::kNicknameFieldNumber;
const int SellPaperCell::kSalecellFieldNumber;
#endif  // !_MSC_VER

SellPaperCell::SellPaperCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SellPaperCell::InitAsDefaultInstance() {
  salecell_ = const_cast< ::HelloKittyMsgData::PbSaleCell*>(&::HelloKittyMsgData::PbSaleCell::default_instance());
}

SellPaperCell::SellPaperCell(const SellPaperCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SellPaperCell::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  salecell_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellPaperCell::~SellPaperCell() {
  SharedDtor();
}

void SellPaperCell::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
    delete salecell_;
  }
}

void SellPaperCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellPaperCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellPaperCell_descriptor_;
}

const SellPaperCell& SellPaperCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

SellPaperCell* SellPaperCell::default_instance_ = NULL;

SellPaperCell* SellPaperCell::New() const {
  return new SellPaperCell;
}

void SellPaperCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_salecell()) {
      if (salecell_ != NULL) salecell_->::HelloKittyMsgData::PbSaleCell::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellPaperCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_salecell;
        break;
      }

      // required .HelloKittyMsgData.PbSaleCell salecell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_salecell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salecell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SellPaperCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // required .HelloKittyMsgData.PbSaleCell salecell = 3;
  if (has_salecell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->salecell(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SellPaperCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required .HelloKittyMsgData.PbSaleCell salecell = 3;
  if (has_salecell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->salecell(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SellPaperCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required .HelloKittyMsgData.PbSaleCell salecell = 3;
    if (has_salecell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salecell());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellPaperCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellPaperCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellPaperCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellPaperCell::MergeFrom(const SellPaperCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_salecell()) {
      mutable_salecell()->::HelloKittyMsgData::PbSaleCell::MergeFrom(from.salecell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellPaperCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellPaperCell::CopyFrom(const SellPaperCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellPaperCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_salecell()) {
    if (!this->salecell().IsInitialized()) return false;
  }
  return true;
}

void SellPaperCell::Swap(SellPaperCell* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(nickname_, other->nickname_);
    std::swap(salecell_, other->salecell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellPaperCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellPaperCell_descriptor_;
  metadata.reflection = SellPaperCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSellPaper::kSellpaperFieldNumber;
#endif  // !_MSC_VER

AckSellPaper::AckSellPaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSellPaper::InitAsDefaultInstance() {
  sellpaper_ = const_cast< ::HelloKittyMsgData::SellPaper*>(&::HelloKittyMsgData::SellPaper::default_instance());
}

AckSellPaper::AckSellPaper(const AckSellPaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSellPaper::SharedCtor() {
  _cached_size_ = 0;
  sellpaper_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSellPaper::~AckSellPaper() {
  SharedDtor();
}

void AckSellPaper::SharedDtor() {
  if (this != default_instance_) {
    delete sellpaper_;
  }
}

void AckSellPaper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSellPaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSellPaper_descriptor_;
}

const AckSellPaper& AckSellPaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

AckSellPaper* AckSellPaper::default_instance_ = NULL;

AckSellPaper* AckSellPaper::New() const {
  return new AckSellPaper;
}

void AckSellPaper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sellpaper()) {
      if (sellpaper_ != NULL) sellpaper_->::HelloKittyMsgData::SellPaper::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSellPaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.SellPaper sellpaper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sellpaper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSellPaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.SellPaper sellpaper = 1;
  if (has_sellpaper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sellpaper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSellPaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.SellPaper sellpaper = 1;
  if (has_sellpaper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sellpaper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSellPaper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.SellPaper sellpaper = 1;
    if (has_sellpaper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sellpaper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSellPaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSellPaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSellPaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSellPaper::MergeFrom(const AckSellPaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sellpaper()) {
      mutable_sellpaper()->::HelloKittyMsgData::SellPaper::MergeFrom(from.sellpaper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSellPaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSellPaper::CopyFrom(const AckSellPaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSellPaper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_sellpaper()) {
    if (!this->sellpaper().IsInitialized()) return false;
  }
  return true;
}

void AckSellPaper::Swap(AckSellPaper* other) {
  if (other != this) {
    std::swap(sellpaper_, other->sellpaper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSellPaper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSellPaper_descriptor_;
  metadata.reflection = AckSellPaper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellPaper::kRandtypeFieldNumber;
const int SellPaper::kCreateTimeFieldNumber;
const int SellPaper::kPaperCellFieldNumber;
#endif  // !_MSC_VER

SellPaper::SellPaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SellPaper::InitAsDefaultInstance() {
}

SellPaper::SellPaper(const SellPaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SellPaper::SharedCtor() {
  _cached_size_ = 0;
  randtype_ = 0;
  createtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellPaper::~SellPaper() {
  SharedDtor();
}

void SellPaper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellPaper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellPaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellPaper_descriptor_;
}

const SellPaper& SellPaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

SellPaper* SellPaper::default_instance_ = NULL;

SellPaper* SellPaper::New() const {
  return new SellPaper;
}

void SellPaper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    randtype_ = 0;
    createtime_ = 0u;
  }
  papercell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellPaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.RandPaperType randtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::RandPaperType_IsValid(value)) {
            set_randtype(static_cast< ::HelloKittyMsgData::RandPaperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_createTime;
        break;
      }

      // required uint32 createTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paperCell;
        break;
      }

      // repeated .HelloKittyMsgData.SellPaperCell paperCell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paperCell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_papercell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paperCell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SellPaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.RandPaperType randtype = 1;
  if (has_randtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->randtype(), output);
  }

  // required uint32 createTime = 2;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->createtime(), output);
  }

  // repeated .HelloKittyMsgData.SellPaperCell paperCell = 3;
  for (int i = 0; i < this->papercell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->papercell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SellPaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.RandPaperType randtype = 1;
  if (has_randtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->randtype(), target);
  }

  // required uint32 createTime = 2;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->createtime(), target);
  }

  // repeated .HelloKittyMsgData.SellPaperCell paperCell = 3;
  for (int i = 0; i < this->papercell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->papercell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SellPaper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.RandPaperType randtype = 1;
    if (has_randtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->randtype());
    }

    // required uint32 createTime = 2;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  // repeated .HelloKittyMsgData.SellPaperCell paperCell = 3;
  total_size += 1 * this->papercell_size();
  for (int i = 0; i < this->papercell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->papercell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellPaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellPaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellPaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellPaper::MergeFrom(const SellPaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  papercell_.MergeFrom(from.papercell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randtype()) {
      set_randtype(from.randtype());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellPaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellPaper::CopyFrom(const SellPaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellPaper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < papercell_size(); i++) {
    if (!this->papercell(i).IsInitialized()) return false;
  }
  return true;
}

void SellPaper::Swap(SellPaper* other) {
  if (other != this) {
    std::swap(randtype_, other->randtype_);
    std::swap(createtime_, other->createtime_);
    papercell_.Swap(&other->papercell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellPaper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellPaper_descriptor_;
  metadata.reflection = SellPaper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckTradeOpFail::kCommoncodeFieldNumber;
const int AckTradeOpFail::kCodeFieldNumber;
#endif  // !_MSC_VER

AckTradeOpFail::AckTradeOpFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckTradeOpFail::InitAsDefaultInstance() {
}

AckTradeOpFail::AckTradeOpFail(const AckTradeOpFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckTradeOpFail::SharedCtor() {
  _cached_size_ = 0;
  commoncode_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckTradeOpFail::~AckTradeOpFail() {
  SharedDtor();
}

void AckTradeOpFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckTradeOpFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckTradeOpFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckTradeOpFail_descriptor_;
}

const AckTradeOpFail& AckTradeOpFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

AckTradeOpFail* AckTradeOpFail::default_instance_ = NULL;

AckTradeOpFail* AckTradeOpFail::New() const {
  return new AckTradeOpFail;
}

void AckTradeOpFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commoncode_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckTradeOpFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::ErrorCodeType_IsValid(value)) {
            set_commoncode(static_cast< ::HelloKittyMsgData::ErrorCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required .HelloKittyMsgData.TradeFailCodeType code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::TradeFailCodeType_IsValid(value)) {
            set_code(static_cast< ::HelloKittyMsgData::TradeFailCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckTradeOpFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
  if (has_commoncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->commoncode(), output);
  }

  // required .HelloKittyMsgData.TradeFailCodeType code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckTradeOpFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
  if (has_commoncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->commoncode(), target);
  }

  // required .HelloKittyMsgData.TradeFailCodeType code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckTradeOpFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.ErrorCodeType commoncode = 1;
    if (has_commoncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commoncode());
    }

    // required .HelloKittyMsgData.TradeFailCodeType code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckTradeOpFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckTradeOpFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckTradeOpFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckTradeOpFail::MergeFrom(const AckTradeOpFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commoncode()) {
      set_commoncode(from.commoncode());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckTradeOpFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTradeOpFail::CopyFrom(const AckTradeOpFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTradeOpFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckTradeOpFail::Swap(AckTradeOpFail* other) {
  if (other != this) {
    std::swap(commoncode_, other->commoncode_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckTradeOpFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckTradeOpFail_descriptor_;
  metadata.reflection = AckTradeOpFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAdvertise::kCellIdFieldNumber;
#endif  // !_MSC_VER

ReqAdvertise::ReqAdvertise()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAdvertise::InitAsDefaultInstance() {
}

ReqAdvertise::ReqAdvertise(const ReqAdvertise& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAdvertise::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAdvertise::~ReqAdvertise() {
  SharedDtor();
}

void ReqAdvertise::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAdvertise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAdvertise::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAdvertise_descriptor_;
}

const ReqAdvertise& ReqAdvertise::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

ReqAdvertise* ReqAdvertise::default_instance_ = NULL;

ReqAdvertise* ReqAdvertise::New() const {
  return new ReqAdvertise;
}

void ReqAdvertise::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAdvertise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cellId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAdvertise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cellid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAdvertise::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cellid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAdvertise::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAdvertise::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAdvertise* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAdvertise*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAdvertise::MergeFrom(const ReqAdvertise& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAdvertise::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAdvertise::CopyFrom(const ReqAdvertise& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAdvertise::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAdvertise::Swap(ReqAdvertise* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAdvertise::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAdvertise_descriptor_;
  metadata.reflection = ReqAdvertise_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSallSystem::kItemidFieldNumber;
const int ReqSallSystem::kItemCountFieldNumber;
#endif  // !_MSC_VER

ReqSallSystem::ReqSallSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSallSystem::InitAsDefaultInstance() {
}

ReqSallSystem::ReqSallSystem(const ReqSallSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSallSystem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSallSystem::~ReqSallSystem() {
  SharedDtor();
}

void ReqSallSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSallSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSallSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSallSystem_descriptor_;
}

const ReqSallSystem& ReqSallSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

ReqSallSystem* ReqSallSystem::default_instance_ = NULL;

ReqSallSystem* ReqSallSystem::New() const {
  return new ReqSallSystem;
}

void ReqSallSystem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSallSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemCount;
        break;
      }

      // required uint32 itemCount = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSallSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required uint32 itemCount = 2 [default = 0];
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSallSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // required uint32 itemCount = 2 [default = 0];
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSallSystem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 itemCount = 2 [default = 0];
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSallSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSallSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSallSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSallSystem::MergeFrom(const ReqSallSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSallSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSallSystem::CopyFrom(const ReqSallSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSallSystem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqSallSystem::Swap(ReqSallSystem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSallSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSallSystem_descriptor_;
  metadata.reflection = ReqSallSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPurchase::kCharidFieldNumber;
const int ReqPurchase::kCellidFieldNumber;
#endif  // !_MSC_VER

ReqPurchase::ReqPurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPurchase::InitAsDefaultInstance() {
}

ReqPurchase::ReqPurchase(const ReqPurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPurchase::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  cellid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPurchase::~ReqPurchase() {
  SharedDtor();
}

void ReqPurchase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPurchase_descriptor_;
}

const ReqPurchase& ReqPurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trade_2eproto();
  return *default_instance_;
}

ReqPurchase* ReqPurchase::default_instance_ = NULL;

ReqPurchase* ReqPurchase::New() const {
  return new ReqPurchase;
}

void ReqPurchase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    cellid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cellid;
        break;
      }

      // required uint32 cellid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 cellid = 2;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cellid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 cellid = 2;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cellid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPurchase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 cellid = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPurchase::MergeFrom(const ReqPurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPurchase::CopyFrom(const ReqPurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPurchase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqPurchase::Swap(ReqPurchase* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPurchase_descriptor_;
  metadata.reflection = ReqPurchase_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
