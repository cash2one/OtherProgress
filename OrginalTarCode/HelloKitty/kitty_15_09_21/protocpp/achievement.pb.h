// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: achievement.proto

#ifndef PROTOBUF_achievement_2eproto__INCLUDED
#define PROTOBUF_achievement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "task.pb.h"
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_achievement_2eproto();
void protobuf_AssignDesc_achievement_2eproto();
void protobuf_ShutdownFile_achievement_2eproto();

class AchieveMent;
class ReqAllAchieve;
class AckAllAchieve;
class ReqSubmitAchieve;
class AckUpdateAchieve;

// ===================================================================

class AchieveMent : public ::google::protobuf::Message {
 public:
  AchieveMent();
  virtual ~AchieveMent();

  AchieveMent(const AchieveMent& from);

  inline AchieveMent& operator=(const AchieveMent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchieveMent& default_instance();

  void Swap(AchieveMent* other);

  // implements Message ----------------------------------------------

  AchieveMent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchieveMent& from);
  void MergeFrom(const AchieveMent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required uint32 stars = 2;
  inline bool has_stars() const;
  inline void clear_stars();
  static const int kStarsFieldNumber = 2;
  inline ::google::protobuf::uint32 stars() const;
  inline void set_stars(::google::protobuf::uint32 value);

  // required .HelloKittyMsgData.TaskStatus status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::HelloKittyMsgData::TaskStatus status() const;
  inline void set_status(::HelloKittyMsgData::TaskStatus value);

  // required uint32 current = 4;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 4;
  inline ::google::protobuf::uint32 current() const;
  inline void set_current(::google::protobuf::uint32 value);

  // required uint32 total = 5;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 5;
  inline ::google::protobuf::uint32 total() const;
  inline void set_total(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AchieveMent)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_stars();
  inline void clear_has_stars();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 stars_;
  int status_;
  ::google::protobuf::uint32 current_;
  ::google::protobuf::uint32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_achievement_2eproto();
  friend void protobuf_AssignDesc_achievement_2eproto();
  friend void protobuf_ShutdownFile_achievement_2eproto();

  void InitAsDefaultInstance();
  static AchieveMent* default_instance_;
};
// -------------------------------------------------------------------

class ReqAllAchieve : public ::google::protobuf::Message {
 public:
  ReqAllAchieve();
  virtual ~ReqAllAchieve();

  ReqAllAchieve(const ReqAllAchieve& from);

  inline ReqAllAchieve& operator=(const ReqAllAchieve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAllAchieve& default_instance();

  void Swap(ReqAllAchieve* other);

  // implements Message ----------------------------------------------

  ReqAllAchieve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAllAchieve& from);
  void MergeFrom(const ReqAllAchieve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqAllAchieve)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_achievement_2eproto();
  friend void protobuf_AssignDesc_achievement_2eproto();
  friend void protobuf_ShutdownFile_achievement_2eproto();

  void InitAsDefaultInstance();
  static ReqAllAchieve* default_instance_;
};
// -------------------------------------------------------------------

class AckAllAchieve : public ::google::protobuf::Message {
 public:
  AckAllAchieve();
  virtual ~AckAllAchieve();

  AckAllAchieve(const AckAllAchieve& from);

  inline AckAllAchieve& operator=(const AckAllAchieve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckAllAchieve& default_instance();

  void Swap(AckAllAchieve* other);

  // implements Message ----------------------------------------------

  AckAllAchieve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckAllAchieve& from);
  void MergeFrom(const AckAllAchieve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HelloKittyMsgData.AchieveMent achieve = 1;
  inline int achieve_size() const;
  inline void clear_achieve();
  static const int kAchieveFieldNumber = 1;
  inline const ::HelloKittyMsgData::AchieveMent& achieve(int index) const;
  inline ::HelloKittyMsgData::AchieveMent* mutable_achieve(int index);
  inline ::HelloKittyMsgData::AchieveMent* add_achieve();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::AchieveMent >&
      achieve() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::AchieveMent >*
      mutable_achieve();

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckAllAchieve)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::AchieveMent > achieve_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_achievement_2eproto();
  friend void protobuf_AssignDesc_achievement_2eproto();
  friend void protobuf_ShutdownFile_achievement_2eproto();

  void InitAsDefaultInstance();
  static AckAllAchieve* default_instance_;
};
// -------------------------------------------------------------------

class ReqSubmitAchieve : public ::google::protobuf::Message {
 public:
  ReqSubmitAchieve();
  virtual ~ReqSubmitAchieve();

  ReqSubmitAchieve(const ReqSubmitAchieve& from);

  inline ReqSubmitAchieve& operator=(const ReqSubmitAchieve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSubmitAchieve& default_instance();

  void Swap(ReqSubmitAchieve* other);

  // implements Message ----------------------------------------------

  ReqSubmitAchieve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSubmitAchieve& from);
  void MergeFrom(const ReqSubmitAchieve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.ReqSubmitAchieve)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_achievement_2eproto();
  friend void protobuf_AssignDesc_achievement_2eproto();
  friend void protobuf_ShutdownFile_achievement_2eproto();

  void InitAsDefaultInstance();
  static ReqSubmitAchieve* default_instance_;
};
// -------------------------------------------------------------------

class AckUpdateAchieve : public ::google::protobuf::Message {
 public:
  AckUpdateAchieve();
  virtual ~AckUpdateAchieve();

  AckUpdateAchieve(const AckUpdateAchieve& from);

  inline AckUpdateAchieve& operator=(const AckUpdateAchieve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpdateAchieve& default_instance();

  void Swap(AckUpdateAchieve* other);

  // implements Message ----------------------------------------------

  AckUpdateAchieve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUpdateAchieve& from);
  void MergeFrom(const AckUpdateAchieve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HelloKittyMsgData.AchieveMent achieve = 1;
  inline bool has_achieve() const;
  inline void clear_achieve();
  static const int kAchieveFieldNumber = 1;
  inline const ::HelloKittyMsgData::AchieveMent& achieve() const;
  inline ::HelloKittyMsgData::AchieveMent* mutable_achieve();
  inline ::HelloKittyMsgData::AchieveMent* release_achieve();
  inline void set_allocated_achieve(::HelloKittyMsgData::AchieveMent* achieve);

  // @@protoc_insertion_point(class_scope:HelloKittyMsgData.AckUpdateAchieve)
 private:
  inline void set_has_achieve();
  inline void clear_has_achieve();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HelloKittyMsgData::AchieveMent* achieve_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_achievement_2eproto();
  friend void protobuf_AssignDesc_achievement_2eproto();
  friend void protobuf_ShutdownFile_achievement_2eproto();

  void InitAsDefaultInstance();
  static AckUpdateAchieve* default_instance_;
};
// ===================================================================


// ===================================================================

// AchieveMent

// required uint64 id = 1;
inline bool AchieveMent::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchieveMent::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchieveMent::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchieveMent::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 AchieveMent::id() const {
  return id_;
}
inline void AchieveMent::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required uint32 stars = 2;
inline bool AchieveMent::has_stars() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchieveMent::set_has_stars() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchieveMent::clear_has_stars() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchieveMent::clear_stars() {
  stars_ = 0u;
  clear_has_stars();
}
inline ::google::protobuf::uint32 AchieveMent::stars() const {
  return stars_;
}
inline void AchieveMent::set_stars(::google::protobuf::uint32 value) {
  set_has_stars();
  stars_ = value;
}

// required .HelloKittyMsgData.TaskStatus status = 3;
inline bool AchieveMent::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AchieveMent::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AchieveMent::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AchieveMent::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::HelloKittyMsgData::TaskStatus AchieveMent::status() const {
  return static_cast< ::HelloKittyMsgData::TaskStatus >(status_);
}
inline void AchieveMent::set_status(::HelloKittyMsgData::TaskStatus value) {
  assert(::HelloKittyMsgData::TaskStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint32 current = 4;
inline bool AchieveMent::has_current() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AchieveMent::set_has_current() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AchieveMent::clear_has_current() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AchieveMent::clear_current() {
  current_ = 0u;
  clear_has_current();
}
inline ::google::protobuf::uint32 AchieveMent::current() const {
  return current_;
}
inline void AchieveMent::set_current(::google::protobuf::uint32 value) {
  set_has_current();
  current_ = value;
}

// required uint32 total = 5;
inline bool AchieveMent::has_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AchieveMent::set_has_total() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AchieveMent::clear_has_total() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AchieveMent::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 AchieveMent::total() const {
  return total_;
}
inline void AchieveMent::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
}

// -------------------------------------------------------------------

// ReqAllAchieve

// -------------------------------------------------------------------

// AckAllAchieve

// repeated .HelloKittyMsgData.AchieveMent achieve = 1;
inline int AckAllAchieve::achieve_size() const {
  return achieve_.size();
}
inline void AckAllAchieve::clear_achieve() {
  achieve_.Clear();
}
inline const ::HelloKittyMsgData::AchieveMent& AckAllAchieve::achieve(int index) const {
  return achieve_.Get(index);
}
inline ::HelloKittyMsgData::AchieveMent* AckAllAchieve::mutable_achieve(int index) {
  return achieve_.Mutable(index);
}
inline ::HelloKittyMsgData::AchieveMent* AckAllAchieve::add_achieve() {
  return achieve_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::AchieveMent >&
AckAllAchieve::achieve() const {
  return achieve_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloKittyMsgData::AchieveMent >*
AckAllAchieve::mutable_achieve() {
  return &achieve_;
}

// -------------------------------------------------------------------

// ReqSubmitAchieve

// required uint64 id = 1;
inline bool ReqSubmitAchieve::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSubmitAchieve::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSubmitAchieve::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSubmitAchieve::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ReqSubmitAchieve::id() const {
  return id_;
}
inline void ReqSubmitAchieve::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// AckUpdateAchieve

// required .HelloKittyMsgData.AchieveMent achieve = 1;
inline bool AckUpdateAchieve::has_achieve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUpdateAchieve::set_has_achieve() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUpdateAchieve::clear_has_achieve() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUpdateAchieve::clear_achieve() {
  if (achieve_ != NULL) achieve_->::HelloKittyMsgData::AchieveMent::Clear();
  clear_has_achieve();
}
inline const ::HelloKittyMsgData::AchieveMent& AckUpdateAchieve::achieve() const {
  return achieve_ != NULL ? *achieve_ : *default_instance_->achieve_;
}
inline ::HelloKittyMsgData::AchieveMent* AckUpdateAchieve::mutable_achieve() {
  set_has_achieve();
  if (achieve_ == NULL) achieve_ = new ::HelloKittyMsgData::AchieveMent;
  return achieve_;
}
inline ::HelloKittyMsgData::AchieveMent* AckUpdateAchieve::release_achieve() {
  clear_has_achieve();
  ::HelloKittyMsgData::AchieveMent* temp = achieve_;
  achieve_ = NULL;
  return temp;
}
inline void AckUpdateAchieve::set_allocated_achieve(::HelloKittyMsgData::AchieveMent* achieve) {
  delete achieve_;
  achieve_ = achieve;
  if (achieve) {
    set_has_achieve();
  } else {
    clear_has_achieve();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_achievement_2eproto__INCLUDED
