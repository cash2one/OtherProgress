// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atlas.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "atlas.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* ReqAtlas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAtlas_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckAtlas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckAtlas_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckAddAtlas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckAddAtlas_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_atlas_2eproto() {
  protobuf_AddDesc_atlas_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "atlas.proto");
  GOOGLE_CHECK(file != NULL);
  ReqAtlas_descriptor_ = file->message_type(0);
  static const int ReqAtlas_offsets_[1] = {
  };
  ReqAtlas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAtlas_descriptor_,
      ReqAtlas::default_instance_,
      ReqAtlas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAtlas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAtlas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAtlas));
  AckAtlas_descriptor_ = file->message_type(1);
  static const int AckAtlas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAtlas, atlas_),
  };
  AckAtlas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckAtlas_descriptor_,
      AckAtlas::default_instance_,
      AckAtlas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAtlas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAtlas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckAtlas));
  AckAddAtlas_descriptor_ = file->message_type(2);
  static const int AckAddAtlas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAddAtlas, atlas_),
  };
  AckAddAtlas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckAddAtlas_descriptor_,
      AckAddAtlas::default_instance_,
      AckAddAtlas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAddAtlas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAddAtlas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckAddAtlas));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_atlas_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAtlas_descriptor_, &ReqAtlas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckAtlas_descriptor_, &AckAtlas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckAddAtlas_descriptor_, &AckAddAtlas::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_atlas_2eproto() {
  delete ReqAtlas::default_instance_;
  delete ReqAtlas_reflection_;
  delete AckAtlas::default_instance_;
  delete AckAtlas_reflection_;
  delete AckAddAtlas::default_instance_;
  delete AckAddAtlas_reflection_;
}

void protobuf_AddDesc_atlas_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013atlas.proto\022\021HelloKittyMsgData\"\n\n\010ReqA"
    "tlas\"\031\n\010AckAtlas\022\r\n\005atlas\030\001 \003(\r\"\034\n\013AckAd"
    "dAtlas\022\r\n\005atlas\030\001 \002(\r", 101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "atlas.proto", &protobuf_RegisterTypes);
  ReqAtlas::default_instance_ = new ReqAtlas();
  AckAtlas::default_instance_ = new AckAtlas();
  AckAddAtlas::default_instance_ = new AckAddAtlas();
  ReqAtlas::default_instance_->InitAsDefaultInstance();
  AckAtlas::default_instance_->InitAsDefaultInstance();
  AckAddAtlas::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_atlas_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_atlas_2eproto {
  StaticDescriptorInitializer_atlas_2eproto() {
    protobuf_AddDesc_atlas_2eproto();
  }
} static_descriptor_initializer_atlas_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqAtlas::ReqAtlas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAtlas::InitAsDefaultInstance() {
}

ReqAtlas::ReqAtlas(const ReqAtlas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAtlas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAtlas::~ReqAtlas() {
  SharedDtor();
}

void ReqAtlas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAtlas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAtlas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAtlas_descriptor_;
}

const ReqAtlas& ReqAtlas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_atlas_2eproto();
  return *default_instance_;
}

ReqAtlas* ReqAtlas::default_instance_ = NULL;

ReqAtlas* ReqAtlas::New() const {
  return new ReqAtlas;
}

void ReqAtlas::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAtlas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqAtlas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAtlas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAtlas::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAtlas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAtlas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAtlas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAtlas::MergeFrom(const ReqAtlas& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAtlas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAtlas::CopyFrom(const ReqAtlas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAtlas::IsInitialized() const {

  return true;
}

void ReqAtlas::Swap(ReqAtlas* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAtlas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAtlas_descriptor_;
  metadata.reflection = ReqAtlas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckAtlas::kAtlasFieldNumber;
#endif  // !_MSC_VER

AckAtlas::AckAtlas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckAtlas::InitAsDefaultInstance() {
}

AckAtlas::AckAtlas(const AckAtlas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckAtlas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckAtlas::~AckAtlas() {
  SharedDtor();
}

void AckAtlas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckAtlas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckAtlas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckAtlas_descriptor_;
}

const AckAtlas& AckAtlas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_atlas_2eproto();
  return *default_instance_;
}

AckAtlas* AckAtlas::default_instance_ = NULL;

AckAtlas* AckAtlas::New() const {
  return new AckAtlas;
}

void AckAtlas::Clear() {
  atlas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckAtlas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 atlas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atlas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_atlas())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_atlas())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_atlas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckAtlas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 atlas = 1;
  for (int i = 0; i < this->atlas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->atlas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckAtlas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 atlas = 1;
  for (int i = 0; i < this->atlas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->atlas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckAtlas::ByteSize() const {
  int total_size = 0;

  // repeated uint32 atlas = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->atlas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->atlas(i));
    }
    total_size += 1 * this->atlas_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckAtlas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckAtlas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckAtlas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckAtlas::MergeFrom(const AckAtlas& from) {
  GOOGLE_CHECK_NE(&from, this);
  atlas_.MergeFrom(from.atlas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckAtlas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAtlas::CopyFrom(const AckAtlas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAtlas::IsInitialized() const {

  return true;
}

void AckAtlas::Swap(AckAtlas* other) {
  if (other != this) {
    atlas_.Swap(&other->atlas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckAtlas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckAtlas_descriptor_;
  metadata.reflection = AckAtlas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckAddAtlas::kAtlasFieldNumber;
#endif  // !_MSC_VER

AckAddAtlas::AckAddAtlas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckAddAtlas::InitAsDefaultInstance() {
}

AckAddAtlas::AckAddAtlas(const AckAddAtlas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckAddAtlas::SharedCtor() {
  _cached_size_ = 0;
  atlas_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckAddAtlas::~AckAddAtlas() {
  SharedDtor();
}

void AckAddAtlas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckAddAtlas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckAddAtlas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckAddAtlas_descriptor_;
}

const AckAddAtlas& AckAddAtlas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_atlas_2eproto();
  return *default_instance_;
}

AckAddAtlas* AckAddAtlas::default_instance_ = NULL;

AckAddAtlas* AckAddAtlas::New() const {
  return new AckAddAtlas;
}

void AckAddAtlas::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atlas_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckAddAtlas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 atlas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atlas_)));
          set_has_atlas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckAddAtlas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 atlas = 1;
  if (has_atlas()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atlas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckAddAtlas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 atlas = 1;
  if (has_atlas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atlas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckAddAtlas::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 atlas = 1;
    if (has_atlas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atlas());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckAddAtlas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckAddAtlas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckAddAtlas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckAddAtlas::MergeFrom(const AckAddAtlas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atlas()) {
      set_atlas(from.atlas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckAddAtlas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAddAtlas::CopyFrom(const AckAddAtlas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAddAtlas::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckAddAtlas::Swap(AckAddAtlas* other) {
  if (other != this) {
    std::swap(atlas_, other->atlas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckAddAtlas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckAddAtlas_descriptor_;
  metadata.reflection = AckAddAtlas_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
