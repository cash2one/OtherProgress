// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paper.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "paper.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* ReqPaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPaper_reflection_ = NULL;
const ::google::protobuf::Descriptor* PaperData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaperData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPaper_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdatePaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdatePaper_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpPaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpPaper_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMakePaperSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMakePaperSuccess_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_paper_2eproto() {
  protobuf_AddDesc_paper_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "paper.proto");
  GOOGLE_CHECK(file != NULL);
  ReqPaper_descriptor_ = file->message_type(0);
  static const int ReqPaper_offsets_[1] = {
  };
  ReqPaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPaper_descriptor_,
      ReqPaper::default_instance_,
      ReqPaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPaper));
  PaperData_descriptor_ = file->message_type(1);
  static const int PaperData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaperData, paper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaperData, produceflg_),
  };
  PaperData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PaperData_descriptor_,
      PaperData::default_instance_,
      PaperData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaperData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaperData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PaperData));
  AckPaper_descriptor_ = file->message_type(2);
  static const int AckPaper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPaper, paper_),
  };
  AckPaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPaper_descriptor_,
      AckPaper::default_instance_,
      AckPaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPaper));
  AckUpdatePaper_descriptor_ = file->message_type(3);
  static const int AckUpdatePaper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdatePaper, paper_),
  };
  AckUpdatePaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdatePaper_descriptor_,
      AckUpdatePaper::default_instance_,
      AckUpdatePaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdatePaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdatePaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdatePaper));
  ReqOpPaper_descriptor_ = file->message_type(4);
  static const int ReqOpPaper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpPaper, paper_),
  };
  ReqOpPaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpPaper_descriptor_,
      ReqOpPaper::default_instance_,
      ReqOpPaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpPaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpPaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpPaper));
  AckMakePaperSuccess_descriptor_ = file->message_type(5);
  static const int AckMakePaperSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMakePaperSuccess, paper_),
  };
  AckMakePaperSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckMakePaperSuccess_descriptor_,
      AckMakePaperSuccess::default_instance_,
      AckMakePaperSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMakePaperSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMakePaperSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckMakePaperSuccess));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_paper_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPaper_descriptor_, &ReqPaper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PaperData_descriptor_, &PaperData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPaper_descriptor_, &AckPaper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdatePaper_descriptor_, &AckUpdatePaper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpPaper_descriptor_, &ReqOpPaper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckMakePaperSuccess_descriptor_, &AckMakePaperSuccess::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_paper_2eproto() {
  delete ReqPaper::default_instance_;
  delete ReqPaper_reflection_;
  delete PaperData::default_instance_;
  delete PaperData_reflection_;
  delete AckPaper::default_instance_;
  delete AckPaper_reflection_;
  delete AckUpdatePaper::default_instance_;
  delete AckUpdatePaper_reflection_;
  delete ReqOpPaper::default_instance_;
  delete ReqOpPaper_reflection_;
  delete AckMakePaperSuccess::default_instance_;
  delete AckMakePaperSuccess_reflection_;
}

void protobuf_AddDesc_paper_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013paper.proto\022\021HelloKittyMsgData\"\n\n\010ReqP"
    "aper\".\n\tPaperData\022\r\n\005paper\030\001 \002(\r\022\022\n\nprod"
    "uceflg\030\002 \002(\010\"7\n\010AckPaper\022+\n\005paper\030\001 \003(\0132"
    "\034.HelloKittyMsgData.PaperData\"=\n\016AckUpda"
    "tePaper\022+\n\005paper\030\001 \002(\0132\034.HelloKittyMsgDa"
    "ta.PaperData\"\033\n\nReqOpPaper\022\r\n\005paper\030\001 \002("
    "\r\"B\n\023AckMakePaperSuccess\022+\n\005paper\030\001 \002(\0132"
    "\034.HelloKittyMsgData.PaperData", 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "paper.proto", &protobuf_RegisterTypes);
  ReqPaper::default_instance_ = new ReqPaper();
  PaperData::default_instance_ = new PaperData();
  AckPaper::default_instance_ = new AckPaper();
  AckUpdatePaper::default_instance_ = new AckUpdatePaper();
  ReqOpPaper::default_instance_ = new ReqOpPaper();
  AckMakePaperSuccess::default_instance_ = new AckMakePaperSuccess();
  ReqPaper::default_instance_->InitAsDefaultInstance();
  PaperData::default_instance_->InitAsDefaultInstance();
  AckPaper::default_instance_->InitAsDefaultInstance();
  AckUpdatePaper::default_instance_->InitAsDefaultInstance();
  ReqOpPaper::default_instance_->InitAsDefaultInstance();
  AckMakePaperSuccess::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_paper_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_paper_2eproto {
  StaticDescriptorInitializer_paper_2eproto() {
    protobuf_AddDesc_paper_2eproto();
  }
} static_descriptor_initializer_paper_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqPaper::ReqPaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPaper::InitAsDefaultInstance() {
}

ReqPaper::ReqPaper(const ReqPaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPaper::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPaper::~ReqPaper() {
  SharedDtor();
}

void ReqPaper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPaper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPaper_descriptor_;
}

const ReqPaper& ReqPaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paper_2eproto();
  return *default_instance_;
}

ReqPaper* ReqPaper::default_instance_ = NULL;

ReqPaper* ReqPaper::New() const {
  return new ReqPaper;
}

void ReqPaper::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqPaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPaper::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPaper::MergeFrom(const ReqPaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPaper::CopyFrom(const ReqPaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPaper::IsInitialized() const {

  return true;
}

void ReqPaper::Swap(ReqPaper* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPaper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPaper_descriptor_;
  metadata.reflection = ReqPaper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PaperData::kPaperFieldNumber;
const int PaperData::kProduceflgFieldNumber;
#endif  // !_MSC_VER

PaperData::PaperData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PaperData::InitAsDefaultInstance() {
}

PaperData::PaperData(const PaperData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PaperData::SharedCtor() {
  _cached_size_ = 0;
  paper_ = 0u;
  produceflg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PaperData::~PaperData() {
  SharedDtor();
}

void PaperData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PaperData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaperData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaperData_descriptor_;
}

const PaperData& PaperData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paper_2eproto();
  return *default_instance_;
}

PaperData* PaperData::default_instance_ = NULL;

PaperData* PaperData::New() const {
  return new PaperData;
}

void PaperData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    paper_ = 0u;
    produceflg_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PaperData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 paper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paper_)));
          set_has_paper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_produceflg;
        break;
      }

      // required bool produceflg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produceflg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &produceflg_)));
          set_has_produceflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PaperData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 paper = 1;
  if (has_paper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->paper(), output);
  }

  // required bool produceflg = 2;
  if (has_produceflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->produceflg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PaperData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 paper = 1;
  if (has_paper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->paper(), target);
  }

  // required bool produceflg = 2;
  if (has_produceflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->produceflg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PaperData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 paper = 1;
    if (has_paper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paper());
    }

    // required bool produceflg = 2;
    if (has_produceflg()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaperData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PaperData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PaperData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PaperData::MergeFrom(const PaperData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paper()) {
      set_paper(from.paper());
    }
    if (from.has_produceflg()) {
      set_produceflg(from.produceflg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PaperData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaperData::CopyFrom(const PaperData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaperData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PaperData::Swap(PaperData* other) {
  if (other != this) {
    std::swap(paper_, other->paper_);
    std::swap(produceflg_, other->produceflg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PaperData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaperData_descriptor_;
  metadata.reflection = PaperData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPaper::kPaperFieldNumber;
#endif  // !_MSC_VER

AckPaper::AckPaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPaper::InitAsDefaultInstance() {
}

AckPaper::AckPaper(const AckPaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPaper::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPaper::~AckPaper() {
  SharedDtor();
}

void AckPaper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPaper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPaper_descriptor_;
}

const AckPaper& AckPaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paper_2eproto();
  return *default_instance_;
}

AckPaper* AckPaper::default_instance_ = NULL;

AckPaper* AckPaper::New() const {
  return new AckPaper;
}

void AckPaper::Clear() {
  paper_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelloKittyMsgData.PaperData paper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_paper;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelloKittyMsgData.PaperData paper = 1;
  for (int i = 0; i < this->paper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->paper(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelloKittyMsgData.PaperData paper = 1;
  for (int i = 0; i < this->paper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->paper(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPaper::ByteSize() const {
  int total_size = 0;

  // repeated .HelloKittyMsgData.PaperData paper = 1;
  total_size += 1 * this->paper_size();
  for (int i = 0; i < this->paper_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paper(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPaper::MergeFrom(const AckPaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  paper_.MergeFrom(from.paper_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPaper::CopyFrom(const AckPaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPaper::IsInitialized() const {

  for (int i = 0; i < paper_size(); i++) {
    if (!this->paper(i).IsInitialized()) return false;
  }
  return true;
}

void AckPaper::Swap(AckPaper* other) {
  if (other != this) {
    paper_.Swap(&other->paper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPaper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPaper_descriptor_;
  metadata.reflection = AckPaper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdatePaper::kPaperFieldNumber;
#endif  // !_MSC_VER

AckUpdatePaper::AckUpdatePaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdatePaper::InitAsDefaultInstance() {
  paper_ = const_cast< ::HelloKittyMsgData::PaperData*>(&::HelloKittyMsgData::PaperData::default_instance());
}

AckUpdatePaper::AckUpdatePaper(const AckUpdatePaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdatePaper::SharedCtor() {
  _cached_size_ = 0;
  paper_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdatePaper::~AckUpdatePaper() {
  SharedDtor();
}

void AckUpdatePaper::SharedDtor() {
  if (this != default_instance_) {
    delete paper_;
  }
}

void AckUpdatePaper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdatePaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdatePaper_descriptor_;
}

const AckUpdatePaper& AckUpdatePaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paper_2eproto();
  return *default_instance_;
}

AckUpdatePaper* AckUpdatePaper::default_instance_ = NULL;

AckUpdatePaper* AckUpdatePaper::New() const {
  return new AckUpdatePaper;
}

void AckUpdatePaper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_paper()) {
      if (paper_ != NULL) paper_->::HelloKittyMsgData::PaperData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdatePaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.PaperData paper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdatePaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.PaperData paper = 1;
  if (has_paper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->paper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdatePaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.PaperData paper = 1;
  if (has_paper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->paper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdatePaper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.PaperData paper = 1;
    if (has_paper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdatePaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdatePaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdatePaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdatePaper::MergeFrom(const AckUpdatePaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paper()) {
      mutable_paper()->::HelloKittyMsgData::PaperData::MergeFrom(from.paper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdatePaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdatePaper::CopyFrom(const AckUpdatePaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdatePaper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_paper()) {
    if (!this->paper().IsInitialized()) return false;
  }
  return true;
}

void AckUpdatePaper::Swap(AckUpdatePaper* other) {
  if (other != this) {
    std::swap(paper_, other->paper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdatePaper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdatePaper_descriptor_;
  metadata.reflection = AckUpdatePaper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpPaper::kPaperFieldNumber;
#endif  // !_MSC_VER

ReqOpPaper::ReqOpPaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpPaper::InitAsDefaultInstance() {
}

ReqOpPaper::ReqOpPaper(const ReqOpPaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpPaper::SharedCtor() {
  _cached_size_ = 0;
  paper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpPaper::~ReqOpPaper() {
  SharedDtor();
}

void ReqOpPaper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpPaper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpPaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpPaper_descriptor_;
}

const ReqOpPaper& ReqOpPaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paper_2eproto();
  return *default_instance_;
}

ReqOpPaper* ReqOpPaper::default_instance_ = NULL;

ReqOpPaper* ReqOpPaper::New() const {
  return new ReqOpPaper;
}

void ReqOpPaper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    paper_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpPaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 paper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paper_)));
          set_has_paper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpPaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 paper = 1;
  if (has_paper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->paper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpPaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 paper = 1;
  if (has_paper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->paper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpPaper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 paper = 1;
    if (has_paper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpPaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpPaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpPaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpPaper::MergeFrom(const ReqOpPaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paper()) {
      set_paper(from.paper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpPaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpPaper::CopyFrom(const ReqOpPaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpPaper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOpPaper::Swap(ReqOpPaper* other) {
  if (other != this) {
    std::swap(paper_, other->paper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpPaper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpPaper_descriptor_;
  metadata.reflection = ReqOpPaper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckMakePaperSuccess::kPaperFieldNumber;
#endif  // !_MSC_VER

AckMakePaperSuccess::AckMakePaperSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckMakePaperSuccess::InitAsDefaultInstance() {
  paper_ = const_cast< ::HelloKittyMsgData::PaperData*>(&::HelloKittyMsgData::PaperData::default_instance());
}

AckMakePaperSuccess::AckMakePaperSuccess(const AckMakePaperSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckMakePaperSuccess::SharedCtor() {
  _cached_size_ = 0;
  paper_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMakePaperSuccess::~AckMakePaperSuccess() {
  SharedDtor();
}

void AckMakePaperSuccess::SharedDtor() {
  if (this != default_instance_) {
    delete paper_;
  }
}

void AckMakePaperSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMakePaperSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMakePaperSuccess_descriptor_;
}

const AckMakePaperSuccess& AckMakePaperSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paper_2eproto();
  return *default_instance_;
}

AckMakePaperSuccess* AckMakePaperSuccess::default_instance_ = NULL;

AckMakePaperSuccess* AckMakePaperSuccess::New() const {
  return new AckMakePaperSuccess;
}

void AckMakePaperSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_paper()) {
      if (paper_ != NULL) paper_->::HelloKittyMsgData::PaperData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckMakePaperSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.PaperData paper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckMakePaperSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.PaperData paper = 1;
  if (has_paper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->paper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckMakePaperSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.PaperData paper = 1;
  if (has_paper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->paper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckMakePaperSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.PaperData paper = 1;
    if (has_paper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMakePaperSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckMakePaperSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckMakePaperSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckMakePaperSuccess::MergeFrom(const AckMakePaperSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paper()) {
      mutable_paper()->::HelloKittyMsgData::PaperData::MergeFrom(from.paper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckMakePaperSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMakePaperSuccess::CopyFrom(const AckMakePaperSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMakePaperSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_paper()) {
    if (!this->paper().IsInitialized()) return false;
  }
  return true;
}

void AckMakePaperSuccess::Swap(AckMakePaperSuccess* other) {
  if (other != this) {
    std::swap(paper_, other->paper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckMakePaperSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMakePaperSuccess_descriptor_;
  metadata.reflection = AckMakePaperSuccess_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
