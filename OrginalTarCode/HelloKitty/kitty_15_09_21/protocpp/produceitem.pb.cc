// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: produceitem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "produceitem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloKittyMsgData {

namespace {

const ::google::protobuf::Descriptor* FunctionCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreFunctionCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreFunctionCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqFunctionCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqFunctionCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckProduceItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckProduceItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFunctionCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFunctionCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqFunctionCellWork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqFunctionCellWork_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBTPOpReturnFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBTPOpReturnFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqFunctionOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqFunctionOp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlaceStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FunctionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BTPOpFailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BTPOpType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_produceitem_2eproto() {
  protobuf_AddDesc_produceitem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "produceitem.proto");
  GOOGLE_CHECK(file != NULL);
  FunctionCell_descriptor_ = file->message_type(0);
  static const int FunctionCell_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCell, placeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCell, produceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCell, worktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCell, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCell, status_),
  };
  FunctionCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionCell_descriptor_,
      FunctionCell::default_instance_,
      FunctionCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionCell));
  StoreFunctionCell_descriptor_ = file->message_type(1);
  static const int StoreFunctionCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFunctionCell, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFunctionCell, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFunctionCell, functioncell_),
  };
  StoreFunctionCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreFunctionCell_descriptor_,
      StoreFunctionCell::default_instance_,
      StoreFunctionCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFunctionCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreFunctionCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreFunctionCell));
  ReqFunctionCell_descriptor_ = file->message_type(2);
  static const int ReqFunctionCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCell, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCell, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCell, placeid_),
  };
  ReqFunctionCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqFunctionCell_descriptor_,
      ReqFunctionCell::default_instance_,
      ReqFunctionCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqFunctionCell));
  AckProduceItem_descriptor_ = file->message_type(3);
  static const int AckProduceItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProduceItem, produceitem_),
  };
  AckProduceItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckProduceItem_descriptor_,
      AckProduceItem::default_instance_,
      AckProduceItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProduceItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckProduceItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckProduceItem));
  AckFunctionCell_descriptor_ = file->message_type(4);
  static const int AckFunctionCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFunctionCell, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFunctionCell, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFunctionCell, functioncell_),
  };
  AckFunctionCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFunctionCell_descriptor_,
      AckFunctionCell::default_instance_,
      AckFunctionCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFunctionCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFunctionCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFunctionCell));
  ReqFunctionCellWork_descriptor_ = file->message_type(5);
  static const int ReqFunctionCellWork_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCellWork, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCellWork, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCellWork, placeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCellWork, produceid_),
  };
  ReqFunctionCellWork_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqFunctionCellWork_descriptor_,
      ReqFunctionCellWork::default_instance_,
      ReqFunctionCellWork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCellWork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionCellWork, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqFunctionCellWork));
  AckBTPOpReturnFail_descriptor_ = file->message_type(6);
  static const int AckBTPOpReturnFail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBTPOpReturnFail, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBTPOpReturnFail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBTPOpReturnFail, placeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBTPOpReturnFail, commoncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBTPOpReturnFail, code_),
  };
  AckBTPOpReturnFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBTPOpReturnFail_descriptor_,
      AckBTPOpReturnFail::default_instance_,
      AckBTPOpReturnFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBTPOpReturnFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBTPOpReturnFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBTPOpReturnFail));
  ReqFunctionOp_descriptor_ = file->message_type(7);
  static const int ReqFunctionOp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionOp, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionOp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionOp, placeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionOp, optype_),
  };
  ReqFunctionOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqFunctionOp_descriptor_,
      ReqFunctionOp::default_instance_,
      ReqFunctionOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFunctionOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqFunctionOp));
  PlaceStatusType_descriptor_ = file->enum_type(0);
  FunctionType_descriptor_ = file->enum_type(1);
  BTPOpFailType_descriptor_ = file->enum_type(2);
  BTPOpType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_produceitem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionCell_descriptor_, &FunctionCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreFunctionCell_descriptor_, &StoreFunctionCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqFunctionCell_descriptor_, &ReqFunctionCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckProduceItem_descriptor_, &AckProduceItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFunctionCell_descriptor_, &AckFunctionCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqFunctionCellWork_descriptor_, &ReqFunctionCellWork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBTPOpReturnFail_descriptor_, &AckBTPOpReturnFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqFunctionOp_descriptor_, &ReqFunctionOp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_produceitem_2eproto() {
  delete FunctionCell::default_instance_;
  delete FunctionCell_reflection_;
  delete StoreFunctionCell::default_instance_;
  delete StoreFunctionCell_reflection_;
  delete ReqFunctionCell::default_instance_;
  delete ReqFunctionCell_reflection_;
  delete AckProduceItem::default_instance_;
  delete AckProduceItem_reflection_;
  delete AckFunctionCell::default_instance_;
  delete AckFunctionCell_reflection_;
  delete ReqFunctionCellWork::default_instance_;
  delete ReqFunctionCellWork_reflection_;
  delete AckBTPOpReturnFail::default_instance_;
  delete AckBTPOpReturnFail_reflection_;
  delete ReqFunctionOp::default_instance_;
  delete ReqFunctionOp_reflection_;
}

void protobuf_AddDesc_produceitem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::HelloKittyMsgData::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021produceitem.proto\022\021HelloKittyMsgData\032\014"
    "common.proto\"\212\001\n\014FunctionCell\022\017\n\007placeid"
    "\030\001 \002(\r\022\021\n\tproduceid\030\002 \002(\r\022\020\n\010worktime\030\003 "
    "\002(\r\022\020\n\010lasttime\030\004 \002(\r\0222\n\006status\030\005 \002(\0162\"."
    "HelloKittyMsgData.PlaceStatusType\"\211\001\n\021St"
    "oreFunctionCell\022\016\n\006tempid\030\001 \002(\004\022-\n\004type\030"
    "\002 \002(\0162\037.HelloKittyMsgData.FunctionType\0225"
    "\n\014functioncell\030\003 \003(\0132\037.HelloKittyMsgData"
    ".FunctionCell\"d\n\017ReqFunctionCell\022\016\n\006temp"
    "id\030\001 \002(\004\022-\n\004type\030\002 \002(\0162\037.HelloKittyMsgDa"
    "ta.FunctionType\022\022\n\007placeid\030\003 \002(\r:\0010\"K\n\016A"
    "ckProduceItem\0229\n\013produceitem\030\001 \002(\0132$.Hel"
    "loKittyMsgData.StoreFunctionCell\"\207\001\n\017Ack"
    "FunctionCell\022\016\n\006tempid\030\001 \002(\004\022-\n\004type\030\002 \002"
    "(\0162\037.HelloKittyMsgData.FunctionType\0225\n\014f"
    "unctioncell\030\003 \003(\0132\037.HelloKittyMsgData.Fu"
    "nctionCell\"{\n\023ReqFunctionCellWork\022\016\n\006tem"
    "pid\030\001 \002(\004\022-\n\004type\030\002 \002(\0162\037.HelloKittyMsgD"
    "ata.FunctionType\022\022\n\007placeid\030\003 \002(\r:\0010\022\021\n\t"
    "produceid\030\004 \002(\r\"\312\001\n\022AckBTPOpReturnFail\022\016"
    "\n\006tempid\030\001 \002(\004\022-\n\004type\030\002 \002(\0162\037.HelloKitt"
    "yMsgData.FunctionType\022\017\n\007placeid\030\003 \002(\r\0224"
    "\n\ncommoncode\030\004 \002(\0162 .HelloKittyMsgData.E"
    "rrorCodeType\022.\n\004code\030\005 \002(\0162 .HelloKittyM"
    "sgData.BTPOpFailType\"\215\001\n\rReqFunctionOp\022\016"
    "\n\006tempid\030\001 \002(\004\022-\n\004type\030\002 \002(\0162\037.HelloKitt"
    "yMsgData.FunctionType\022\017\n\007placeid\030\003 \002(\r\022,"
    "\n\006optype\030\004 \002(\0162\034.HelloKittyMsgData.BTPOp"
    "Type*\211\001\n\017PlaceStatusType\022\026\n\022Place_Status"
    "_Empty\020\000\022\030\n\024Place_Status_Suppend\020\001\022\025\n\021Pl"
    "ace_Status_Work\020\002\022\025\n\021Place_Status_Wait\020\003"
    "\022\026\n\022Place_Status_Close\020\004*F\n\014FunctionType"
    "\022\031\n\025Function_Type_Produce\020\000\022\033\n\027Function_"
    "Type_Composite\020\001*\276\001\n\rBTPOpFailType\022\017\n\013BT"
    "P_Occcupy\020\000\022\r\n\tBTP_Close\020\001\022\014\n\010BTP_Busy\020\002"
    "\022\030\n\024BTP_Not_Produce_Item\020\003\022\032\n\026BTP_Not_Co"
    "mposite_Item\020\004\022\017\n\013BTP_Is_Open\020\005\022\023\n\017BTP_I"
    "s_Not_Busy\020\006\022\023\n\017BTP_Is_Not_Wait\020\007\022\016\n\nBTP"
    "_Is_Max\020\010*M\n\tBTPOpType\022\023\n\017BTP_Op_Purchas"
    "e\020\000\022\023\n\017BTP_Op_Get_Item\020\001\022\026\n\022BTP_Op_Purch"
    "ase_Cd\020\002", 1608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "produceitem.proto", &protobuf_RegisterTypes);
  FunctionCell::default_instance_ = new FunctionCell();
  StoreFunctionCell::default_instance_ = new StoreFunctionCell();
  ReqFunctionCell::default_instance_ = new ReqFunctionCell();
  AckProduceItem::default_instance_ = new AckProduceItem();
  AckFunctionCell::default_instance_ = new AckFunctionCell();
  ReqFunctionCellWork::default_instance_ = new ReqFunctionCellWork();
  AckBTPOpReturnFail::default_instance_ = new AckBTPOpReturnFail();
  ReqFunctionOp::default_instance_ = new ReqFunctionOp();
  FunctionCell::default_instance_->InitAsDefaultInstance();
  StoreFunctionCell::default_instance_->InitAsDefaultInstance();
  ReqFunctionCell::default_instance_->InitAsDefaultInstance();
  AckProduceItem::default_instance_->InitAsDefaultInstance();
  AckFunctionCell::default_instance_->InitAsDefaultInstance();
  ReqFunctionCellWork::default_instance_->InitAsDefaultInstance();
  AckBTPOpReturnFail::default_instance_->InitAsDefaultInstance();
  ReqFunctionOp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_produceitem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_produceitem_2eproto {
  StaticDescriptorInitializer_produceitem_2eproto() {
    protobuf_AddDesc_produceitem_2eproto();
  }
} static_descriptor_initializer_produceitem_2eproto_;
const ::google::protobuf::EnumDescriptor* PlaceStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceStatusType_descriptor_;
}
bool PlaceStatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FunctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionType_descriptor_;
}
bool FunctionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BTPOpFailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BTPOpFailType_descriptor_;
}
bool BTPOpFailType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BTPOpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BTPOpType_descriptor_;
}
bool BTPOpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionCell::kPlaceidFieldNumber;
const int FunctionCell::kProduceidFieldNumber;
const int FunctionCell::kWorktimeFieldNumber;
const int FunctionCell::kLasttimeFieldNumber;
const int FunctionCell::kStatusFieldNumber;
#endif  // !_MSC_VER

FunctionCell::FunctionCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionCell::InitAsDefaultInstance() {
}

FunctionCell::FunctionCell(const FunctionCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionCell::SharedCtor() {
  _cached_size_ = 0;
  placeid_ = 0u;
  produceid_ = 0u;
  worktime_ = 0u;
  lasttime_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionCell::~FunctionCell() {
  SharedDtor();
}

void FunctionCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionCell_descriptor_;
}

const FunctionCell& FunctionCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_produceitem_2eproto();
  return *default_instance_;
}

FunctionCell* FunctionCell::default_instance_ = NULL;

FunctionCell* FunctionCell::New() const {
  return new FunctionCell;
}

void FunctionCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    placeid_ = 0u;
    produceid_ = 0u;
    worktime_ = 0u;
    lasttime_ = 0u;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 placeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &placeid_)));
          set_has_placeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_produceid;
        break;
      }

      // required uint32 produceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &produceid_)));
          set_has_produceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_worktime;
        break;
      }

      // required uint32 worktime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worktime_)));
          set_has_worktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lasttime;
        break;
      }

      // required uint32 lasttime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required .HelloKittyMsgData.PlaceStatusType status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::PlaceStatusType_IsValid(value)) {
            set_status(static_cast< ::HelloKittyMsgData::PlaceStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 placeid = 1;
  if (has_placeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->placeid(), output);
  }

  // required uint32 produceid = 2;
  if (has_produceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->produceid(), output);
  }

  // required uint32 worktime = 3;
  if (has_worktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->worktime(), output);
  }

  // required uint32 lasttime = 4;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lasttime(), output);
  }

  // required .HelloKittyMsgData.PlaceStatusType status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 placeid = 1;
  if (has_placeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->placeid(), target);
  }

  // required uint32 produceid = 2;
  if (has_produceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->produceid(), target);
  }

  // required uint32 worktime = 3;
  if (has_worktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->worktime(), target);
  }

  // required uint32 lasttime = 4;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lasttime(), target);
  }

  // required .HelloKittyMsgData.PlaceStatusType status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 placeid = 1;
    if (has_placeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->placeid());
    }

    // required uint32 produceid = 2;
    if (has_produceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->produceid());
    }

    // required uint32 worktime = 3;
    if (has_worktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worktime());
    }

    // required uint32 lasttime = 4;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lasttime());
    }

    // required .HelloKittyMsgData.PlaceStatusType status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionCell::MergeFrom(const FunctionCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placeid()) {
      set_placeid(from.placeid());
    }
    if (from.has_produceid()) {
      set_produceid(from.produceid());
    }
    if (from.has_worktime()) {
      set_worktime(from.worktime());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionCell::CopyFrom(const FunctionCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FunctionCell::Swap(FunctionCell* other) {
  if (other != this) {
    std::swap(placeid_, other->placeid_);
    std::swap(produceid_, other->produceid_);
    std::swap(worktime_, other->worktime_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionCell_descriptor_;
  metadata.reflection = FunctionCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreFunctionCell::kTempidFieldNumber;
const int StoreFunctionCell::kTypeFieldNumber;
const int StoreFunctionCell::kFunctioncellFieldNumber;
#endif  // !_MSC_VER

StoreFunctionCell::StoreFunctionCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreFunctionCell::InitAsDefaultInstance() {
}

StoreFunctionCell::StoreFunctionCell(const StoreFunctionCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreFunctionCell::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreFunctionCell::~StoreFunctionCell() {
  SharedDtor();
}

void StoreFunctionCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreFunctionCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreFunctionCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreFunctionCell_descriptor_;
}

const StoreFunctionCell& StoreFunctionCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_produceitem_2eproto();
  return *default_instance_;
}

StoreFunctionCell* StoreFunctionCell::default_instance_ = NULL;

StoreFunctionCell* StoreFunctionCell::New() const {
  return new StoreFunctionCell;
}

void StoreFunctionCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  functioncell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreFunctionCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .HelloKittyMsgData.FunctionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FunctionType_IsValid(value)) {
            set_type(static_cast< ::HelloKittyMsgData::FunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_functioncell;
        break;
      }

      // repeated .HelloKittyMsgData.FunctionCell functioncell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functioncell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functioncell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_functioncell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreFunctionCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .HelloKittyMsgData.FunctionCell functioncell = 3;
  for (int i = 0; i < this->functioncell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->functioncell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreFunctionCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .HelloKittyMsgData.FunctionCell functioncell = 3;
  for (int i = 0; i < this->functioncell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->functioncell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreFunctionCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.FunctionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .HelloKittyMsgData.FunctionCell functioncell = 3;
  total_size += 1 * this->functioncell_size();
  for (int i = 0; i < this->functioncell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functioncell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreFunctionCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreFunctionCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreFunctionCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreFunctionCell::MergeFrom(const StoreFunctionCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  functioncell_.MergeFrom(from.functioncell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreFunctionCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreFunctionCell::CopyFrom(const StoreFunctionCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreFunctionCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < functioncell_size(); i++) {
    if (!this->functioncell(i).IsInitialized()) return false;
  }
  return true;
}

void StoreFunctionCell::Swap(StoreFunctionCell* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    functioncell_.Swap(&other->functioncell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreFunctionCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreFunctionCell_descriptor_;
  metadata.reflection = StoreFunctionCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqFunctionCell::kTempidFieldNumber;
const int ReqFunctionCell::kTypeFieldNumber;
const int ReqFunctionCell::kPlaceidFieldNumber;
#endif  // !_MSC_VER

ReqFunctionCell::ReqFunctionCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqFunctionCell::InitAsDefaultInstance() {
}

ReqFunctionCell::ReqFunctionCell(const ReqFunctionCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqFunctionCell::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  placeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqFunctionCell::~ReqFunctionCell() {
  SharedDtor();
}

void ReqFunctionCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqFunctionCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFunctionCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqFunctionCell_descriptor_;
}

const ReqFunctionCell& ReqFunctionCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_produceitem_2eproto();
  return *default_instance_;
}

ReqFunctionCell* ReqFunctionCell::default_instance_ = NULL;

ReqFunctionCell* ReqFunctionCell::New() const {
  return new ReqFunctionCell;
}

void ReqFunctionCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    placeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqFunctionCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .HelloKittyMsgData.FunctionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FunctionType_IsValid(value)) {
            set_type(static_cast< ::HelloKittyMsgData::FunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_placeid;
        break;
      }

      // required uint32 placeid = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_placeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &placeid_)));
          set_has_placeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqFunctionCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 placeid = 3 [default = 0];
  if (has_placeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->placeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqFunctionCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 placeid = 3 [default = 0];
  if (has_placeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->placeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqFunctionCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.FunctionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 placeid = 3 [default = 0];
    if (has_placeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->placeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFunctionCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqFunctionCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqFunctionCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqFunctionCell::MergeFrom(const ReqFunctionCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_placeid()) {
      set_placeid(from.placeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqFunctionCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFunctionCell::CopyFrom(const ReqFunctionCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFunctionCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqFunctionCell::Swap(ReqFunctionCell* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    std::swap(placeid_, other->placeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqFunctionCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqFunctionCell_descriptor_;
  metadata.reflection = ReqFunctionCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckProduceItem::kProduceitemFieldNumber;
#endif  // !_MSC_VER

AckProduceItem::AckProduceItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckProduceItem::InitAsDefaultInstance() {
  produceitem_ = const_cast< ::HelloKittyMsgData::StoreFunctionCell*>(&::HelloKittyMsgData::StoreFunctionCell::default_instance());
}

AckProduceItem::AckProduceItem(const AckProduceItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckProduceItem::SharedCtor() {
  _cached_size_ = 0;
  produceitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckProduceItem::~AckProduceItem() {
  SharedDtor();
}

void AckProduceItem::SharedDtor() {
  if (this != default_instance_) {
    delete produceitem_;
  }
}

void AckProduceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckProduceItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckProduceItem_descriptor_;
}

const AckProduceItem& AckProduceItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_produceitem_2eproto();
  return *default_instance_;
}

AckProduceItem* AckProduceItem::default_instance_ = NULL;

AckProduceItem* AckProduceItem::New() const {
  return new AckProduceItem;
}

void AckProduceItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_produceitem()) {
      if (produceitem_ != NULL) produceitem_->::HelloKittyMsgData::StoreFunctionCell::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckProduceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HelloKittyMsgData.StoreFunctionCell produceitem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_produceitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckProduceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HelloKittyMsgData.StoreFunctionCell produceitem = 1;
  if (has_produceitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->produceitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckProduceItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HelloKittyMsgData.StoreFunctionCell produceitem = 1;
  if (has_produceitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->produceitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckProduceItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HelloKittyMsgData.StoreFunctionCell produceitem = 1;
    if (has_produceitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->produceitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckProduceItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckProduceItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckProduceItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckProduceItem::MergeFrom(const AckProduceItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_produceitem()) {
      mutable_produceitem()->::HelloKittyMsgData::StoreFunctionCell::MergeFrom(from.produceitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckProduceItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckProduceItem::CopyFrom(const AckProduceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckProduceItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_produceitem()) {
    if (!this->produceitem().IsInitialized()) return false;
  }
  return true;
}

void AckProduceItem::Swap(AckProduceItem* other) {
  if (other != this) {
    std::swap(produceitem_, other->produceitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckProduceItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckProduceItem_descriptor_;
  metadata.reflection = AckProduceItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFunctionCell::kTempidFieldNumber;
const int AckFunctionCell::kTypeFieldNumber;
const int AckFunctionCell::kFunctioncellFieldNumber;
#endif  // !_MSC_VER

AckFunctionCell::AckFunctionCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFunctionCell::InitAsDefaultInstance() {
}

AckFunctionCell::AckFunctionCell(const AckFunctionCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFunctionCell::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFunctionCell::~AckFunctionCell() {
  SharedDtor();
}

void AckFunctionCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckFunctionCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFunctionCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFunctionCell_descriptor_;
}

const AckFunctionCell& AckFunctionCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_produceitem_2eproto();
  return *default_instance_;
}

AckFunctionCell* AckFunctionCell::default_instance_ = NULL;

AckFunctionCell* AckFunctionCell::New() const {
  return new AckFunctionCell;
}

void AckFunctionCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  functioncell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFunctionCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .HelloKittyMsgData.FunctionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FunctionType_IsValid(value)) {
            set_type(static_cast< ::HelloKittyMsgData::FunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_functioncell;
        break;
      }

      // repeated .HelloKittyMsgData.FunctionCell functioncell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functioncell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functioncell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_functioncell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFunctionCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .HelloKittyMsgData.FunctionCell functioncell = 3;
  for (int i = 0; i < this->functioncell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->functioncell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFunctionCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .HelloKittyMsgData.FunctionCell functioncell = 3;
  for (int i = 0; i < this->functioncell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->functioncell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFunctionCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.FunctionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .HelloKittyMsgData.FunctionCell functioncell = 3;
  total_size += 1 * this->functioncell_size();
  for (int i = 0; i < this->functioncell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functioncell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFunctionCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFunctionCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFunctionCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFunctionCell::MergeFrom(const AckFunctionCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  functioncell_.MergeFrom(from.functioncell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFunctionCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFunctionCell::CopyFrom(const AckFunctionCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFunctionCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < functioncell_size(); i++) {
    if (!this->functioncell(i).IsInitialized()) return false;
  }
  return true;
}

void AckFunctionCell::Swap(AckFunctionCell* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    functioncell_.Swap(&other->functioncell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFunctionCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFunctionCell_descriptor_;
  metadata.reflection = AckFunctionCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqFunctionCellWork::kTempidFieldNumber;
const int ReqFunctionCellWork::kTypeFieldNumber;
const int ReqFunctionCellWork::kPlaceidFieldNumber;
const int ReqFunctionCellWork::kProduceidFieldNumber;
#endif  // !_MSC_VER

ReqFunctionCellWork::ReqFunctionCellWork()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqFunctionCellWork::InitAsDefaultInstance() {
}

ReqFunctionCellWork::ReqFunctionCellWork(const ReqFunctionCellWork& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqFunctionCellWork::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  placeid_ = 0u;
  produceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqFunctionCellWork::~ReqFunctionCellWork() {
  SharedDtor();
}

void ReqFunctionCellWork::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqFunctionCellWork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFunctionCellWork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqFunctionCellWork_descriptor_;
}

const ReqFunctionCellWork& ReqFunctionCellWork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_produceitem_2eproto();
  return *default_instance_;
}

ReqFunctionCellWork* ReqFunctionCellWork::default_instance_ = NULL;

ReqFunctionCellWork* ReqFunctionCellWork::New() const {
  return new ReqFunctionCellWork;
}

void ReqFunctionCellWork::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    placeid_ = 0u;
    produceid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqFunctionCellWork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .HelloKittyMsgData.FunctionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FunctionType_IsValid(value)) {
            set_type(static_cast< ::HelloKittyMsgData::FunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_placeid;
        break;
      }

      // required uint32 placeid = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_placeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &placeid_)));
          set_has_placeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_produceid;
        break;
      }

      // required uint32 produceid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &produceid_)));
          set_has_produceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqFunctionCellWork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 placeid = 3 [default = 0];
  if (has_placeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->placeid(), output);
  }

  // required uint32 produceid = 4;
  if (has_produceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->produceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqFunctionCellWork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 placeid = 3 [default = 0];
  if (has_placeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->placeid(), target);
  }

  // required uint32 produceid = 4;
  if (has_produceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->produceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqFunctionCellWork::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.FunctionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 placeid = 3 [default = 0];
    if (has_placeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->placeid());
    }

    // required uint32 produceid = 4;
    if (has_produceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->produceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFunctionCellWork::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqFunctionCellWork* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqFunctionCellWork*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqFunctionCellWork::MergeFrom(const ReqFunctionCellWork& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_placeid()) {
      set_placeid(from.placeid());
    }
    if (from.has_produceid()) {
      set_produceid(from.produceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqFunctionCellWork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFunctionCellWork::CopyFrom(const ReqFunctionCellWork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFunctionCellWork::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ReqFunctionCellWork::Swap(ReqFunctionCellWork* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    std::swap(placeid_, other->placeid_);
    std::swap(produceid_, other->produceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqFunctionCellWork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqFunctionCellWork_descriptor_;
  metadata.reflection = ReqFunctionCellWork_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBTPOpReturnFail::kTempidFieldNumber;
const int AckBTPOpReturnFail::kTypeFieldNumber;
const int AckBTPOpReturnFail::kPlaceidFieldNumber;
const int AckBTPOpReturnFail::kCommoncodeFieldNumber;
const int AckBTPOpReturnFail::kCodeFieldNumber;
#endif  // !_MSC_VER

AckBTPOpReturnFail::AckBTPOpReturnFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBTPOpReturnFail::InitAsDefaultInstance() {
}

AckBTPOpReturnFail::AckBTPOpReturnFail(const AckBTPOpReturnFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBTPOpReturnFail::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  placeid_ = 0u;
  commoncode_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBTPOpReturnFail::~AckBTPOpReturnFail() {
  SharedDtor();
}

void AckBTPOpReturnFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBTPOpReturnFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBTPOpReturnFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBTPOpReturnFail_descriptor_;
}

const AckBTPOpReturnFail& AckBTPOpReturnFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_produceitem_2eproto();
  return *default_instance_;
}

AckBTPOpReturnFail* AckBTPOpReturnFail::default_instance_ = NULL;

AckBTPOpReturnFail* AckBTPOpReturnFail::New() const {
  return new AckBTPOpReturnFail;
}

void AckBTPOpReturnFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    placeid_ = 0u;
    commoncode_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBTPOpReturnFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .HelloKittyMsgData.FunctionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FunctionType_IsValid(value)) {
            set_type(static_cast< ::HelloKittyMsgData::FunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_placeid;
        break;
      }

      // required uint32 placeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_placeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &placeid_)));
          set_has_placeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_commoncode;
        break;
      }

      // required .HelloKittyMsgData.ErrorCodeType commoncode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commoncode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::ErrorCodeType_IsValid(value)) {
            set_commoncode(static_cast< ::HelloKittyMsgData::ErrorCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_code;
        break;
      }

      // required .HelloKittyMsgData.BTPOpFailType code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::BTPOpFailType_IsValid(value)) {
            set_code(static_cast< ::HelloKittyMsgData::BTPOpFailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBTPOpReturnFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 placeid = 3;
  if (has_placeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->placeid(), output);
  }

  // required .HelloKittyMsgData.ErrorCodeType commoncode = 4;
  if (has_commoncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->commoncode(), output);
  }

  // required .HelloKittyMsgData.BTPOpFailType code = 5;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBTPOpReturnFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 placeid = 3;
  if (has_placeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->placeid(), target);
  }

  // required .HelloKittyMsgData.ErrorCodeType commoncode = 4;
  if (has_commoncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->commoncode(), target);
  }

  // required .HelloKittyMsgData.BTPOpFailType code = 5;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBTPOpReturnFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.FunctionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 placeid = 3;
    if (has_placeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->placeid());
    }

    // required .HelloKittyMsgData.ErrorCodeType commoncode = 4;
    if (has_commoncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commoncode());
    }

    // required .HelloKittyMsgData.BTPOpFailType code = 5;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBTPOpReturnFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBTPOpReturnFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBTPOpReturnFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBTPOpReturnFail::MergeFrom(const AckBTPOpReturnFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_placeid()) {
      set_placeid(from.placeid());
    }
    if (from.has_commoncode()) {
      set_commoncode(from.commoncode());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBTPOpReturnFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTPOpReturnFail::CopyFrom(const AckBTPOpReturnFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTPOpReturnFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AckBTPOpReturnFail::Swap(AckBTPOpReturnFail* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    std::swap(placeid_, other->placeid_);
    std::swap(commoncode_, other->commoncode_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBTPOpReturnFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBTPOpReturnFail_descriptor_;
  metadata.reflection = AckBTPOpReturnFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqFunctionOp::kTempidFieldNumber;
const int ReqFunctionOp::kTypeFieldNumber;
const int ReqFunctionOp::kPlaceidFieldNumber;
const int ReqFunctionOp::kOptypeFieldNumber;
#endif  // !_MSC_VER

ReqFunctionOp::ReqFunctionOp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqFunctionOp::InitAsDefaultInstance() {
}

ReqFunctionOp::ReqFunctionOp(const ReqFunctionOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqFunctionOp::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  placeid_ = 0u;
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqFunctionOp::~ReqFunctionOp() {
  SharedDtor();
}

void ReqFunctionOp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqFunctionOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFunctionOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqFunctionOp_descriptor_;
}

const ReqFunctionOp& ReqFunctionOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_produceitem_2eproto();
  return *default_instance_;
}

ReqFunctionOp* ReqFunctionOp::default_instance_ = NULL;

ReqFunctionOp* ReqFunctionOp::New() const {
  return new ReqFunctionOp;
}

void ReqFunctionOp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    placeid_ = 0u;
    optype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqFunctionOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tempid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .HelloKittyMsgData.FunctionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::FunctionType_IsValid(value)) {
            set_type(static_cast< ::HelloKittyMsgData::FunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_placeid;
        break;
      }

      // required uint32 placeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_placeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &placeid_)));
          set_has_placeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_optype;
        break;
      }

      // required .HelloKittyMsgData.BTPOpType optype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelloKittyMsgData::BTPOpType_IsValid(value)) {
            set_optype(static_cast< ::HelloKittyMsgData::BTPOpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqFunctionOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tempid(), output);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 placeid = 3;
  if (has_placeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->placeid(), output);
  }

  // required .HelloKittyMsgData.BTPOpType optype = 4;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqFunctionOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tempid = 1;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tempid(), target);
  }

  // required .HelloKittyMsgData.FunctionType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 placeid = 3;
  if (has_placeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->placeid(), target);
  }

  // required .HelloKittyMsgData.BTPOpType optype = 4;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqFunctionOp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tempid = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .HelloKittyMsgData.FunctionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 placeid = 3;
    if (has_placeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->placeid());
    }

    // required .HelloKittyMsgData.BTPOpType optype = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFunctionOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqFunctionOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqFunctionOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqFunctionOp::MergeFrom(const ReqFunctionOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_placeid()) {
      set_placeid(from.placeid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqFunctionOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFunctionOp::CopyFrom(const ReqFunctionOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFunctionOp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ReqFunctionOp::Swap(ReqFunctionOp* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    std::swap(placeid_, other->placeid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqFunctionOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqFunctionOp_descriptor_;
  metadata.reflection = ReqFunctionOp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloKittyMsgData

// @@protoc_insertion_point(global_scope)
